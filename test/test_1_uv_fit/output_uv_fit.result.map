! GIDLAS mapping script

let SIC%TEE .TRUE.

let name output_uv_fit
define image f 'name'.uvfit read /global

IF (.NOT.EXIST(ilength)) define integer ilength
IF (.NOT.EXIST(nlength)) define integer nlength
nlength = f%dim[2]-4
if (mod(nlength,15).eq.0) then
  ilength = 15 ! Old uvfit format
else if (mod(nlength,17).eq.0) then
  ilength = 17 ! New uvfit format
endif

IF (.NOT.EXIST(nchan)) define integer nchan
let nchan f%dim[1]
say nchan = 'nchan'

IF (.NOT.EXIST(nobj)) define integer nobj
let nobj nlength/ilength

IF (.NOT.EXIST(rf_1)) define real rf_1
IF (.NOT.EXIST(rf_2)) define real rf_2
IF (.NOT.EXIST(rf_3)) define real rf_3
IF (.NOT.EXIST(rf_4)) define real rf_4
IF (.NOT.EXIST(rf_5)) define real rf_5
IF (.NOT.EXIST(rf_6)) define real rf_6
IF (.NOT.EXIST(rf_7)) define real rf_7
IF (.NOT.EXIST(rf_x)) define real rf_x
IF (.NOT.EXIST(rf_x_err)) define real rf_x_err
IF (.NOT.EXIST(rf_y)) define real rf_y
IF (.NOT.EXIST(rf_y_err)) define real rf_y_err
IF (.NOT.EXIST(rf_freq)) define real rf_freq
IF (.NOT.EXIST(rf_flux)) define real rf_flux
IF (.NOT.EXIST(rf_flux_err)) define real rf_flux_err
IF (.NOT.EXIST(rf_major)) define real rf_major
IF (.NOT.EXIST(rf_major_err)) define real rf_major_err
IF (.NOT.EXIST(rf_minor)) define real rf_minor
IF (.NOT.EXIST(rf_minor_err)) define real rf_minor_err
IF (.NOT.EXIST(rf_PA)) define real rf_PA
IF (.NOT.EXIST(rf_PA_err)) define real rf_PA_err
IF (.NOT.EXIST(rf_snr)) define real rf_snr
IF (.NOT.EXIST(rf_ra)) define real rf_ra
IF (.NOT.EXIST(rf_dec)) define real rf_dec
IF (.NOT.EXIST(rf_velo)) define real rf_velo
for iobj 1 to nobj
  sic output "run_pdbi_uvt_go_uvfit_print_results.20180123.16h17m40s.CET.out" append
  say "output_uv_fit.result.obj_"'iobj'".txt"
  sic output
  sic output "output_uv_fit.result.obj_"'iobj'".txt" new
  say # "x" "x_err" "y" "y_err" "freq" "flux" "flux_err" "major" "major_err" "minor" "minor_err" "PA" "PA_err" "RA" "Dec" "velocity" /format A1 A11 A12 A12 A12 A12 A15 A15 A12 A12 A12 A12 A12 A12 A15 A15 A12
  say # arcsec arcsec arcsec arcsec GHz mJy mJy arcsec arcsec arcsec arcsec degree degree degree degree "km/s" /format A1 A11 A12 A12 A12 A12 A15 A15 A12 A12 A12 A12 A12 A12 A15 A15 A12
  for ichan 1 to nchan
    let rf_freq    -(f[ichan,4]-f%veloff)*f%restfre/299792.458+f%restfre
    let rf_1         f[ichan,'01+(iobj-1)*ilength']
    let rf_2         f[ichan,'02+(iobj-1)*ilength']
    let rf_3         f[ichan,'03+(iobj-1)*ilength']
    let rf_4         f[ichan,'04+(iobj-1)*ilength']
    let rf_5         f[ichan,'05+(iobj-1)*ilength']
    let rf_6         f[ichan,'06+(iobj-1)*ilength']
    let rf_7         f[ichan,'07+(iobj-1)*ilength']
    let rf_x         f[ichan,'08+(iobj-1)*ilength']
    let rf_x_err     f[ichan,'09+(iobj-1)*ilength']
    let rf_y         f[ichan,'10+(iobj-1)*ilength']
    let rf_y_err     f[ichan,'11+(iobj-1)*ilength']
    let rf_flux      f[ichan,'12+(iobj-1)*ilength']
    let rf_flux_err  f[ichan,'13+(iobj-1)*ilength']
    let rf_major     f[ichan,'14+(iobj-1)*ilength']
    let rf_major_err f[ichan,'15+(iobj-1)*ilength']
    let rf_minor     f[ichan,'16+(iobj-1)*ilength']
    let rf_minor_err f[ichan,'17+(iobj-1)*ilength']
    let rf_PA        f[ichan,'18+(iobj-1)*ilength']
    let rf_PA_err    f[ichan,'19+(iobj-1)*ilength']
    let rf_freq      rf_freq/1e3        ! to GHz
    let rf_flux      rf_flux*1e3        ! to mJy
    let rf_flux_err  rf_flux_err*1e3    ! to mJy
    let rf_snr       rf_flux/rf_flux_err
    if (rf_snr.LT.0) let rf_snr 0
    if (rf_major.LE.1E-10)     let rf_major 0
    if (rf_major.GE.1E+10)     let rf_major 0
    if (rf_major_err.LE.1E-10) let rf_major_err 0
    if (rf_major_err.GE.1E+10) let rf_major_err 0
    if (rf_minor.LE.1E-10)     let rf_minor 0
    if (rf_minor.GE.1E+10)     let rf_minor 0
    if (rf_minor_err.LE.1E-10) let rf_minor_err 0
    if (rf_minor_err.GE.1E+10) let rf_minor_err 0
    if (rf_PA.LE.1E-10)        let rf_PA 0
    if (rf_PA.GE.1E+10)        let rf_PA 0
    if (rf_PA_err.LE.1E-10)    let rf_PA_err 0
    if (rf_PA_err.GE.1E+10)    let rf_PA_err 0
    if (f%a0.GT.0) then
    let rf_ra f%a0/pi*180+rf_x/3600/cos(f%d0)
    let rf_dec f%d0/pi*180+rf_y/3600
    else
    let rf_ra f%ra/pi*180+rf_x/3600/cos(f%dec)
    let rf_dec f%dec/pi*180+rf_y/3600
    endif
    let rf_velo f[ichan,4]
    say rf_x rf_x_err rf_y rf_y_err rf_freq rf_flux rf_flux_err rf_major rf_major_err rf_minor rf_minor_err rf_PA rf_PA_err rf_ra rf_dec rf_velo /format F12.3 F12.3 F12.3 F12.3 F12.3 ES15.5 ES15.5 F12.3 F12.3 F12.3 F12.3 F12.3 F12.3 F15.7 F15.7 F12.3
  next ichan
  sic output
next iobj

!go plotfit
!hardcopy output_uv_fit.plotfit.'iorder'.eps /overwrite


delete /variable f

