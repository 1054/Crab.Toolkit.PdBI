#!/bin/bash
# 
# Input RA Dec
# Output spec & uv_average
# 
PdBIUVT_EXMP=".pdbi-uvt-go-average.mapping"
PdBIUVT_EXPY=".pdbi-uvt-go-average.py"
PdBIUVT_STTY=".pdbi-uvt-go-average.tty"
PdBIUVT_NAME=""
PdBIUVT_SAVE=""
PdBIUVT_SIZE="30"
PdBIUVT_VARY=0
PdBIUVT_VMIN=0
PdBIUVT_VMAX=0
PdBIUVT_CAGE=
PdBIUVT_linefreq=0
PdBIUVT_linewidth=0
PdBIUVT_restfreq=0
PdBIUVT_redshift=0
PdBIUVT_linename=""
# channel width in unit of channel
PdBIUVT_CHAN_WDTH="0"
# LANG
LANG=C
# 
if [[ "$*" == *"-name"* ]]; then
PdBIUVT_NAME=$(expr "$*" : '.*-name* \([^ ]*\)')
PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -E 's/[.]uvt$//g')
fi
# 
if [[ "$*" == *"-out"* ]]; then
PdBIUVT_SAVE=$(expr "$*" : '.*-out* \([^ ]*\)')
PdBIUVT_SAVE=$(echo $PdBIUVT_SAVE | sed -E 's/[.]uvt$//g')
fi
if [[ "$*" == *"-size"* ]]; then
PdBIUVT_SIZE=$(expr "$*" : '.*-size* \([^ ]*\)')
fi
# 
# Channel Range
if [[ "$*" == *"-crange "* ]]; then
PdBIUVT_CAGE=$(expr "$*" : '.*-crange *\([^-]*\)')
fi
# 
# Velocity Range
if [[ "$*" == *"-vrange "* ]]; then
PdBIUVT_CAGE=""
PdBIUVT_VMIN=$(expr "$*" : '.*-vrange *\([^ ]*\)')
PdBIUVT_VMAX=$(expr "$*" : '.*-vrange *[^ ]* \([^ ]*\)')
fi
# 
# linefreq and linewidth
if [[ "$*" == *"-linefreq "* ]]; then
PdBIUVT_linefreq=$(expr "$*" : '.*-linefreq *\([^ ]*\)')
#echo PdBIUVT_linefreq=$PdBIUVT_linefreq
fi
# 
# linefreq and linewidth
if [[ "$*" == *"-linewidth "* ]]; then
PdBIUVT_linewidth=$(expr "$*" : '.*-linewidth *\([^ ]*\)')
#echo PdBIUVT_linewidth=$PdBIUVT_linewidth
fi
# 
# redshift and linename
if [[ "$*" == *"-redshift "* ]]; then
PdBIUVT_redshift=$(expr "$*" : '.*-redshift *\([^ ]*\)')
#echo PdBIUVT_redshift=$PdBIUVT_redshift
fi
# 
# redshift and linename
if [[ "$*" == *"-linename "* ]]; then
PdBIUVT_linename=$(expr "$*" : '.*-linename *\([^ ]*\)')
#echo PdBIUVT_linename=$PdBIUVT_linename
fi
# 
# echo $PdBIUVT_RANX_OBJT $PdBIUVT_DECX_OBJT
# 
if [[ x"$PdBIUVT_NAME" == x"" ]]; then
    echo "Usage: "
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME[no-suffix] -crange 1 50 55 90 [-out PdBIUVT_NAME-Averaged]"
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME[no-suffix] -linefreq 89.098 -linewidth 450 [-out PdBIUVT_NAME-Averaged]"
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME[no-suffix] -redshift 2.055 -linename \"CO(3-2)\" -linewidth 450 [-out PdBIUVT_NAME-Averaged]"
    exit
fi
# 
if [[ h$(echo echo ello | sm 2>/dev/null) != hello ]]; then
    echo Error! Supermongo not found! sm not working! Exit!
    exit 1
fi
# exit
# 
# Revise input parameters
# 
# -- remove the suffix of the input uvtable name, and test whether the file exists
PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -E 's/[.]uvt$//g')
if [[ ! -f "$PdBIUVT_NAME.uvt" ]]; then
    echo Error! "$PdBIUVT_NAME.uvt" was not found! Exit!
    exit
fi
# -- set output uvtable name, and check whether it exists
if [[ x"$PdBIUVT_SAVE" == x"" ]]; then
    PdBIUVT_SAVE="$PdBIUVT_NAME-Averaged"
fi
if [[ -f "$PdBIUVT_SAVE.uvt" ]]; then
    PdBIUVT_TEMP=""
    ####echo -n "$PdBIUVT_SAVE.uvt exists! Would you like to overwrite? [y/n] "
    ####read PdBIUVT_TEMP
    ####if [[ x"$PdBIUVT_TEMP" == x"y"* ]]; then 
    ####echo "Overwriting $PdBIUVT_SAVE.uvt!"
    ####else
    ####echo "OK! No change has been made! Exit!"
    ####exit
    ####fi
fi
# -- if input linewidth linename redshift then compute linefreq in obsframe
if [[ x"$PdBIUVT_linename" != x ]]; then
    if [[ "$PdBIUVT_linename" == *"CO("* ]]; then 
        if [[ "$PdBIUVT_linename" == *"2-1"* ]]; then PdBIUVT_restfreq=230.5380000; fi
        if [[ "$PdBIUVT_linename" == *"3-2"* ]]; then PdBIUVT_restfreq=345.7959899; fi
        if [[ "$PdBIUVT_linename" == *"5-4"* ]]; then PdBIUVT_restfreq=576.2679305; fi
    fi
fi
if [[ "$PdBIUVT_restfreq" != "0" && "$PdBIUVT_redshift" != "0" ]]; then
    PdBIUVT_linefreq=$(sm <<< "calc ($PdBIUVT_restfreq/(1.0+$PdBIUVT_redshift))")
fi
if [[ "$PdBIUVT_linewidth" != "0" ]]; then
    echo PdBIUVT_linename="$PdBIUVT_linename"
    echo PdBIUVT_linefreq="$PdBIUVT_linefreq"
    echo PdBIUVT_restfreq="$PdBIUVT_restfreq"
    echo PdBIUVT_redshift="$PdBIUVT_redshift"
    echo PdBIUVT_linewidth="$PdBIUVT_linewidth"
    if [[ "$PdBIUVT_linefreq" == "0" ]]; then
        echo "Error! Could not determine linefreq! Please set -linefreq xxx or set both -redshift xxx and -linename xxx!"
        exit
    fi
fi
# 
# Read uvtable header <Note> copied from pdbi-uvt-go-uvfit
# 
# 
# Running GILDAS mapping to get uvtable header
echo "header $PdBIUVT_NAME.uvt" | mapping | sed 's/[^[:print:]]//g' > "header.txt"
if [[ ! -f "header".txt ]]; then
    echo ""; echo "Error! Failed to run \"echo \"header $PdBIUVT_NAME.uvt\" | mapping\" > \"header.txt\"! Please make sure mapping is working!"; echo ""
    exit
fi
# get line name and rest frequency <Corrected><20150217><DADDI><DZLIU> the rest frequency is not reference frequency
PdBIUVT_TEMP_TEXT=$(echo header $PdBIUVT_NAME.uvt | mapping | grep 'Rest Frequency')
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
echo "File  Input" = "$PdBIUVT_NAME.uvt"
if [[ "$PdBIUVT_TEMP_TEXT" == *"Line Name Rest Frequency"* ]]; then # IF Line Name is Empty
PdBIUVT_LINE_NAME=""
PdBIUVT_FREQ_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 7)
else
PdBIUVT_LINE_NAME=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 5)
PdBIUVT_FREQ_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 8)
fi
echo "Freq  Restf" = $PdBIUVT_FREQ_CENT MHz
# get velocity resolution (and frequency resolution)
PdBIUVT_TEMP_TEXT=$(echo header $PdBIUVT_NAME.uvt | mapping | grep 'Resolution in Velocity')
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_VELO_RESL=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4)
PdBIUVT_FREQ_RESL=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 7)
echo "Freq  Resol" = $PdBIUVT_FREQ_RESL MHz
echo "Velo  Resol" = $PdBIUVT_VELO_RESL km/s
# get channel min max and center
PdBIUVT_CHAN_MINI=1
PdBIUVT_CHAN_MAXI=$(cat header.txt | grep 'UV Data * Channels:.*, Stokes:.*Visibilities:' | sed -E 's/.*UV Data[ ]* Channels:[ ]*(.*)[ ]*, Stokes:[ ]*(.*)[ ]*Visibilities:[ ]*(.*)[ ]*$/\1/g')
PdBIUVT_CHAN_CENT=$(echo "$PdBIUVT_CHAN_MAXI/2+1" | bc) # for example 100 channels, the central channel is 51 in gildas, starting from 1.
##PdBIUVT_TEMP_TEXT=$(echo header $PdBIUVT_NAME.uvt | mapping | grep 'UV Data *Channels')
##PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
##PdBIUVT_CHAN_MINI=$(echo 1)
##PdBIUVT_CHAN_MAXI=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4 | sed -e 's/[,]//g')
##PdBIUVT_CHAN_CENT=$(echo "$PdBIUVT_CHAN_MAXI/2+1" | bc)
echo "Channel Min" = $PdBIUVT_CHAN_MINI
echo "Channel Max" = $PdBIUVT_CHAN_MAXI
echo "Channel Cen" = $PdBIUVT_CHAN_CENT
# get reference channel freq (and frequency resolution)
PdBIUVT_TEMP_TEXT=$(echo header $PdBIUVT_NAME.uvt | mapping | grep -A 1 'Size *Reference Pixel *Value *Increment' | tail -n 1)
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_CHAN_CREF=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 2)
PdBIUVT_FREQ_CREF=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 3)
PdBIUVT_FREQ_CBIN=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4)
PdBIUVT_VELO_CREF=0.0 #<TODO> make sure the reference channel is velocity zero
echo "Channel Ref" = $PdBIUVT_CHAN_CREF
echo "Velo    Ref" = $PdBIUVT_VELO_CREF km/s
echo "Freq    Ref" = $PdBIUVT_FREQ_CREF MHz
echo "Freq    Bin" = $PdBIUVT_FREQ_CBIN MHz
# get frequency min max
PdBIUVT_FREQ_MINI=$(echo "calc $PdBIUVT_FREQ_CREF-abs(($PdBIUVT_CHAN_MINI-$PdBIUVT_CHAN_CREF)+1)*abs($PdBIUVT_FREQ_CBIN)" | sm)
PdBIUVT_FREQ_MAXI=$(echo "calc $PdBIUVT_FREQ_CREF+abs(($PdBIUVT_CHAN_MAXI-$PdBIUVT_CHAN_CREF)+1)*abs($PdBIUVT_FREQ_CBIN)" | sm)
echo "Freq    Min" = $PdBIUVT_FREQ_MINI MHz
echo "Freq    Max" = $PdBIUVT_FREQ_MAXI MHz
# 
# 
# 
# 
# 
# 
if [[ "$PdBIUVT_linefreq" != "0" && "$PdBIUVT_linewidth" != "0" ]]; then
    #PdBIUVT_VMIN=$(sm <<< "calc (1000.0*$PdBIUVT_linefreq-$PdBIUVT_FREQ_CREF)/$PdBIUVT_FREQ_CREF*2.99792458e5-$PdBIUVT_linewidth/2.0")
    #PdBIUVT_VMAX=$(sm <<< "calc (1000.0*$PdBIUVT_linefreq-$PdBIUVT_FREQ_CREF)/$PdBIUVT_FREQ_CREF*2.99792458e5+$PdBIUVT_linewidth/2.0")
    PdBIUVT_VMIN=$(sm <<< "calc (1000.0*$PdBIUVT_linefreq-$PdBIUVT_FREQ_CREF)/$PdBIUVT_FREQ_RESL*$PdBIUVT_VELO_RESL-$PdBIUVT_linewidth/2.0")
    PdBIUVT_VMAX=$(sm <<< "calc (1000.0*$PdBIUVT_linefreq-$PdBIUVT_FREQ_CREF)/$PdBIUVT_FREQ_RESL*$PdBIUVT_VELO_RESL+$PdBIUVT_linewidth/2.0")
fi
if [[ "$PdBIUVT_VMIN" != "0" && "$PdBIUVT_VMAX" != "0" ]]; then
    PdBIUVT_CMIN=$(echo "calc $PdBIUVT_CHAN_CREF+($PdBIUVT_VMIN/$PdBIUVT_VELO_RESL)" | sm)
    PdBIUVT_CMAX=$(echo "calc $PdBIUVT_CHAN_CREF+($PdBIUVT_VMAX/$PdBIUVT_VELO_RESL)" | sm)
    PdBIUVT_CMIN=$(echo $PdBIUVT_CMIN | python -c "print round(float(raw_input()))")
    PdBIUVT_CMAX=$(echo $PdBIUVT_CMAX | python -c "print round(float(raw_input()))")
    PdBIUVT_CAGE=$(echo $PdBIUVT_CMIN $PdBIUVT_CMAX)
    if [[ $PdBIUVT_CMIN > $PdBIUVT_CMAX ]]; then PdBIUVT_CAGE=$(echo $PdBIUVT_CMAX $PdBIUVT_CMIN); else PdBIUVT_CAGE=$(echo $PdBIUVT_CMIN $PdBIUVT_CMAX); fi
    PdBIUVT_VMIN=$(echo "calc ($PdBIUVT_CMIN-$PdBIUVT_CHAN_CREF)*$PdBIUVT_VELO_RESL" | sm)
    PdBIUVT_VMAX=$(echo "calc ($PdBIUVT_CMAX-$PdBIUVT_CHAN_CREF)*$PdBIUVT_VELO_RESL" | sm)
    PdBIUVT_VAGE=$(echo $PdBIUVT_VMIN $PdBIUVT_VMAX)
    if [[ $PdBIUVT_VMIN > $PdBIUVT_VMAX ]]; then PdBIUVT_VAGE=$(echo $PdBIUVT_VMAX $PdBIUVT_VMIN); else PdBIUVT_VAGE=$(echo $PdBIUVT_VMIN $PdBIUVT_VMAX); fi
    #<fixed><20151106><dzliu># PdBIUVT_UMIN=$(sm <<< "calc (($PdBIUVT_CMIN-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CENT)/1e3")
    #<fixed><20151106><dzliu># PdBIUVT_UMAX=$(sm <<< "calc (($PdBIUVT_CMAX-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CENT)/1e3")
    PdBIUVT_UMIN=$(sm <<< "calc (($PdBIUVT_CMIN-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CREF)/1e3")
    PdBIUVT_UMAX=$(sm <<< "calc (($PdBIUVT_CMAX-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CREF)/1e3")
    PdBIUVT_UAGE=$(echo $PdBIUVT_UMIN $PdBIUVT_UMAX)
    if [[ $PdBIUVT_UMIN > $PdBIUVT_UMAX ]]; then PdBIUVT_UAGE=$(echo $PdBIUVT_UMAX $PdBIUVT_UMIN); else PdBIUVT_UAGE=$(echo $PdBIUVT_UMIN $PdBIUVT_UMAX); fi
else
    PdBIUVT_CMIN=$(echo $PdBIUVT_CAGE | sed -e 's/^ *//g' | tr -s ' ' | cut -d ' ' -f 1)
    PdBIUVT_CMAX=$(echo $PdBIUVT_CAGE | sed -e 's/^ *//g' | tr -s ' ' | cut -d ' ' -f $(echo $PdBIUVT_CAGE | wc -w))
    PdBIUVT_VMIN=$(echo "calc ($PdBIUVT_CMIN-$PdBIUVT_CHAN_CREF)*$PdBIUVT_VELO_RESL" | sm)
    PdBIUVT_VMAX=$(echo "calc ($PdBIUVT_CMAX-$PdBIUVT_CHAN_CREF)*$PdBIUVT_VELO_RESL" | sm)
    PdBIUVT_VAGE=$(echo $PdBIUVT_VMIN $PdBIUVT_VMAX)
    if [[ $PdBIUVT_VMIN > $PdBIUVT_VMAX ]]; then PdBIUVT_VAGE=$(echo $PdBIUVT_VMAX $PdBIUVT_VMIN); else PdBIUVT_VAGE=$(echo $PdBIUVT_VMIN $PdBIUVT_VMAX); fi
    #<fixed><20151106><dzliu># PdBIUVT_UMIN=$(sm <<< "calc (($PdBIUVT_CMIN-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CENT)/1e3")
    #<fixed><20151106><dzliu># PdBIUVT_UMAX=$(sm <<< "calc (($PdBIUVT_CMAX-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CENT)/1e3")
    PdBIUVT_UMIN=$(sm <<< "calc (($PdBIUVT_CMIN-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CREF)/1e3")
    PdBIUVT_UMAX=$(sm <<< "calc (($PdBIUVT_CMAX-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_RESL+$PdBIUVT_FREQ_CREF)/1e3")
    if [[ $PdBIUVT_UMIN > $PdBIUVT_UMAX ]]; then PdBIUVT_UAGE=$(echo $PdBIUVT_UMAX $PdBIUVT_UMIN); else PdBIUVT_UAGE=$(echo $PdBIUVT_UMIN $PdBIUVT_UMAX); fi
fi
# 
# show info
echo "Channel Range" = "$PdBIUVT_CAGE"
if [[ $(echo $PdBIUVT_CAGE | wc -w) -eq 2 ]]; then
    echo Channel Width = $(echo "calc abs(($PdBIUVT_CMAX)-($PdBIUVT_CMIN))+1" | sm)
fi
echo "Velocity Range" = "$PdBIUVT_VAGE" "(aligned to channel center)" # "(-"$(sm<<<"calc 0.5*$PdBIUVT_VELO_RESL") "+"$(sm<<<"calc 0.5*$PdBIUVT_VELO_RESL")")"
if [[ $(echo $PdBIUVT_VAGE | wc -w) -eq 2 ]]; then
    echo Velocity Width = $(echo "calc ($PdBIUVT_VMAX) - ($PdBIUVT_VMIN) + ($PdBIUVT_VELO_RESL)" | sm) "km/s"
fi
echo "Frequency Range" = "$PdBIUVT_UAGE" "(aligned to channel center)" # "(-"$(sm<<<"calc 0.5*abs($PdBIUVT_FREQ_RESL)") "+"$(sm<<<"calc 0.5*abs($PdBIUVT_FREQ_RESL)")")"
if [[ $(echo $PdBIUVT_UAGE | wc -w) -eq 2 ]]; then
    echo Frequency Width = $(echo "calc abs(($PdBIUVT_UMAX)-($PdBIUVT_UMIN))+abs($PdBIUVT_FREQ_RESL/1e3)" | sm) "GHz"
    echo Frequency Center = $(echo "calc (($PdBIUVT_UMAX)+($PdBIUVT_UMIN))/2.0" | sm) "GHz"
fi
# exit
# 
# check crange
if [[ "$PdBIUVT_CMIN" == "-"* || "$PdBIUVT_CMAX" == "-"* ]]; then 
    echo ""
    echo "Error! Channel range are not positive values! Please check the input values!"
    echo ""
    exit
fi
if [[ $(sm <<< "calc $PdBIUVT_CHAN_MAXI-$PdBIUVT_CMAX") == "-"* ]]; then 
    echo ""
    echo "Error! Channel range are out of receiver allowed values! Please check the input values!"
    echo ""
    exit
fi
# 
# prepare gildas/mapping init and script and run
PdBIUVT_TEMP_INIT="tmp_doUVAVERAGE.init"
PdBIUVT_TEMP_EXEC="tmp_doUVAVERAGE.map"
PdBIUVT_TEMP_LOGT="tmp_doUVAVERAGE.log"
echo  '! '                                                                                       > $PdBIUVT_TEMP_INIT
echo  '! Task UV_AVERAGE'                                                                       >> $PdBIUVT_TEMP_INIT
echo  '! 6 parameters needed for all functions'                                                 >> $PdBIUVT_TEMP_INIT
echo  '!'                                                                                       >> $PdBIUVT_TEMP_INIT
echo  'TASK\CHARACTER "Input UV table"                   UV_INPUT$      "'$PdBIUVT_NAME'"'      >> $PdBIUVT_TEMP_INIT
echo  'TASK\CHARACTER "Output UV table"                  UV_OUTPUT$     "'$PdBIUVT_SAVE'"'      >> $PdBIUVT_TEMP_INIT
echo  'TASK\VALUES    "Channel range"                    RANGES$         '$PdBIUVT_CAGE         >> $PdBIUVT_TEMP_INIT
echo  'TASK\CHARACTER "Type of range"                    CTYPE$         "'"CHANNEL"'"'          >> $PdBIUVT_TEMP_INIT
echo  'TASK\GO'                                                                                 >> $PdBIUVT_TEMP_INIT
echo  "let name $PdBIUVT_NAME"                        > $PdBIUVT_TEMP_EXEC
echo  "let type lmv"                                 >> $PdBIUVT_TEMP_EXEC
echo  "let size $PdBIUVT_SIZE"                       >> $PdBIUVT_TEMP_EXEC
echo  "run uv_average $PdBIUVT_TEMP_INIT /NOWINDOW"  >> $PdBIUVT_TEMP_EXEC
echo  '@tmp_doUVAVERAGE.map  |  mapping  > '"$PdBIUVT_TEMP_LOGT"
echo  '@tmp_doUVAVERAGE.map' |  mapping  >  "$PdBIUVT_TEMP_LOGT"
# 
# 
echo 
tail -n 1 "$PdBIUVT_TEMP_LOGT"
echo "I-RUN,  Output to $PdBIUVT_SAVE.uvt"
echo 
# 
# 
