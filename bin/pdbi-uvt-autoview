#!/bin/bash
# 
# 
# 
# Check input
# 
if [[ $# -eq 0 ]]; then
    echo "pdbi-uvt-autoview -name some_uvtables*.uvt -size 30"
    exit
fi
# 
# 
# Prepare all parameters
# 
PdBIUVT_NAME=()
PdBIUVT_SIZE=30
PdBIUVT_EXPY=".pdbi-uvt-autoview.py"
PdBIUVT_STTY=".pdbi-uvt-autoview.tty"
# 
# 
# Read input parameters
# 
PdBIUVT_GOOD=1
PdBIUVT_TSTR=""
PdBIUVT_RPAR=""
while [[ $# -gt 0 ]]; do
    # echo $1
    PdBIUVT_TSTR=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    case "$PdBIUVT_TSTR" in
          "-name") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="name";;
          "-size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SIZE="$1";;
    esac
    if [[ "$PdBIUVT_RPAR" == "name" ]];  then 
        if [[ "$#" -lt 1 ]]; then
            break
        fi
        if [[ ${#PdBIUVT_NAME[@]} -eq 0 ]]; then
            PdBIUVT_NAME=("$1")
        else
            PdBIUVT_NAME+=("$1")
        fi
    fi
    shift
done

ls $(dirname $0)/pdbi-uvt-autoview.map
ls $(dirname $0)/pdbi-uvt-autoclick.greg

if [[ -f pdbi-uvt-autoview.map ]]; then
    # echo "rm -i pdbi-uvt-autoview.map"
    ## rm -i pdbi-uvt-autoview.map
    echo "Backup existing pdbi-uvt-autoview.map as pdbi-uvt-autoview.map.backup"
    mv pdbi-uvt-autoview.map pdbi-uvt-autoview.map.backup
fi
if [[ ! -f pdbi-uvt-autoview.map ]]; then
    echo "cp $(dirname $0)/pdbi-uvt-autoview.map ."
    cp $(dirname $0)/pdbi-uvt-autoview.map .
fi
if [[ -f pdbi-uvt-autoclick.greg ]]; then
    # echo "rm -i pdbi-uvt-autoclick.greg"
    # rm -i pdbi-uvt-autoclick.greg
    echo "Backup existing pdbi-uvt-autoclick.greg as pdbi-uvt-autoclick.greg.backup"
    mv pdbi-uvt-autoclick.greg pdbi-uvt-autoclick.greg.backup
fi
if [[ ! -f pdbi-uvt-autoclick.greg ]]; then
    echo "cp $(dirname $0)/pdbi-uvt-autoclick.greg ."
    cp $(dirname $0)/pdbi-uvt-autoclick.greg .
fi


# 
# <TODO>
# sort input file name list
# 
# for each in ${PdBIUVT_NAME[@]}; do
#     echo $each
# done | sort 


echo "\$PdBIUVT_NAME:"
echo "${#PdBIUVT_NAME[@]}"
echo "${PdBIUVT_NAME[@]}"



###########################################################################################################################
function pdbi_uvt_autoview_log_script() {
    
    echo "LET obs_count = ${#PdBIUVT_NAME[@]}"
    echo "LET obs_id = 1"
    echo ""
    
    for (( i = 0; i < ${#PdBIUVT_NAME[@]}; i++ )); do
        
        PdBIUVT_iPod=$(bc <<< $i+1)
        
        echo "! "
        echo "! ---------------------------------------- $PdBIUVT_iPod"
        
        if [[ ${PdBIUVT_NAME[$i]} == *.uvfits ]]; then
            PdBIUVT_DATA=$(echo "${PdBIUVT_NAME[$i]}" | sed -e 's/\.uvfits$//g')
            echo "! "
            echo "! convert uvfits to uvt"
            echo "SIC FIND $PdBIUVT_DATA.uvfits"
            echo "IF (DIR%NFILE.GT.0)"
            echo "FITS $PdBIUVT_DATA.uvfits TO $PdBIUVT_DATA.uvt /STYLE CASA"
            echo "ELSE"
            echo "PAUSE \"Error! $PdBIUVT_DATA.uvfits not found!\""
            echo "EXIT"
            echo "ENDIF"
        else 
            PdBIUVT_DATA=$(echo "${PdBIUVT_NAME[$i]}" | sed -e 's/\.uvt$//g')
        fi
        
        
        # make simple object name text from the data file name
        # which will be shown on screen
        PdBIUVT_TEXT=$(echo "$PdBIUVT_DATA" | sed -e 's/calibrated_//g' | sed -e 's/_X[0-9]*//g' | sed -e 's/_NoReComputeNoise//g')
        
        
        echo "! "
        echo "! convert uvt to lmv"
        echo "SIC FIND $PdBIUVT_DATA.lmv"
        echo "IF (DIR%NFILE.EQ.0)"
        echo "LET NAME $PdBIUVT_DATA"
        echo "LET SIZE $PdBIUVT_SIZE"
        echo "GO UVMAP"
        echo "ENDIF"
        
        echo "! "
        echo "! now load into obs_names and obs_files"
        echo "LET obs_names[$PdBIUVT_iPod] = $PdBIUVT_TEXT"
        echo "LET obs_files[$PdBIUVT_iPod] = $PdBIUVT_DATA"
        echo ""
        
        # if [[ $i -gt 2 ]]; then 
        #     exit
        # fi
    done
    
    echo ""
    echo ""
    echo "LET SIZE $PdBIUVT_SIZE"
    echo ""
    echo ""
    echo "@pdbi-uvt-autoclick.greg"
    echo ""
    echo ""
    echo ""
    
}
###########################################################################################################################



pdbi_uvt_autoview_log_script >> pdbi-uvt-autoview.map

echo "Successfully wrote command into pdbi-uvt-autoview.map!"

echo "Now please run @pdbi-uvt-autoview.map in gildas/mapping!"

read -p "Additionally, do you want to run mapping now? [y/n] " -n 1 -r

if [[ $REPLY =~ ^[Yy]$ ]]
then
    # do dangerous stuff -- http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
    echo ""
    # 
    # now let us launch mapping from xterm and send command to it with ttyecho!
    # 
    xterm -title "pdbi-uvt-autoview" -e "tty > $PdBIUVT_STTY; bash" &
    # 
    while [[ $(ps aux | grep 'xterm -title pdbi-uvt-autoview' | wc -l) -eq 1 ]]; do
    sleep 0.25
    done
    sleep 0.25
    # 
    while [[ $(ls -1 $PdBIUVT_STTY 2>/dev/null | wc -l) -ne 1 ]]; do
    sleep 0.25
    done
    sleep 0.25
    # 
    echo sudo ttyecho -n $(cat $PdBIUVT_STTY) mapping
    sudo env PATH=$PATH ttyecho -n $(cat $PdBIUVT_STTY) mapping
    # 
    sleep 0.25
    # 
    echo sudo ttyecho -n $(cat $PdBIUVT_STTY) @pdbi-uvt-autoview
    sudo env PATH=$PATH ttyecho -n $(cat $PdBIUVT_STTY) @pdbi-uvt-autoview
else 
    echo ""
fi



