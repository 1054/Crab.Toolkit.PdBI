#!/bin/bash
# 
# Input vis
# Output python script file (flag uv range to alter maximum recoverable size)
# 
# Last update:
#    2016-12-26 
# 
CASAMS_VIS="" # dataset name
CASAMS_OUT="" # output name
CASAMS_UVMIN=""
CASAMS_UVMAX=""
CASAMS_SIZEMIN=""
CASAMS_SIZEMAX=""
# 
# Read input parameters
# 
#if [[ "$#" -eq 0 ]]; then
#    echo "Usage: casa-ms-flag-uv -vis calibrated.ms [-out calibrated.ms.listobs.txt]"
#    exit
#fi
# 
# Check casa
# 
if [[ $(type casa 2>/dev/null | wc -l) -eq 0 ]]; then
    echo ""
    echo "Error! CASA was not found! Please check your \$PATH!"
    echo ""
    exit
fi
# 
# Read input parameters
# 
CASAMS_GOOD=1
CASAMS_RPAR=""
while [[ "$#" -gt 0 ]]; do
    # echo $1
    case $1 in
           "-vis") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_VIS="$1";;
           "-out") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_OUT="$1";;
           "-min") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_UVMIN="$1";;
           "-max") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_UVMAX="$1";;
    esac
    shift
done
# 
# Check input parameter -- vis
# 
if [[ x"$CASAMS_VIS" == x ]]; then
    CASAMS_GOOD=0
    #echo -n "Please input vis: "
    #read CASAMS_VIS
    # Set default value
    CASAMS_VIS="calibrated.ms"
    # Now we can first print default value, then if user input anything we remove the default value and show the user input. 
    echo -n "Please input vis: $CASAMS_VIS"
    read -N 1 CASAMS_KEY
    if [[ x"$CASAMS_KEY" != x ]]; then
        echo -e -n "\r$(tput el)Please input vis: $CASAMS_KEY"
        read CASAMS_VIS
        CASAMS_VIS="${CASAMS_KEY}${CASAMS_VIS}"
    fi
    # Check again the input is not empty
    if [[ x"$CASAMS_VIS" != x ]]; then
        CASAMS_GOOD=1
    fi
fi
# 
# Check input parameters ------ if not passed then print usage and exit
# 
if [[ $CASAMS_GOOD -eq 0 ]]; then
    echo "Usage: casa-ms-flag-uv -vis calibrated.ms -min 45"
    exit
fi
# 
# Revise input parameters
# 
# -- remove the suffix of the input vis name, and test whether the file exists
if [[ x"$(echo $CASAMS_VIS | grep -E '.*\.ms.*')" == x ]]; then
    CASAMS_VIS_SFIX=".ms"
else
    CASAMS_VIS_SFIX=$(echo $CASAMS_VIS | sed -E 's/.*(\.ms.*)$/\1/g')
    CASAMS_VIS=$(echo $CASAMS_VIS | sed -E 's/(.*)(\.ms.*)$/\1/g')
fi
CASAMS_VIS=$(echo $CASAMS_VIS | sed -E 's/[.]ms$//g')
if [[ ! -d "${CASAMS_VIS}${CASAMS_VIS_SFIX}" ]]; then
    echo Error! "${CASAMS_VIS}${CASAMS_VIS_SFIX}" was not found! Exit!
    exit
fi
# 
# Revise input parameter -- output directory -- if not given, set to default
# 
if [[ x"$CASAMS_OUT" == x ]]; then
	echo "Output file name not given, set as \"$(basename ${CASAMS_VIS}).plot.Tsys\"!"
    CASAMS_OUT="$(basename ${CASAMS_VIS}${CASAMS_VIS_SFIX}).flag.uv"
fi
# 
# Backup and make output directory
# 
if [[ -d "$CASAMS_OUT.backup" ]]; then
    echo "Found existing \"$CASAMS_OUT.backup\"! Backuping it as \"$CASAMS_OUT.backup.backup\"!"
    mv "$CASAMS_OUT.backup" "$CASAMS_OUT.backup.backup"
fi
if [[ -d "$CASAMS_OUT" ]]; then
    echo "Found existing \"$CASAMS_OUT\"! Backuping it as \"$CASAMS_OUT.backup\"!"
    mv "$CASAMS_OUT" "$CASAMS_OUT.backup"
fi
if [[ ! -d "$CASAMS_OUT" ]]; then
    mkdir "$CASAMS_OUT"
fi
if [[ ! -d "$CASAMS_OUT" ]]; then
    echo "Error! Failed to create output directory \"$CASAMS_OUT\"!"
    exit 1
fi
# 
# 
# 
# 
# Write run_dzliu_plot_Tsys.py
# -- see plotcal() -- https://casa.nrao.edu/docs/TaskRef/plotcal-task.html
# 
CASAMS_FPY="run_dzliu_flag_uv.py"
echo "# CASAPY "                                           >  "$CASAMS_FPY"
echo "# "                                                  >> "$CASAMS_FPY"
echo ""                                                    >> "$CASAMS_FPY"
echo "import os, sys"                                      >> "$CASAMS_FPY"
echo ""                                                    >> "$CASAMS_FPY"
echo "# "                                                  >> "$CASAMS_FPY"
echo "# -- flagdata"                                       >> "$CASAMS_FPY"
echo "plotcal( "                                                                                           >> "$CASAMS_FPY"
echo "    vis        = '${CASAMS_VIS}${CASAMS_VIS_SFIX}', "                                                >> "$CASAMS_FPY"
echo "    mode       = 'manual', "                                                                         >> "$CASAMS_FPY"
echo "    action     = 'apply', "                                                                          >> "$CASAMS_FPY"
echo "    flagbackup = True, "                                                                             >> "$CASAMS_FPY"
echo "    uvrange    = [%f,%f] "                                                                           >> "$CASAMS_FPY"
echo ")"                                                                                                   >> "$CASAMS_FPY"
echo ""                                                                                                    >> "$CASAMS_FPY"
echo ""                                                                                                    >> "$CASAMS_FPY"
echo "Wrote to python script: \"${CASAMS_FPY}\""
echo "Please run bash -c 'casa --nogui -c \"${CASAMS_FPY}\"'"
# 
# 
# 
# 
# Run casa
# 
CASAMS_YES="Yes"
echo ""
echo -n "Ready to run CASA now? $CASAMS_YES"
read -N 1 CASAMS_KEY
if [[ x"$CASAMS_KEY" != x ]]; then
    echo -e -n "\r$(tput el)Ready to run CASA now? $CASAMS_KEY"
    read CASAMS_YES
    CASAMS_YES="${CASAMS_KEY}${CASAMS_YES}"
fi
# Check again the input is not empty
if [[ x"$CASAMS_YES" != x"Y"* || x"$CASAMS_YES" != x"y"* ]]; then
    echo "Exit!"
    exit
fi
# Run
if [[ $(type casa 2>/dev/null | wc -l) -eq 0 ]]; then
    echo ""
    echo "Error! CASA was not found! Please check your \$PATH!"
    echo ""
    exit
else
    echo "Running casa, please wait"
    casa --nogui -c "${CASAMS_FPY}"
    echo "Finished casa, now reading listobs text file"
    cat ${CASAMS_OUT} | awk '/Fields: /,/Spectral Windows: /' | head -n -1
    cat ${CASAMS_OUT} | awk '/Spectral Windows: /,/Sources: /' | head -n -1
fi



echo "Done!"
