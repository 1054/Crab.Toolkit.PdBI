#!/bin/bash
# 
# Input the pdbi-uvt-go-uvfit output log file, 
# Output formatted data table: Source, reduced_chi2, flux, ferr, xoff, xerr, ...
# 
# Last update:
#    2017-02-22 created. 
# 

# 
# CHECK GILDAS mapping
# 
if [[ $(echo "say hello" | mapping 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! GILDAS mapping not found! Exit!"
    exit 1
fi

# 
# Prepare function to print usage
# 
function usage() {
    echo "Usage: "
    echo "    pdbi-uvt-go-uvfit-print-results-v3 aaa_uvfit.uvfit object_id   # object_id starts from 1"
    echo ""
}



# 
# Read input parameters
# 
if [[ $# -eq 0 ]]; then
    usage
    exit
fi



# 
# Check input parameters
# 
if [[ ! -f "$1" ]]; then 
    echo "Error! Input file \"$1\" was not found!"
    exit 1
fi
Input_file="$1"



#PdBIUVT_IOBJ="$2"



# 
# Check input file extension
# 
if [[ x"$Input_file" == x*.uvfit ]]; then
    Result_file=$(basename "$Input_file") # | sed -e 's/\.uvfit$//g'
else
    Result_file=$(basename "$Input_file")".uvfit"
fi
# 
# Copy input file to current directory and make sure the file extension is ".uvfit"
# 
if [[ ! -f "$Result_file" ]]; then
    cp "$Input_file" "$Result_file"
fi
PdBIUVT_SAVE=$(basename $Result_file | sed -e 's/\.uvfit$//g')



if [[ ! -z "$PdBIUVT_SAVE" ]]; then
    # 
    # Run GILDAS mapping script
    echo "! GIDLAS mapping script"                                                                                                                                                                                            >  "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "let SIC%TEE .TRUE."                                                                                                                                                                                                 >> "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "let name $PdBIUVT_SAVE"                                                                                                                                                                                             >> "$PdBIUVT_SAVE.result.map"
    echo "define image f 'name'.uvfit read /global"                                                                                                                                                                           >> "$PdBIUVT_SAVE.result.map" # see -- /Users/dzliu/Softwares/GILDAS/gildas-exe-10feb17/pro/p_plotfit.map
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "define integer nlength ilength"                                                                                                                                                                                     >> "$PdBIUVT_SAVE.result.map"
    echo "nlength = f%dim[2]-4"                                                                                                                                                                                               >> "$PdBIUVT_SAVE.result.map"
    echo "if (mod(nlength,15).eq.0) then"                                                                                                                                                                                     >> "$PdBIUVT_SAVE.result.map"
    echo "  ilength = 15 ! Old uvfit format"                                                                                                                                                                                  >> "$PdBIUVT_SAVE.result.map"
    echo "else if (mod(nlength,17).eq.0) then"                                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "  ilength = 17 ! New uvfit format"                                                                                                                                                                                  >> "$PdBIUVT_SAVE.result.map"
    echo "endif"                                                                                                                                                                                                              >> "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "define integer nchan"                                                                                                                                                                                               >> "$PdBIUVT_SAVE.result.map"
    echo "let nchan f%dim[1]"                                                                                                                                                                                                 >> "$PdBIUVT_SAVE.result.map"
    echo "say nchan = 'nchan'"                                                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "define integer nobj"                                                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "let nobj nlength/ilength"                                                                                                                                                                                           >> "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "define real rf_x rf_x_err rf_y rf_y_err rf_freq rf_flux rf_flux_err rf_major rf_major_err rf_minor rf_minor_err rf_PA rf_PA_err rf_snr"                                                                             >> "$PdBIUVT_SAVE.result.map"
    echo "for iobj 1 to nobj"                                                                                                                                                                                                 >> "$PdBIUVT_SAVE.result.map"
    echo "  sic output $PdBIUVT_SAVE.result.obj_'iobj'.txt new"                                                                                                                                                               >> "$PdBIUVT_SAVE.result.map"
    echo "  say # \"x\" \"x_err\" \"y\" \"y_err\" \"freq\" \"flux\" \"flux_err\" \"major\" \"major_err\" \"minor\" \"minor_err\" \"PA\" \"PA_err\" /format A1 A9 A10 A10 A10 A15 A19 A19 A14 A14 A14 A14 A14 A14 A14 A14"     >> "$PdBIUVT_SAVE.result.map"
    echo "  say # arcsec arcsec arcsec arcsec GHz mJy mJy arcsec arcsec arcsec arcsec degree degree /format A1 A9 A10 A10 A10 A15 A19 A19 A14 A14 A14 A14 A14 A14 A14 A14"                                                    >> "$PdBIUVT_SAVE.result.map"
    echo "  for ichan 1 to nchan"                                                                                                                                                                                             >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_freq    -(f[ichan,4]-f%veloff)*f%restfre/299792.458+f%restfre"                                                                                                                                           >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_x         f[ichan,'08+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_x_err     f[ichan,'09+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_y         f[ichan,'10+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_y_err     f[ichan,'11+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_flux      f[ichan,'12+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_flux_err  f[ichan,'13+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_major     f[ichan,'14+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_major_err f[ichan,'15+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_minor     f[ichan,'16+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_minor_err f[ichan,'17+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_PA        f[ichan,'18+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_PA_err    f[ichan,'19+(iobj-1)*ilength']"                                                                                                                                                                >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_freq      rf_freq/1e3        ! to GHz"                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_flux      rf_flux*1e3        ! to mJy"                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_flux_err  rf_flux_err*1e3    ! to mJy"                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "    let rf_snr       rf_flux/rf_flux_err"                                                                                                                                                                           >> "$PdBIUVT_SAVE.result.map"
    echo "    if (rf_snr.LT.0) let rf_snr 0"                                                                                                                                                                                  >> "$PdBIUVT_SAVE.result.map"
    echo "    say rf_x rf_x_err rf_y rf_y_err rf_freq rf_flux rf_flux_err rf_major rf_major_err rf_minor rf_minor_err rf_PA rf_PA_err /format F10.3 F10.3 F10.3 F10.3 F15.3 G19.7 G19.7 F14.3 F14.3 F14.3 F14.3 F14.3 F14.3"  >> "$PdBIUVT_SAVE.result.map"   # G19.7 ES19.7 E19.7 -- https://www.cs.mtu.edu/~shene/COURSES/cs201/NOTES/chap05/format.html
    echo "  next ichan"                                                                                                                                                                                                       >> "$PdBIUVT_SAVE.result.map"
    echo "  say \"\""                                                                                                                                                                                                         >> "$PdBIUVT_SAVE.result.map"
    echo "  sic output"                                                                                                                                                                                                       >> "$PdBIUVT_SAVE.result.map"
    echo "next iobj"                                                                                                                                                                                                          >> "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "!go plotfit"                                                                                                                                                                                                        >> "$PdBIUVT_SAVE.result.map"
    echo "!hardcopy $PdBIUVT_SAVE.plotfit.'iorder'.eps /overwrite"                                                                                                                                                            >> "$PdBIUVT_SAVE.result.map"
    echo ""                                                                                                                                                                                                                   >> "$PdBIUVT_SAVE.result.map"
    echo "echo @$PdBIUVT_SAVE.result.map | mapping -nw -nl > $PdBIUVT_SAVE.result.log"
    echo "@$PdBIUVT_SAVE.result.map" | mapping -nw -nl > "$PdBIUVT_SAVE.result.log"
    echo "Output the following uv_fit result data tables:"
    Output_Files=($(ls -1f $PdBIUVT_SAVE.result.obj_*.txt))
    for Output_File in "${Output_Files[@]}"; do echo "--> $Output_File"; done
    #echo "--> Note: the columns are frequency [GHz], flux [mJy] and error [mJy]"
    #ls $PdBIUVT_SAVE.result.obj_*.eps
fi








echo "Done!"


