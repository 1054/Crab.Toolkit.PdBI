#!/bin/bash
# 


# 
# Usage
# 
PdBIUVT_PrintUsage() {
    echo "Usage: "
    echo "    pdbi-uvt-raw-uvtable-combine-nth-channel-from-nth-file -name NAME -out OUTPUT_NAME"
    echo ""
    echo "Notes:"
    echo "    This code will take n-th channel from the n-th input uvtable as the n-th channel of the output uvtable."
    echo "    All input uvtables must have exactly the same channel, visibility and stokes numbers!"
    echo "    Please input a basename for a series of existing uvtables where the channels will be taken from, "
    echo "    and each uvtable should be named like 'basename_ch1.uvt', 'basename_ch2.uvt', 'basename_chN.uvt', etc."
    echo ""
    echo "Example: "
    echo "    # We have a MYDATA.uvt with 4 channels"
    echo "    ls MYDATA.uvt"
    echo "    # We model a point source in the uv plane and subtract this model, but its flux varies per channel, e.g., 1.0 mJy in ch1, ..., and 0 flux in ch4."
    echo "    pdbi-uvt-go-uvfit -name MYDATA -offset 0 0 -fixedpos -size 0.4 -fixedsize -flux 1.0e-3 -fixedflux -crange 1 1 -subtract -residual MYDATA_ch1 -out uvfit_output_ch1"
    echo "    pdbi-uvt-go-uvfit -name MYDATA -offset 0 0 -fixedpos -size 0.4 -fixedsize -flux 2.0e-3 -fixedflux -crange 2 2 -subtract -residual MYDATA_ch2 -out uvfit_output_ch2"
    echo "    pdbi-uvt-go-uvfit -name MYDATA -offset 0 0 -fixedpos -size 0.4 -fixedsize -flux 3.0e-3 -fixedflux -crange 3 3 -subtract -residual MYDATA_ch3 -out uvfit_output_ch3"
    echo "    pdbi-uvt-go-uvfit -name MYDATA -offset 0 0 -fixedpos -size 0.4 -fixedsize -flux 0.0000 -fixedflux -crange 4 4 -subtract -residual MYDATA_ch4 -out uvfit_output_ch4"
    echo "    ls MYDATA_ch1.uvt MYDATA_ch2.uvt MYDATA_ch3.uvt MYDATA_ch4.uvt"
    echo "    # Then we combine the model-subtracted channel-differed data together with this code"
    echo "    pdbi-uvt-raw-uvtable-combine-nth-channel-from-nth-file -name MYDATA -out MYDATA_model_subtracted.uvt"
    echo ""
}
if [[ $# -eq 0 ]]; then
    PdBIUVT_PrintUsage
    exit
fi



# 
# LANG
# 
LANG=C



# 
# SOURCE pdbi-uvt-core-arg
# 
if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v9" ]]; then
    source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v9" "$@"
else
    echo ""
    echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v9\"!"
    echo ""
    exit 1
fi



# 
# Check UVT name and Object RADec
# 
#echo PdBIUVT_NAME=${PdBIUVT_NAME[@]}
#echo PdBIUVT_SAVE=${PdBIUVT_SAVE[@]}
if [[ ${#PdBIUVT_NAME[@]} -eq 0 || ${#PdBIUVT_SAVE[@]} -eq 0 ]]; then
    PdBIUVT_PrintUsage
    exit
fi



# 
# Loop input uv tables
# 
for (( tk=0; tk<${#PdBIUVT_NAME[@]}; tk++ )); do
    # 
    # Set default output file
    # 
    if [[ ${#PdBIUVT_SAVE[@]} -le $tk ]]; then
        echo "Error! Output name was not defined for the input uvtable \"${PdBIUVT_NAME[tk]}\"!"
        exit
    fi
    if [[ x"${PdBIUVT_SAVE[tk]}" == x || x"${PdBIUVT_SAVE[tk]}" == x"tmp_pdbi_uvt" || x"${PdBIUVT_SAVE[tk]}" == x"tmp_pdbi_uvt_run_uv_fit" ]]; then
        echo "Error! Output name was not defined for the input uvtable \"${PdBIUVT_NAME[tk]}\"!"
        exit
    fi
    # 
    # Remove suffix
    # 
    if [[ x"${PdBIUVT_SAVE[tk]}" == x*".uvt" ]]; then
        PdBIUVT_SAVE[tk]=$(echo "${PdBIUVT_SAVE[tk]}" | sed -e 's/\.uvt$//g')
    fi
    if [[ x"${PdBIUVT_SAVE[tk]}" == x*".UVT" ]]; then
        PdBIUVT_SAVE[tk]=$(echo "${PdBIUVT_SAVE[tk]}" | sed -e 's/\.UVT$//g')
    fi
    # 
    # Backup existing output file
    # 
    if [[ -f "${PdBIUVT_SAVE[tk]}.uvt" ]]; then
        echo "Warning! Found previous \"${PdBIUVT_SAVE[tk]}.uvt\"! Backup as \"${PdBIUVT_SAVE[tk]}.uvt.backup\"!"
        mv "${PdBIUVT_SAVE[tk]}.uvt" "${PdBIUVT_SAVE[tk]}.uvt.backup"
    fi
    
    
    
    # 
    # 
    # 
    ##################################################
    # prepare GILDAS mapping init and script and run #
    ##################################################
    PdBIUVT_TEMP_EXEC="${PdBIUVT_SAVE[tk]}.run.map"
    PdBIUVT_TEMP_LOGT="${PdBIUVT_SAVE[tk]}.run.log"
    SRC_TEMP_EXEC=$(dirname ${BASH_SOURCE[0]})/$(basename ${BASH_SOURCE[0]})".map"
    if [[ ! -f "$SRC_TEMP_EXEC" ]]; then
        echo "Fatal Error! The Crab.Toolkit.PdBI code is incomplete! Please make sure you have the file \"$SRC_TEMP_EXEC\"!"
        exit 1
    fi
    cat "$SRC_TEMP_EXEC" | sed -e "s%PDBIUVT_INPUT_FILE%${PdBIUVT_NAME[tk]}%g" | sed -e "s%PDBIUVT_OUTPUT_FILE%${PdBIUVT_SAVE[tk]}%g" > "$PdBIUVT_TEMP_EXEC"
    echo "Running GILDAS mapping (it may take some time, check the realtime output in the log file)"
    echo "echo @$PdBIUVT_TEMP_EXEC | mapping -nw -nl | tee $PdBIUVT_TEMP_LOGT"
    echo "@$PdBIUVT_TEMP_EXEC" | mapping -nw -nl | tee "$PdBIUVT_TEMP_LOGT"
    
    if [[ ! -f "${PdBIUVT_SAVE[tk]}.uvt" ]]; then
        echo "Error! Failed to run the code! Please check:"
        echo "\"$PdBIUVT_TEMP_LOGT\""
        echo "\"$PdBIUVT_TEMP_EXEC\""
    else
        echo "Successfully output to \"${PdBIUVT_SAVE[tk]}.uvt\"!"
        if [[ $PdBIUVT_UVMERGE_KEEP_FILE -eq 0 ]]; then
            if [[ -f "$PdBIUVT_TEMP_LOGT" ]]; then rm "$PdBIUVT_TEMP_LOGT"; fi
            if [[ -f "$PdBIUVT_TEMP_EXEC" ]]; then rm "$PdBIUVT_TEMP_EXEC"; fi
        fi
    fi
    
    
    
done





