#!/bin/bash
# 
# Input field, name, width, 
# Output python script file (split,cvel,exportuvfits,uvmodelfit)
# 
# Last update:
#    2015-04-02 created
#    2016-06-27 automatically read SOURCE table, check input source, or loop all sources
# 
CASAMS_VIS="" # dataset name
CASAMS_NOM="" # source name (Name)
CASAMS_SOU=() # source name
CASAMS_FID=() # field id / pointing (in FIELD table)
CASAMS_FEQ=() # obs freq, sky freq
CASAMS_SPW=() # split spw
CASAMS_STK=() # split stokes
CASAMS_WID=() # split width for each spw
CASAMS_TYP="corrected" # data type, data or corrected
# 
# Usage
# 
function CASAMS_USG {
    #echo "Usage: casa-ms-split -vis calibrated.ms -field 3 -name CDFS344 -freq 344 -width 3840"
    echo "Usage: "
    echo "    casa-ms-split-one -name \"COScluster_z25\""
    echo "    casa-ms-split-one -vis calibrated.ms -name CDFS344 CDFS345 -spw \"1 2 3 4 5 6\" \"1 2 3\" -width 4 -stokes \"RR LL\" \"RR LL\""
    echo "Notes: "
    echo "    This example command will create CASA python scripts for the two sources, "
    echo "    For the first source, we will split each of the spw 1 2 3 4 5 6, and for each spw we further split into two stokes RR and LL."
    echo "    For the second source, we will split each of the spw 1 2 3, and for each spw we further split into two stokes RR and LL."
    echo "    Acceptable arguments are \"-vis\" \"-name\" \"-spw\" \"-width\" \"-stokes\" \"-skyfreq\"."
}
# 
# Read input parameters
# 
if [[ "$#" -eq 0 ]]; then
    CASAMS_USG
    exit
fi
# 
# Read input parameters
# 
CASAMS_GOOD=1
CASAMS_RPAR=""
while [[ "$#" -gt 0 ]]; do
    # echo $1
    case $1 in
           "-vis") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_VIS="$1";;
          "-freq") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="freq";;
       "-skyfreq") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="freq";;
     "-frequency") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="freq";;  # <TODO> WHAT IS skyfreq WHAT IS restfreq ???
         "-field") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="field";;
          "-name") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="source";;
        "-source") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="source";;
       "-sources") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="source";;
           "-spw") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="spw";;
        "-stokes") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="stokes";;
         "-polar") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="stokes";;
         "-width") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="width";;
           "-bin") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="width";;
         "-radec") if [[ "$#" -lt 3 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR="radec";;
    esac
    if [[ "$CASAMS_RPAR" == "field" ]];  then 
        if [[ "$#" -eq 0 ]]; then
            break
        fi
        CASAMS_FID=("${CASAMS_FID[@]}" "$1")
        # echo CASAMS_FID="${CASAMS_FID[@]}"
    fi
    if [[ "$CASAMS_RPAR" == "source" ]];  then 
        if [[ "$#" -eq 0 ]]; then
            break
        fi
        CASAMS_SOU=("${CASAMS_SOU[@]}" "$1")
        # echo CASAMS_SOU="${CASAMS_SOU[@]}"
    fi
    if [[ "$CASAMS_RPAR" == "freq" ]];  then 
        if [[ "$#" -eq 0 ]]; then
            break
        fi
        CASAMS_FEQ=("${CASAMS_FEQ[@]}" "$1")
        # echo CASAMS_FEQ="${CASAMS_FEQ[@]}"
    fi
    if [[ "$CASAMS_RPAR" == "spw" ]];  then 
        if [[ "$#" -eq 0 ]]; then
            break
        fi
        CASAMS_SPW=("${CASAMS_SPW[@]}" "$1")
        # echo CASAMS_SPW="${CASAMS_SPW[@]}"
    fi
    if [[ "$CASAMS_RPAR" == "stokes" ]];  then 
        if [[ "$#" -eq 0 ]]; then
            break
        fi
        CASAMS_STK=("${CASAMS_STK[@]}" "$1")
        # echo CASAMS_STK="${CASAMS_STK[@]}"
    fi
    if [[ "$CASAMS_RPAR" == "width" ]];  then 
        if [[ "$#" -eq 0 ]]; then
            break
        fi
        CASAMS_WID=("${CASAMS_WID[@]}" "$1")
        # echo CASAMS_WID="${CASAMS_WID[@]}"
    fi
    if [[ "$CASAMS_RPAR" == "radec" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if [[ "$1" == *":"*":"* ]]; then
            CASAMS_RANX=("${CASAMS_RANX[@]}" "$1")
            CASAMS_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
            CASAMS_RAND=("${CASAMS_RAND[@]}" "$CASAMS_TEMP")
        else
            CASAMS_RAND=("${CASAMS_RAND[@]}" "$1")
            CASAMS_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
            CASAMS_RANX=("${CASAMS_RANX[@]}" "$CASAMS_TEMP")
        fi
        if [[ "$2" == *":"*":"* ]]; then
            CASAMS_DECX=("${CASAMS_DECX[@]}" "$2")
            CASAMS_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
            CASAMS_DECD=("${CASAMS_DECD[@]}" "$CASAMS_TEMP")
        else
            CASAMS_DECD=("${CASAMS_DECD[@]}" "$2")
            CASAMS_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
            CASAMS_DECX=("${CASAMS_DECX[@]}" "$CASAMS_TEMP")
        fi
        shift
    fi
    shift
done
# 
# Check input parameter -- vis
# 
if [[ x"$CASAMS_VIS" == x ]]; then
    CASAMS_GOOD=0
    #echo -n "Please input vis: "
    #read CASAMS_VIS
    # Set default value
    CASAMS_VIS="calibrated.ms"
    # Now we can first print default value, then if user input anything we remove the default value and show the user input. 
    echo -n "Please input vis: $CASAMS_VIS"
    read -N 1 CASAMS_KEY
    if [[ x"$CASAMS_KEY" != x ]]; then
        echo -e -n "\r$(tput el)Please input vis: $CASAMS_KEY"
        read CASAMS_VIS
        CASAMS_VIS="${CASAMS_KEY}${CASAMS_VIS}"
    fi
    # Check again the input is not empty
    if [[ x"$CASAMS_VIS" != x ]]; then
        CASAMS_GOOD=1
    fi
fi









# 
# Check CASA
# 
if [[ $(type casa 2>/dev/null | wc -l) -eq 0 ]]; then
    echo ""
    echo "Error! CASA was not found! Please check your \$PATH!"
    echo ""
    exit
fi
# 
# Check SOURCE table
# 
if [[ ! -d "${CASAMS_VIS}${CASAMS_VIS_SFIX}/SOURCE" ]]; then
    echo ""
    echo "Error! Could not find \"${CASAMS_VIS}${CASAMS_VIS_SFIX}/SOURCE\"! The SOURCE table is missing?"
    echo ""
    exit
fi
# 
# Check SOURCE and SPECTRAL_WINDOW table with casa
# 
CASAMS_ScriptName="run_dzliu_temp_read_table"
echo "#!/bin/python"                                                    > "$CASAMS_ScriptName.py"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}/SOURCE')"               >> "$CASAMS_ScriptName.py"
echo "list_all_spw = tb.getcol('SPECTRAL_WINDOW_ID')"                  >> "$CASAMS_ScriptName.py"
echo "list_all_sou = tb.getcol('NAME')"                                >> "$CASAMS_ScriptName.py"
echo "list_uni_sou = list(set(list_all_sou))"                          >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.name.txt','wb')"                   >> "$CASAMS_ScriptName.py"
echo "fo.write('\n'.join(list_uni_sou))"                               >> "$CASAMS_ScriptName.py"
echo "fo.write('\n')"                                                  >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.srcid.txt','wb')"                  >> "$CASAMS_ScriptName.py"
echo "fo.write('\n'.join(list(set(map(str,tb.getcol('SOURCE_ID'))))))" >> "$CASAMS_ScriptName.py"
echo "fo.write('\n')"                                                  >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.spw.txt','wb')"                    >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_uni_sou)): "                             >> "$CASAMS_ScriptName.py"
echo "    for j in range(len(list_all_sou)): "                         >> "$CASAMS_ScriptName.py"
echo "        if list_all_sou[j] == list_uni_sou[i]: "                 >> "$CASAMS_ScriptName.py"
echo "            fo.write('%s '%(list_all_spw[j]))"                   >> "$CASAMS_ScriptName.py"
echo "    fo.write('\n')"                                              >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.source.name.txt','wb')"            >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_all_sou)): "                             >> "$CASAMS_ScriptName.py"
echo "    fo.write('%s\n'%(list_all_sou[i]))"                          >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.source.spw.txt','wb')"             >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_all_sou)): "                             >> "$CASAMS_ScriptName.py"
echo "    fo.write('%s\n'%(list_all_spw[i]))"                          >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.source.freq.txt','wb')"            >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_all_sou)): "                             >> "$CASAMS_ScriptName.py"
echo "    try:"                                                        >> "$CASAMS_ScriptName.py"
echo "        list_ref_feq = (tb.getcell('REST_FREQUENCY',i))[0]"      >> "$CASAMS_ScriptName.py"
echo "    except:"                                                     >> "$CASAMS_ScriptName.py"
echo "        list_ref_feq = 0.0"                                      >> "$CASAMS_ScriptName.py"
echo "    fo.write('%s\n'%(list_ref_feq))"                             >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}/FIELD')"                >> "$CASAMS_ScriptName.py"
echo "list_field_sou = tb.getcol('NAME')"                              >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.field.txt','wb')"                  >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_uni_sou)): "                             >> "$CASAMS_ScriptName.py"
echo "    fo.write(' ')"                                               >> "$CASAMS_ScriptName.py"
echo "    for j in range(len(list_field_sou)):"                        >> "$CASAMS_ScriptName.py"
echo "        if list_field_sou[j] == list_uni_sou[i]:"                >> "$CASAMS_ScriptName.py"
echo "            fo.write('%d '%(j))"                                 >> "$CASAMS_ScriptName.py"
echo "    fo.write('\n')"                                              >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}/SPECTRAL_WINDOW')"      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.chan.txt','wb')"                   >> "$CASAMS_ScriptName.py"
echo "list_all_chn = tb.getcol('NUM_CHAN')"                            >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_all_chn)):"                              >> "$CASAMS_ScriptName.py"
echo "    fo.write('%g\n'%(list_all_chn[i]))"                          >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.chan.freq.ref.txt','wb')"          >> "$CASAMS_ScriptName.py"
echo "list_all_chs = tb.getcol('REF_FREQUENCY')"                       >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_all_chs)):"                              >> "$CASAMS_ScriptName.py"
echo "    fo.write('%g\n'%(list_all_chs[i]))"                          >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "for i in range(len(list_all_chs)): "                             >> "$CASAMS_ScriptName.py"
echo "    fo = open('$CASAMS_ScriptName.chan.freq.spw%d.txt'%(i),'wb')">> "$CASAMS_ScriptName.py"
echo "    list_all_chk = tb.getcell('CHAN_FREQ',i)"                    >> "$CASAMS_ScriptName.py"
echo "    for j in range(len(list_all_chk)): "                         >> "$CASAMS_ScriptName.py"
echo "        fo.write('%g\n'%(list_all_chk[j]))"                      >> "$CASAMS_ScriptName.py"
echo "    fo.close()"                                                  >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}')"                      >> "$CASAMS_ScriptName.py"
echo "fo = open('$CASAMS_ScriptName.datatype.txt','wb')"               >> "$CASAMS_ScriptName.py"
echo "list_col = tb.colnames()"                                        >> "$CASAMS_ScriptName.py"
echo "if 'CORRECTED_DATA' in list_col: "                               >> "$CASAMS_ScriptName.py"
echo "    fo.write('corrected\n')"                                     >> "$CASAMS_ScriptName.py"
echo "else: "                                                          >> "$CASAMS_ScriptName.py"
echo "    fo.write('data\n')"                                          >> "$CASAMS_ScriptName.py" #<TODO># need to make sure that column corrected is not there
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
echo ""                                                                >> "$CASAMS_ScriptName.py"
echo "Running CASA to read measurement set tables: "
echo "    \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/SOURCE"
echo "    \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/FIELD"
echo "    \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/SPECTRAL_WINDOW"
casa --nogui -c "$CASAMS_ScriptName.py" > "$CASAMS_ScriptName.log" 2>&1
#echo "debug aaa bbb ccc" >> "$CASAMS_ScriptName.name.txt"
# 
# Read into SHELL arrays
# 
CASAMS_TableSources=() # The list of sources in MS
CASAMS_TableFields=() # The list of fields in MS
CASAMS_TableChans=() # The channel number list for all spws, has a dimension of spw number. 
CASAMS_TableSpws=() # The list of list of spw for each source, has a dimension of source number. 
if [[ ! -f "$CASAMS_ScriptName.name.txt" ]]; then
    echo ""
    echo "Error! Failed to read \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/SOURCE/table.* files! Please make sure the measurement set is complete!"
    echo ""
    exit
else
    IFS=$'\n' read -d '' -r -a CASAMS_TableSources < "$CASAMS_ScriptName.name.txt"
fi
if [[ ! -f "$CASAMS_ScriptName.field.txt" ]]; then
    echo ""
    echo "Error! Failed to read \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/SOURCE/table.* files! Please make sure the measurement set is complete!"
    echo ""
    exit
else
    IFS=$'\n' read -d '' -r -a CASAMS_TableFields < "$CASAMS_ScriptName.field.txt"
fi
if [[ ! -f "$CASAMS_ScriptName.chan.txt" ]]; then
    echo ""
    echo "Error! Failed to read \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/SPECTRAL_WINDOW/table.* files! Please make sure the measurement set is complete!"
    echo ""
    exit
else
    IFS=$'\n' read -d '' -r -a CASAMS_TableChans < "$CASAMS_ScriptName.chan.txt"
fi
if [[ ! -f "$CASAMS_ScriptName.spw.txt" ]]; then
    echo ""
    echo "Error! Failed to read \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/SOURCE/table.* files! Please make sure the measurement set is complete!"
    echo ""
    exit
else
    IFS=$'\n' read -d '' -r -a CASAMS_TableSpws < "$CASAMS_ScriptName.spw.txt"
fi
if [[ ! -f "$CASAMS_ScriptName.datatype.txt" ]]; then
    echo ""
    echo "Error! Failed to read \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/table.* files! Please make sure the measurement set is complete!"
    echo ""
    exit
else
    IFS=$'\n' read -d '' -r -a CASAMS_TYP < "$CASAMS_ScriptName.datatype.txt"
fi
# 
# Check dimension of CASAMS_ListOfSources and CASAMS_ListOfFields
# 
if [[ ${#CASAMS_ListOfSources[@]} -ne ${#CASAMS_ListOfFields[@]} ]]; then
    echo ""
    echo "Error! Failed to read \"${CASAMS_VIS}${CASAMS_VIS_SFIX}\"/table.* files! ListOfSources and ListOfFields have inconsistent dimensions!"
    echo ""
    exit
fi
# 
# Check input source, if input source is empty, set to all sources in SOURCE table
# 
if [[ ${#CASAMS_SOU[@]} -eq 0 ]]; then
    CASAMS_SOU=("${CASAMS_TableSources[@]}")
    echo "Setting source list according to the SOURCE table"
    for (( i=0; i<${#CASAMS_SOU[@]}; i++ )); do 
        echo "    ${CASAMS_SOU[i]}"
    done
else
    #echo "Checking source list"
    echo "Setting source list according to input: "
    for (( i=0; i<${#CASAMS_SOU[@]}; i++ )); do 
        # The input source is a list, each element is a string. 
        echo "    ${CASAMS_SOU[i]}"
        # 
        # Loop TableSources and check input source name
        # -- <TODO> maybe add some wildcard name matching things
        # 
        CASAMS_TEMP=0
        for (( j=0; j<${#CASAMS_TableSources[@]}; j++ )); do 
            if [[ x"${CASAMS_SOU[i]}" == x"${CASAMS_TableSources[j]}" ]]; then
                CASAMS_TEMP=1; break
            fi
            if [[ x"${CASAMS_SOU[i]}" == x"\"${CASAMS_TableSources[j]}\"" ]]; then
                CASAMS_TEMP=1; break #<20160823># fixed the source name with quotes problem
            fi
        done
        if [[ $CASAMS_TEMP -eq 0 ]]; then
            echo ""
            echo "Error! The input source \"${CASAMS_SOU[i]}\" was not found in the SOURCE table!"
            echo ""
            exit
        fi
    done
fi
# 
# Loop each input source 
# and determine field, spw, width, stokes, skyfreq
# 
CASAMS_FID_LIST=()
CASAMS_SPW_LIST=()
CASAMS_WID_LIST=()
CASAMS_STK_LIST=()
CASAMS_FEQ_LIST=()
for (( i=0; i<${#CASAMS_SOU[@]}; i++ )); do 
    # 
    # Match the name of this source
    # 
    CASAMS_TEMP_FOUND=0
    for (( j=0; j<${#CASAMS_TableSources[@]}; j++ )); do 
        # 
        # <TODO> maybe add some wildcard name matching things
        # 
        if [[ x"${CASAMS_SOU[i]}" == x"${CASAMS_TableSources[j]}" ]]; then
            # 
            # found input source in SOURCE table
            # 
            CASAMS_TEMP_FOUND=1
            # 
            # determine CASAMS_FID_DATA
            # 
            if [[ $i -lt ${#CASAMS_FID[@]} && ${#CASAMS_FID[@]} -gt 0 ]]; then
                CASAMS_FID_DATA=$(echo "${CASAMS_FID[i]}")
            else
                CASAMS_FID_DATA=$(echo "${CASAMS_TableFields[j]}" | tr -s ' ' | sed -e 's/^ //g' | sed -e 's/ $//g')
            fi
            CASAMS_FID_LIST+=("$CASAMS_FID_DATA")
            # 
            # determine CASAMS_SPW_DATA
            # 
            if [[ $i -lt ${#CASAMS_SPW[@]} && ${#CASAMS_SPW[@]} -gt 0 ]]; then
                CASAMS_SPW_DATA=$(echo "${CASAMS_SPW[i]}")
            else
                CASAMS_SPW_DATA=$(echo "${CASAMS_TableSpws[j]}" | tr -s ' ' | sed -e 's/^ //g' | sed -e 's/ $//g')
            fi
            CASAMS_SPW_LIST+=("$CASAMS_SPW_DATA")
            # 
            # determine CASAMS_WID_DATA
            # 
            if [[ $i -lt ${#CASAMS_WID[@]} && ${#CASAMS_WID[@]} -gt 0 ]]; then
                CASAMS_WID_DATA=$(echo "${CASAMS_WID[i]}")
            else
                CASAMS_WID_DATA="1"
            fi
            CASAMS_WID_LIST+=("$CASAMS_WID_DATA")
            # 
            # determine CASAMS_STK_DATA
            # 
            if [[ $i -lt ${#CASAMS_STK[@]} && ${#CASAMS_STK[@]} -gt 0 ]]; then
                CASAMS_STK_DATA=$(echo "${CASAMS_STK[i]}")
            else
                CASAMS_STK_DATA=""
            fi
            CASAMS_STK_LIST+=("$CASAMS_STK_DATA")
            # 
            # determine CASAMS_FEQ_DATA
            # 
            if [[ $i -lt ${#CASAMS_FEQ[@]} && ${#CASAMS_FEQ[@]} -gt 0 ]]; then
                CASAMS_FEQ_DATA=$(echo "${CASAMS_FEQ[i]}")
            else
                CASAMS_FEQ_DATA=""
            fi
            CASAMS_FEQ_LIST+=("$CASAMS_FEQ_DATA")
        fi
    done
    if [[ $CASAMS_TEMP_FOUND -eq 0 ]]; then
        echo ""
        echo "Error! \"${CASAMS_SOU[i]}\" was not found in the SOURCE table!"
        echo "Candidates are: "
        for (( j=0; j<${#CASAMS_TableSources[@]}; j++ )); do 
        echo "      ${CASAMS_TableSources[j]}"
        done
        echo ""
        exit
    fi
done
# 
# Check input parameters ------ if not passed then print usage and exit
# 
if [[ $CASAMS_GOOD -eq 0 ]]; then
    CASAMS_USG
    exit
fi

























# 
# Revise input parameters
# 
# -- remove the suffix, and test whether vis dir exists
if [[ x"$(echo $CASAMS_VIS | grep -E '.*\.ms.*')" == x ]]; then
    CASAMS_VIS_SFIX=".ms"
else
    CASAMS_VIS_SFIX=$(echo $CASAMS_VIS | sed -E 's/.*(\.ms.*)$/\1/g')
    CASAMS_VIS=$(echo $CASAMS_VIS | sed -E 's/(.*)(\.ms.*)$/\1/g')
fi
CASAMS_VIS=$(echo $CASAMS_VIS | sed -E 's/[.]ms$//g')
if [[ ! -d "${CASAMS_VIS}${CASAMS_VIS_SFIX}" ]]; then
    echo Error! "${CASAMS_VIS}${CASAMS_VIS_ SFIX}" was not found! Exit!
    exit
fi
### -- append the suffix of the input freq if it is not ending with "Hz"
##CASAMS_FEQ_UNIT=$(echo $CASAMS_FEQ | grep -E "Hz$" | sed -E "s/[0-9.+-]*([GMk]*Hz)$/\1/g")
##if [[ x"$CASAMS_FEQ_UNIT" == x"" ]]; then
##    CASAMS_FEQ_UNIT="GHz"
##    CASAMS_FEQ="${CASAMS_FEQ}GHz"
##fi
### -- let CASAMS_STK='' if not given
##if [[ ${#CASAMS_STK[@]} -eq 0 ]]; then
##    CASAMS_STK=("")
##fi






















# 
# Loop each source
# 
echo "Looping sources, spwins, and stokes: "
for (( soui=0; soui<${#CASAMS_SOU[@]}; soui++ )); do
    echo "  * looping sources ($(bc<<<"$soui+1")/${#CASAMS_SOU[@]})"
    CASAMS_NOM=$(echo "${CASAMS_SOU[soui]}" | sed -e 's/ /-/g' | sed -e 's/\"//g')
    CASAMS_PFX="split_" # the prefix of vis data name
    CASAMS_SFX="" # the suffix of vis data name
    # 
    # Determine field for this source
    # 
    CASAMS_FID_DATA=(${CASAMS_FID_LIST[soui]})
    ##echo CASAMS_FID_LIST = "${CASAMS_FID_LIST[@]}"
    ##echo CASAMS_FID_DATA = "${CASAMS_FID_LIST[soui]}"
    ##echo CASAMS_FID_DATA = "${CASAMS_FID_DATA[@]}" / "${#CASAMS_FID_DATA[@]}" "($soui)"
    # 
    # Determine spw for this source
    # 
    CASAMS_SPW_DATA=(${CASAMS_SPW_LIST[soui]})
    # 
    # Determine width for this source
    # 
    CASAMS_WID_DATA=(${CASAMS_WID_LIST[soui]})
    # 
    # Determine stokes for this spw of this source
    # 
    CASAMS_STK_DATA=(${CASAMS_STK_LIST[soui]})
    # 
    # Determine skyfreq for this spw of this source
    # 
    CASAMS_FEQ_DATA=(${CASAMS_FEQ_LIST[soui]})
    # 
    # <TODO> examples
    #        casa-ms-split-pointing -vis c.ms \
    #                               -name "NGC253" -spw "1 3 5" -width "1 1 1" -stokes "RR RR RR" \
    #                               -name "NGC253" -spw "1 3 5" -width "1 1 1" -stokes "LL LL LL" 
    # 
    # 
    # 
    # Prepare to write python script: run_casa_ms_step1_split.py
    # 
    CASAMS_Script1="run_${CASAMS_NOM}_step1_split.py"
    CASAMS_Script2="run_${CASAMS_NOM}_step2_cvel.py"
    CASAMS_Script3="run_${CASAMS_NOM}_step3_exportuvfits.py"
    CASAMS_Script4="run_${CASAMS_NOM}_step4_clean.py"
    CASAMS_Script5="run_${CASAMS_NOM}_step5_uvmodelfit.py"
    CASAMS_Script6="run_${CASAMS_NOM}_step6_gildas_import_uvfits.map"
    echo "#!/bin/python" > "$CASAMS_Script1"
    echo "#!/bin/python" > "$CASAMS_Script2"
    echo "#!/bin/python" > "$CASAMS_Script3"
    echo "#!/bin/python" > "$CASAMS_Script4"
    echo "#!/bin/python" > "$CASAMS_Script5"
    echo "!/usr/bin/mapping" > "$CASAMS_Script6"
    # 
    # Loop each field
    # 
    for (( fieldi=0; fieldi<${#CASAMS_FID_DATA[@]}; fieldi++ )); do
        echo "    * looping fields ($(bc<<<"$fieldi+1")/${#CASAMS_FID_DATA[@]})"
        # loop field
        # for observations with multiple pointings, one source name can corresponds to several fields
        # normally, each field/pointing should have the same spw list <TODO>
        if [[ x"${CASAMS_FID_DATA[fieldi]}" == x"*" || x"${CASAMS_FID_DATA[fieldi]}" == x"" ]]; then
            CASAMS_SFX_STR1="${CASAMS_SFX}"
        else
            CASAMS_SFX_STR1="${CASAMS_SFX}_field$(echo ${CASAMS_FID_DATA[fieldi]} | sed -e 's/[,]/_/g')"
        fi
        # 
        # Loop each spw
        # 
        for (( spwi=0; spwi<${#CASAMS_SPW_DATA[@]}; spwi++ )); do
            echo "      * looping spwins ($(bc<<<"$spwi+1")/${#CASAMS_SPW_DATA[@]})"
            # loop spw
            # set output vis file suffix, which includes spw number
            # for example, 
            # input arguments are: -vis calibrated.ms -source AAAA BBBB -spw "1 2 3 4,5 6,7 8-10" ""
            # then we will loop two sources, 
            # for the first source AAA, we will loop spw (1 2 3 "4,5" "6,7" "8-10")
            # while for the second source BBB, we will loop sow (""), i.e. all spw in one data. 
            if [[ x"${CASAMS_SPW_DATA[spwi]}" == x"*" || x"${CASAMS_SPW_DATA[spwi]}" == x"" ]]; then
                CASAMS_SFX_STR2="${CASAMS_SFX_STR1}_spw_all"
            else
                CASAMS_SFX_STR2="${CASAMS_SFX_STR1}_spw$(echo ${CASAMS_SPW_DATA[spwi]} | sed -e 's/[,]/_/g')"
            fi
            # 
            # Determine width for this spw of this source
            # 
            if [[ $spwi -lt ${#CASAMS_WID_DATA[@]} ]]; then
                CASAMS_WID_NUMB=${CASAMS_WID_DATA[spwi]}
            else
                CASAMS_WID_NUMB=1
            fi
            # 
            # Determine stokes for this spw of this source
            # 
            if [[ $spwi -lt ${#CASAMS_STK_DATA[@]} ]]; then
                CASAMS_STK_NUMB=${CASAMS_STK_DATA[spwi]}
            else
                CASAMS_STK_NUMB=""
            fi
            # 
            # Determine skyfreq for this spw of this source
            # 
            if [[ $spwi -lt ${#CASAMS_FEQ_DATA[@]} ]]; then
                CASAMS_FEQ_NUMB=${CASAMS_FEQ_DATA[spwi]}
            else
                CASAMS_FEQ_NUMB=""
            fi
            # 
            # Set width
            # 
            if [[ ${CASAMS_WID_NUMB} -gt 1 ]]; then
                CASAMS_SFX_STR2="${CASAMS_SFX_STR2}_width${CASAMS_WID_NUMB}"
            fi
            # 
            # Set stokes
            # 
            if [[ x"${CASAMS_STK_NUMB}" == x"*" || x"${CASAMS_STK_NUMB}" == x"" ]]; then
                CASAMS_SFX_STR3="${CASAMS_SFX_STR2}"
            else
                CASAMS_SFX_STR3="${CASAMS_SFX_STR2}_stokes${CASAMS_STK_NUMB}"
            fi
            # 
            # 
            # 
                # 
                # Write python script: run_casa_ms_step1_split.py
                # 
                echo "vis         = '${CASAMS_VIS}${CASAMS_VIS_SFIX}'"                  >> "$CASAMS_Script1"
                echo "outputvis   = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.ms'"  >> "$CASAMS_Script1"
                echo "field       = '${CASAMS_FID_DATA[fieldi]}'"                       >> "$CASAMS_Script1"
                echo "spw         = '${CASAMS_SPW_DATA[spwi]}'"                         >> "$CASAMS_Script1"
                echo "width       =  ${CASAMS_WID_NUMB}"                                >> "$CASAMS_Script1"
                echo "correlation = '${CASAMS_STK_NUMB}'"                               >> "$CASAMS_Script1"
                echo "datacolumn  = '${CASAMS_TYP}'"                                    >> "$CASAMS_Script1"
                echo "keepflags   = F"                                                  >> "$CASAMS_Script1"
                echo "inp(split)"                                                       >> "$CASAMS_Script1"
                echo "split()"                                                          >> "$CASAMS_Script1"
                echo ""                                                                 >> "$CASAMS_Script1"
                echo ""                                                                 >> "$CASAMS_Script1"
                echo ""                                                                 >> "$CASAMS_Script1"
                # 
                # Write python script: run_casa_ms_step2_cvel.py
                # 
                if [[ x"${CASAMS_FEQ_NUMB}" != x"" ]]; then
                echo "vis         = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.ms''"      >> "$CASAMS_Script2"
                echo "outputvis   = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_cvel.ms'"  >> "$CASAMS_Script2"
                echo "field       = ''"                                                      >> "$CASAMS_Script2"
                echo "spw         = ''"                                                      >> "$CASAMS_Script2"
                echo "width       =  1"                                                      >> "$CASAMS_Script2"
                echo "outframe    = 'LSRK'"                                                  >> "$CASAMS_Script2"
                echo "restfreq    = '${CASAMS_FEQ_NUMB}GHz'"                                 >> "$CASAMS_Script2"
                echo "inp(cvel)"                                                             >> "$CASAMS_Script2"
                echo "cvel()"                                                                >> "$CASAMS_Script2"
                echo ""                                                                      >> "$CASAMS_Script2"
                echo ""                                                                      >> "$CASAMS_Script2"
                echo ""                                                                      >> "$CASAMS_Script2"
                fi
                # 
                # Write python script: run_casa_ms_step3_exportuvfits.py
                # 
                echo "vis         = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.ms'"           >> "$CASAMS_Script3"
                echo "fitsfile    = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvfits'"       >> "$CASAMS_Script3"
                echo "field       = ''"                                                          >> "$CASAMS_Script3"
                echo "spw         = ''"                                                          >> "$CASAMS_Script3"
                echo "datacolumn  = '${CASAMS_TYP}'"                                             >> "$CASAMS_Script3"
                echo "multisource = F"                                                           >> "$CASAMS_Script3"
                echo "inp(exportuvfits)"                                                         >> "$CASAMS_Script3"
                echo "exportuvfits()"                                                            >> "$CASAMS_Script3"
                echo ""                                                                          >> "$CASAMS_Script3"
                if [[ x"${CASAMS_FEQ_NUMB}" != x"" ]]; then
                echo "vis         = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_cvel.ms'"      >> "$CASAMS_Script3"
                echo "fitsfile    = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_cvel.uvfits'"  >> "$CASAMS_Script3"
                echo "field       = ''"                                                          >> "$CASAMS_Script3"
                echo "spw         = ''"                                                          >> "$CASAMS_Script3"
                echo "datacolumn  = '${CASAMS_TYP}'"                                             >> "$CASAMS_Script3"
                echo "multisource = F"                                                           >> "$CASAMS_Script3"
                echo "inp(exportuvfits)"                                                         >> "$CASAMS_Script3"
                echo "exportuvfits()"                                                            >> "$CASAMS_Script3"
                echo ""                                                                          >> "$CASAMS_Script3"
                fi
                echo ""                                                                          >> "$CASAMS_Script3"
                echo ""                                                                          >> "$CASAMS_Script3"
                # 
                # Write python script: run_casa_ms_step4_clean.py
                # 
                echo "vis         = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.ms'"           >> "$CASAMS_Script4"
                echo "imagename   = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_dirty'"        >> "$CASAMS_Script4"
                echo "field       = ''"                                                          >> "$CASAMS_Script4"
                echo "spw         = ''"                                                          >> "$CASAMS_Script4"
                echo "width       =  ${CASAMS_WID_NUMB}"                                         >> "$CASAMS_Script4"
                if [[ x"${CASAMS_FEQ_NUMB}" != x"" ]]; then
                echo "outframe    = 'LSRK'"                                                      >> "$CASAMS_Script4"
                echo "restfreq    = '${CASAMS_FEQ_NUMB}'GHz"                                     >> "$CASAMS_Script4"
                fi
                echo "niter       = 0"                                                           >> "$CASAMS_Script4" #<NOTE># set niter 0 so it do not do clean but just Fourier Transform.
                echo "imsize      = 1024"                                                        >> "$CASAMS_Script4" #<TODO># 
                echo "cell        = '0.1arcsec'"                                                 >> "$CASAMS_Script4" #<TODO># 
                echo "datacolumn  = '${CASAMS_TYP}'"                                             >> "$CASAMS_Script4"
                echo "multisource = F"                                                           >> "$CASAMS_Script4"
                echo "inp(clean)"                                                                >> "$CASAMS_Script4"
                echo "clean()"                                                                   >> "$CASAMS_Script4"
                echo ""                                                                          >> "$CASAMS_Script4"
                echo ""                                                                          >> "$CASAMS_Script4"
                echo ""                                                                          >> "$CASAMS_Script4"
                # 
                # Write python script: run_casa_ms_step5_uvmodelfit.py
                # 
                echo "vis         = '${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.ms'"                       >> "$CASAMS_Script5" #<TODO># uvmodelfit for docvel and nocvel have different results!
                echo "field       = ''"                                                                      >> "$CASAMS_Script5"
                echo "spw         = ''"                                                                      >> "$CASAMS_Script5"
                echo "niter       = 25"                                                                      >> "$CASAMS_Script5"
                echo "comptype    = 'G'"                                                                     >> "$CASAMS_Script5"
                echo "sourcepar   = [1e-3, 0.0, 0.0, 0.2, 1.0, 0.0] # flux, ra, dec, major, abratio, angle"  >> "$CASAMS_Script5"
                echo "varypar     = [   T,   T,   T,   T,   T,   T] # flux, ra, dec, major, abratio, angle"  >> "$CASAMS_Script5"
                echo "inp(uvmodelfit)"                                                                       >> "$CASAMS_Script5"
                echo "uvmodelfit()"                                                                          >> "$CASAMS_Script5"
                echo ""                                                                                      >> "$CASAMS_Script5"
                echo ""                                                                                      >> "$CASAMS_Script5"
                echo ""                                                                                      >> "$CASAMS_Script5"
                # 
                # TODO: check the uvfits header CRVAL4 and RESTFREQ
                # 
                # 
                # Write run_gildas_uvt_step6_importfits.py
                # 
                echo "\$gethead ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvfits CRVAL4 > ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvfits.header.CRVAL4"      >> "$CASAMS_Script6"
                echo "\$gethead ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvfits RESTFREQ > ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvfits.header.RESTFREQ"  >> "$CASAMS_Script6"
                echo "FITS ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvfits TO ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}.uvt /STYLE CASA"                      >> "$CASAMS_Script6"
                echo "let name ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}"                                                                                         >> "$CASAMS_Script6"
                echo "let size 15"                                                                                                                                   >> "$CASAMS_Script6"
                echo "let map_size 512"                                                                                                                              >> "$CASAMS_Script6"
                echo "let map_cell 0.2"                                                                                                                              >> "$CASAMS_Script6"
                echo "!go uvmap"                                                                                                                                     >> "$CASAMS_Script6"
                echo ""                                                                                                                                              >> "$CASAMS_Script6"
                if [[ x"${CASAMS_FEQ_NUMB}" != x"" ]]; then
                echo "FITS ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_cvel.uvfits TO ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_cvel.uvt /STYLE CASA"            >> "$CASAMS_Script6"
                echo "let name ${CASAMS_PFX}${CASAMS_NOM}${CASAMS_SFX_STR3}_cvel"                                                                                    >> "$CASAMS_Script6"
                echo "let size 15"                                                                                                                                   >> "$CASAMS_Script6"
                echo "let map_size 512"                                                                                                                              >> "$CASAMS_Script6"
                echo "let map_cell 0.2"                                                                                                                              >> "$CASAMS_Script6"
                echo "!go uvmap"                                                                                                                                     >> "$CASAMS_Script6"
                echo ""                                                                                                                                              >> "$CASAMS_Script6"
                fi
                echo ""                                                                                                                                              >> "$CASAMS_Script6"
                echo ""                                                                                                                                              >> "$CASAMS_Script6"
        done
    done
    echo "    * written to python script: $CASAMS_Script1                   PLEASE RUN: casa --nogui -c \"execfile('$CASAMS_Script1')\""
    echo "    * written to python script: $CASAMS_Script2                    PLEASE RUN: casa --nogui -c \"execfile('$CASAMS_Script2')\""
    echo "    * written to python script: $CASAMS_Script3            PLEASE RUN: casa --nogui -c \"execfile('$CASAMS_Script3')\""
    echo "    * written to python script: $CASAMS_Script4                   PLEASE RUN: casa --nogui -c \"execfile('$CASAMS_Script4')\""
    echo "    * written to python script: $CASAMS_Script5              PLEASE RUN: casa --nogui -c \"execfile('$CASAMS_Script5')\""
    echo "    * written to shell script:  $CASAMS_Script6   PLEASE RUN: echo \"@$CASAMS_Script6\" | mapping"
    
    echo "casa --nogui -c \"execfile('$CASAMS_Script1')\"" >  "run_casa_ms_script.bash"
    echo "casa --nogui -c \"execfile('$CASAMS_Script2')\"" >> "run_casa_ms_script.bash"
    echo "casa --nogui -c \"execfile('$CASAMS_Script3')\"" >> "run_casa_ms_script.bash"
    echo "casa --nogui -c \"execfile('$CASAMS_Script4')\"" >> "run_casa_ms_script.bash"
    echo "echo \"@$CASAMS_Script6\" | mapping"             >> "run_casa_ms_script.bash"
    echo "    * written to a global script: run_casa_ms_script.bash   (all the above commands are in it)"
    
    
    #<DEBUG>#exit
    
    
done














echo "Done!"
