#!/bin/bash
# 
# Input UV table file name
# Output uv averaged single channel uv data table
# 
# Last update:
#    2017-03-30 using "pdbi-uvt-core-arg-v5"
#    2018-02-12 using "pdbi-uvt-core-arg-v8"
# 
# 



# 
# Uage
# 
usage() {
    echo "Usage: "
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME -crange 1 50 55 90 [-out PdBIUVT_NAME-Averaged]"
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME -linefreq 89.098 -linewidth 450 [-out PdBIUVT_NAME-Averaged]"
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME -redshift 2.055 -linename \"CO(3-2)\" -linewidth 450 [-out PdBIUVT_NAME-Averaged]"
    echo ""
}



# 
# SOURCE pdbi-uvt-core-arg
# 
if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v8" ]]; then
    source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v8" "$@"
else
    echo ""
    echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v8\"!"
    echo ""
    exit 1
fi



# 
# Check input parameters -- uvt file name
# 
if [[ ${#PdBIUVT_NAME[@]} -eq 0 ]]; then
    usage; exit
fi



# 
# Loop input uv tables
# 
for (( tk=0; tk<${#PdBIUVT_NAME[@]}; tk++ )); do
    
    
    
    # 
    # SOURCE pdbi-uvt-core-cvf
    # 
    if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-cvf-v8" ]]; then
        source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-cvf-v8" "${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}"
    else
        echo ""
        echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-cvf-v8\"!"
        echo ""
        exit 1
    fi
    
    
    
    # 
    # Set default parameters -- crange
    # 
    if [[ ${#PdBIUVT_CMIN[@]} -le 0 && ${#PdBIUVT_CMAX[@]} -le 0 ]]; then
        PdBIUVT_CMIN=$PdBIUVT_CHAN_MIN
        PdBIUVT_CMAX=$PdBIUVT_CHAN_MAX
    fi
    
    
    
    # 
    # Check input parameters -- crange
    # 
    if [[ ${#PdBIUVT_CMIN[@]} -le 0 || ${#PdBIUVT_CMAX[@]} -le 0 ]]; then
        echo ""; echo "Error! Could not determine channel range for the input uv table \"${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}\"! Please check your input e.g. \"-crange 0 0\"!"; echo ""
        continue
    fi
    
    
    
    # 
    # Set default output file
    # 
    if [[ ${#PdBIUVT_SAVE[@]} -le $tk ]]; then
        PdBIUVT_SAVE+=($(basename "${PdBIUVT_NAME[tk]}")"-Averaged")
        echo ""; echo "Warning! Output name was not defined, we will set it as \"${PdBIUVT_SAVE[tk]}\"!"; echo ""
    fi
    if [[ x"${PdBIUVT_SAVE[tk]}" == x || x"${PdBIUVT_SAVE[tk]}" == x"tmp_pdbi_uvt" || x"${PdBIUVT_SAVE[tk]}" == x"tmp_pdbi_uvt_run_uv_fit" ]]; then
        PdBIUVT_SAVE[tk]=$(basename "${PdBIUVT_NAME[tk]}")"-Averaged"
        echo ""; echo "Warning! Output name was not defined, we will set it as \"${PdBIUVT_SAVE[tk]}\"!"; echo ""
    fi
    # 
    # Remove suffix
    # 
    if [[ x"${PdBIUVT_SAVE[tk]}" == x*".uvt" ]]; then
        PdBIUVT_SAVE[tk]=$(echo "${PdBIUVT_SAVE[tk]}" | sed -e 's/\.uvt$//g')
    fi
    if [[ x"${PdBIUVT_SAVE[tk]}" == x*".UVT" ]]; then
        PdBIUVT_SAVE[tk]=$(echo "${PdBIUVT_SAVE[tk]}" | sed -e 's/\.UVT$//g')
    fi
    # 
    # Backup existing output file
    # 
    if [[ -f "${PdBIUVT_SAVE[tk]}.uvt" ]]; then
        if [[ -f "${PdBIUVT_SAVE[tk]}.uvt.backup" ]]; then
            \rm "${PdBIUVT_SAVE[tk]}.uvt.backup"
        fi
        echo "Warning! Found existing \"${PdBIUVT_SAVE[tk]}.uvt\"! Backup as \"${PdBIUVT_SAVE[tk]}.uvt.backup\"!"
        mv "${PdBIUVT_SAVE[tk]}.uvt" "${PdBIUVT_SAVE[tk]}.uvt.backup"
    fi
    
    
    
    # 
    # Deal with the input uv data file
    # 
    # Prepare CRANGE list
    # 
    if [[ ${PdBIUVT_CMIN[0]} -gt 0 && ${PdBIUVT_CMAX[0]} -gt 0 ]]; then
        PdBIUVT_CAGE="${PdBIUVT_CMIN[0]} ${PdBIUVT_CMAX[0]}"
    else
        PdBIUVT_CAGE="$PdBIUVT_CHAN_MIN $PdBIUVT_CHAN_MAX"
    fi
    for (( i=1; i<${#PdBIUVT_CMIN[@]}; i++ )); do
        if [[ ${PdBIUVT_CMIN[i]} -gt 0 && ${PdBIUVT_CMAX[i]} -gt 0 ]]; then
            PdBIUVT_CAGE="$PdBIUVT_CAGE ${PdBIUVT_CMIN[i]} ${PdBIUVT_CMAX[i]}"
        fi
    done
    echo ""
    echo "CRANGE: $PdBIUVT_CAGE"
    echo ""
    # 
    # prepare gildas/mapping init and script and run
    # 
    PdBIUVT_TEMP_INIT="${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}.uv_average.init"
    PdBIUVT_TEMP_EXEC="${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}.uv_average.map"
    PdBIUVT_TEMP_LOGT="${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}.uv_average.log"
    echo  '! '                                                                                          >  $PdBIUVT_TEMP_INIT
    echo  '! Task UV_AVERAGE'                                                                           >> $PdBIUVT_TEMP_INIT
    echo  '!'                                                                                           >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Input UV table"    UV_INPUT$  "'"${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}"'"' >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Output UV table"  UV_OUTPUT$  "'"${PdBIUVT_SAVE[tk]}.uvt"'"'                 >> $PdBIUVT_TEMP_INIT
    echo  'TASK\VALUES    "Channel range"       RANGES$   '"$PdBIUVT_CAGE"                              >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Type of range"        CTYPE$  "'"CHANNEL"'"'                                 >> $PdBIUVT_TEMP_INIT
    echo  'TASK\GO'                                                                                     >> $PdBIUVT_TEMP_INIT
    echo  "run uv_average $PdBIUVT_TEMP_INIT /NOWINDOW" > $PdBIUVT_TEMP_EXEC
    echo  "@$PdBIUVT_TEMP_EXEC | mapping > $PdBIUVT_TEMP_LOGT"
    echo  "@$PdBIUVT_TEMP_EXEC" | mapping > "$PdBIUVT_TEMP_LOGT"
    # 
    if [[ -f "${PdBIUVT_SAVE[tk]}.uvt" ]]; then
        echo "Successufully saved to \"${PdBIUVT_SAVE[tk]}.uvt\"!"
        echo "--"
        if [[ $PdBIUVT_UVMERGE_KEEP_FILE -le 0 ]]; then
            if [[ -f "$PdBIUVT_TEMP_EXEC" ]]; then
                rm "$PdBIUVT_TEMP_EXEC"
            fi
            if [[ -f "$PdBIUVT_TEMP_INIT" ]]; then
                rm "$PdBIUVT_TEMP_INIT"
            fi
            if [[ -f "$PdBIUVT_TEMP_LOGT" ]]; then
                rm "$PdBIUVT_TEMP_LOGT"
            fi
        fi
    else
        echo "Error! Failed to run GILDAS MAPPING UV_SUBTRACT and output \"${PdBIUVT_SAVE[tk]}.uvt\"!"
        echo "Please check \"$PdBIUVT_TEMP_LOGT\"!"
        exit 1
    fi
    
    
done















