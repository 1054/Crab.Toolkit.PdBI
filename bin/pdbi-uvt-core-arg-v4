#!/bin/bash
# 
# Aim:
#     Process command line arguments for pdbi-uvt-go-*
# 
# Usage:
#    source this script in other scripts to get the variables
# 
# Updates:
#     2017-03-21 Use "return" instead of "exit".
#     2017-03-29 Add "-add-offset" argument.
# 



# 
# LANG
# 
LANG=C

# 
# CHECK bc
# 
if [[ $(bc <<< 1+2 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool bc not found! Exit!
    return 1
fi

# 
# CHECK awk
# 
if [[ $(echo "Go" | awk "NR==1" 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool awk not found! Exit!
    return 1
fi

# 
# CHECK GILDAS mapping
# 
if [[ $(echo "say hello" | mapping 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! GILDAS mapping not found! Exit!"
    return 1
fi

# 
# CHECK radec2degree
# 
if [[ $(radec2degree 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! radec2degree not found! It should be included in this software! Please contact dzliu. "
    return 1
fi

# 
# CHECK degree2radec
# 
if [[ $(degree2radec 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! degree2radec not found! It should be included in this software! Please contact dzliu. "
    return 1
fi



# 
# Prepare variables
# 
# ----------------------- # files
PdBIUVT_NAME=""
PdBIUVT_TYPE=""           # the input file name extension, uvt, uvfits, lmv, etc.
PdBIUVT_RESI=""           # the output residual uvtable after subtraction
PdBIUVT_SAVE=""           # the output save files base name
PdBIUVT_OVERWRITE="NO"    # 
# ----------------------- # uvmap parameters
PdBIUVT_MAP_SIZE=()
PdBIUVT_MAP_CELL=()
# ----------------------- # fitting parameters
PdBIUVT_OBJ_NUMB=0        # Number of objects to fit, according to the input RA Dec
PdBIUVT_OBJ_NAME=()       # 
PdBIUVT_OBJ_POS=()        # RA Dec in degrees, 2*N dimension, where N is the number of objects to fit. 
PdBIUVT_OBJ_SIZE=()       # Major and minor axis FWHM size in arcsec, 2*N dimension, where N is the number of objects to fit. 
PdBIUVT_OBJ_ANGLE=()      # Position angle in degree
PdBIUVT_OBJ_VARY_POS=()   # 1 to vary, 0 to be fixed. 
PdBIUVT_OBJ_VARY_SIZE=()  # 1 to vary, 0 to be fixed. 
PdBIUVT_OBJ_VARY_ANGLE=() # 1 to vary, 0 to be fixed. 
PdBIUVT_OBJ_FUNC=()           # "POINT"
PdBIUVT_RSUB="NO"         # whether subtract the fit component or not (if we set PdBIUVT_RESI, then PdBIUVT_RSUB="YES")
# ----------------------- # spectrum info
PdBIUVT_VMIN=()
PdBIUVT_VMAX=()
PdBIUVT_VWID=()           # 
PdBIUVT_VCEN=()           # 
PdBIUVT_CMIN=()
PdBIUVT_CMAX=()
PdBIUVT_CWID=()           # 
PdBIUVT_CCEN=()           # 
PdBIUVT_FMIN=()
PdBIUVT_FMAX=()
PdBIUVT_FWID=()           # 
PdBIUVT_FCEN=()           # obs-frame line frequency
PdBIUVT_zRED=()           # 
PdBIUVT_FLAB=()           # laboratory rest-frame line frequency
PdBIUVT_LINE_NAME=()      # 
PdBIUVT_LINE_FREQ=()      # obs freq (obsolete)
PdBIUVT_REST_FREQ=()      # rest freq (obsolete)
PdBIUVT_CHAN_MIN=0        # 
PdBIUVT_CHAN_MAX=0        # 
PdBIUVT_CHAN_CEN=0        # 
PdBIUVT_CHAN_REF=""
PdBIUVT_VELO_BIN=""
PdBIUVT_FREQ_BIN=""
PdBIUVT_VELO_REF=""
PdBIUVT_FREQ_REF=""
# ------------------------# pointing info
PdBIUVT_RANX_OBJT=()      # "09:59:38.101"
PdBIUVT_DECX_OBJT=()      # "02:28:57.108"
PdBIUVT_RAND_OBJT=()      # "150.000"
PdBIUVT_DECD_OBJT=()      # "30.0000"
PdBIUVT_RANX_CENT=""      # "09:59:38.101"
PdBIUVT_DECX_CENT=""      # "02:28:57.108"
PdBIUVT_RAND_CENT=""      # "150.000"
PdBIUVT_DECD_CENT=""      # "30.0000"
PdBIUVT_ADD_OFF_X=()      # the offset added to the input radec or offset
PdBIUVT_ADD_OFF_Y=()      # the offset added to the input radec or offset
# ------------------------# uv taper
PdBIUVT_UVRANGE_MIN="0"
PdBIUVT_UVRANGE_MAX="36000"
# ------------------------# program control
PdBIUVT_PARALLELS=0



# 
# Read command line arguments
# 
PdBIUVT_GOOD=1
PdBIUVT_TSTR=""
PdBIUVT_RPAR="none"
while [[ "$#" -gt 0 ]]; do
    
    PdBIUVT_TSTR=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    
    case "$PdBIUVT_TSTR" in
      
              "-name") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_NAME="$1";;
             "-input") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_NAME="$1";;
               "-uvt") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_NAME="$1";;

              "-type") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_TYPE="$1";;

               "-res") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_RESI="$1";;
          "-residual") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_RESI="$1";;

               "-out") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_SAVE="$1";;
            "-output") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_SAVE="$1";;
              "-save") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="none"; PdBIUVT_SAVE="$1";;

         "-overwrite") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OVERWRITE="YES";; # argument with no value, no shift;

          "-map_size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="map_size";;
          "-map-size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="map_size";;
          "-map_cell") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="map_cell";;
          "-map-cell") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="map_cell";;

          "-pointing") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="pointing";;
      "-phase-center") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="pointing";;

           "-uvrange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="uvrange";; # meter

            "-crange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="crange";; # channel range pairs
            "-vrange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="vrange";; # km/s
            "-frange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="frange";; # GHz
          "-redshift") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="redshift";;

             "-radec") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="radec";;  # object coordinate pairs

            "-offset") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="offset";;  # object offset pairs
               "-off") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="offset";;
            
           "-add-off") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="additional-offset";; # object additional offset pairs
        "-add-offset") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="additional-offset";; # object additional offset pairs

             "-point") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_FUNC+=("POINT");;
             "-gauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_FUNC+=("E_GAUSS");;
            "-egauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_FUNC+=("E_GAUSS");;
            "-cgauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_FUNC+=("C_GAUSS");;
           "-e_gauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_FUNC+=("E_GAUSS");;
           "-c_gauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_FUNC+=("C_GAUSS");;

               "-obj") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_NAME";;
           "-objname") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_NAME";;
          "-obj-name") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_NAME";;
            "-object") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_NAME";;
            "-source") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_NAME";;
            "-target") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_NAME";;

              "-size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_SIZE";;
          "-obj-size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_SIZE";;

             "-angle") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_ANGLE";;
          "-posangle") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_ANGLE";;
         "-obj-angle") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_ANGLE";;
      "-obj-posangle") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="OBJ_ANGLE";;
  
              "-vary") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_POS+=(1);; # does not accept input value
           "-varypos") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_POS+=(1);;
      "-varyposition") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_POS+=(1);;

               "-fix") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_POS+=(0);; # does not accept input value
            "-fixpos") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_POS+=(0);;
       "-fixposition") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_POS+=(0);;

          "-varysize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_SIZE+=(1);;
       "-varyobjsize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_SIZE+=(1);;
    "-varysourcesize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_SIZE+=(1);;

           "-fixsize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_SIZE+=(0);;
        "-fixobjsize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_SIZE+=(0);;
     "-fixsourcesize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_SIZE+=(0);;

         "-varyangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(1);;
      "-varyposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(1);;
   "-varyobjposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(1);;
"-varysourceposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(1);;

          "-fixangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(0);;
       "-fixposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(0);;
    "-fixobjposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(0);;
 "-fixsourceposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_OBJ_VARY_ANGLE+=(0);;

          "-subtract") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_RSUB="YES";;

         "-linewidth") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="linewidth";; # km/s
          "-linefreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="lineobsfreq";; # GHz
       "-lineobsfreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="lineobsfreq";; # GHz
          "-restfreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="linerestfreq";;
      "-linerestfreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="linerestfreq";;
          "-linename") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="linename";;

      "-simultaneous") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_PARALLELS=1;; #<TODO># allow simultaneous uv_fit to run
          "-parallel") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR="none"; PdBIUVT_PARALLELS=1;; #<TODO># allow simultaneous uv_fit to run

    esac
    
    if [[ "$PdBIUVT_RPAR" == "map_size" ]];  then 
        if [[ "$#" -lt 1 ]]; then
            break
        fi
        if echo "$1" | grep -q -v -E "^[0-9.+- ]*$"; then
            echo ""; echo "Error! Input -map_size has a wrong format! Please input only number value."; echo ""
            return 2
        fi
        PdBIUVT_MAP_SIZE+=("$1")
    fi
    
    if [[ "$PdBIUVT_RPAR" == "map_cell" ]];  then 
        if [[ "$#" -lt 1 ]]; then
            break
        fi
        if echo "$1" | grep -q -v -E "^[0-9.+- ]*$"; then
            echo ""; echo "Error! Input -map_cell has a wrong format! Please input only number value."; echo ""
            return 2
        fi
        PdBIUVT_MAP_CELL+=("$1")
    fi
    
    if [[ "$PdBIUVT_RPAR" == "pointing" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if [[ "$1" == *":"*":"* ]]; then
            PdBIUVT_RANX_CENT="$1"
            PdBIUVT_RAND_CENT=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
        else
            PdBIUVT_RAND_CENT="$1"
            PdBIUVT_RANX_CENT=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
        fi
        if [[ "$2" == *":"*":"* ]]; then
            PdBIUVT_DECX_CENT="$2"
            PdBIUVT_DECD_CENT=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
        else
            PdBIUVT_DECD_CENT="$2"
            PdBIUVT_DECX_CENT=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
        fi
        shift # shift because we read a pair of values
        PdBIUVT_RPAR="none" # set to none because for telescope pointing we only read one pair of values
    fi
    
    if [[ "$PdBIUVT_RPAR" == "crange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        PdBIUVT_CMIN+=("$1")
        PdBIUVT_CMAX+=("$2")
        shift # shift because we read a pair of values
    fi
    
    if [[ "$PdBIUVT_RPAR" == "vrange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        PdBIUVT_VMIN+=("$1")
        PdBIUVT_VMAX+=("$2")
        shift # shift because we read a pair of values
    fi
    
    if [[ "$PdBIUVT_RPAR" == "frange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if echo "$1" | grep -Eq '^[-+]?[0-9]+\.?[0-9]*$'; then
            PdBIUVT_FMIN+=("$1")
        else
            echo "Error! Input frequency range value \"$1\" is not a float number! Exit!"
            return 2
        fi
        if echo "$2" | grep -Eq '^[-+]?[0-9]+\.?[0-9]*$'; then
            PdBIUVT_FMAX+=("$2")
        else
            echo "Error! Input frequency range value \"$2\" is not a float number! Exit!"
            return 2
        fi
        shift # shift because we read a pair of values
    fi
    
    if [[ "$PdBIUVT_RPAR" == "uvrange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if echo "$1" | grep -Eq '^[-+]?[0-9]+\.?[0-9]*$'; then
            PdBIUVT_UVRANGE_MIN="$1"
        else
            echo "Error! Input UV range value \"$1\" is not a float number! Exit!"
            return 2
        fi
        if echo "$2" | grep -Eq '^[-+]?[0-9]+\.?[0-9]*$'; then
            PdBIUVT_UVRANGE_MAX="$2"
        else
            echo "Error! Input UV range value \"$2\" is not a float number! Exit!"
            return 2
        fi
        shift # shift because we read a pair of values
        PdBIUVT_RPAR="none" # set to none because for telescope pointing we only read one pair of values
    fi
    
    if [[ "$PdBIUVT_RPAR" == "redshift" ]];  then 
        if [[ "$#" -lt 1 ]]; then
            break
        fi
        if echo "$1" | grep -q -v -E "^[0-9.+-]*$"; then
            echo ""; echo "Error! Input -redshift has a wrong format! Please input only number value of the source redshift."; echo ""
            return 2
        fi
        PdBIUVT_zRED+=("$1")
    fi
    
    # 
    # object-oriented below
    # 
    # -- radec
    if [[ "$PdBIUVT_RPAR" == "radec" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        # filling in default values for previous objects
        while [[ ${#PdBIUVT_OBJ_NAME[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_NAME+=("obj_$((${#PdBIUVT_OBJ_NAME[@]}+1))")
        done
        while [[ ${#PdBIUVT_OBJ_FUNC[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_FUNC+=("POINT")
        done
        while [[ ${#PdBIUVT_OBJ_SIZE[@]} -lt $((2*$PdBIUVT_OBJ_NUMB)) ]]; do 
            PdBIUVT_OBJ_SIZE+=("0.0")
        done
        while [[ ${#PdBIUVT_OBJ_ANGLE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_ANGLE+=("0.0")
        done
        while [[ ${#PdBIUVT_OBJ_VARY_POS[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_POS+=(0)
        done
        while [[ ${#PdBIUVT_OBJ_VARY_SIZE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_SIZE+=(1) # in default we vary size
        done
        while [[ ${#PdBIUVT_OBJ_VARY_ANGLE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_ANGLE+=(1) # in default we vary angle
        done
        
        if [[ "$1" == *":"*":"* ]]; then
            PdBIUVT_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
            PdBIUVT_RANX_OBJT+=("$1")
            PdBIUVT_RAND_OBJT+=("$PdBIUVT_TEMP")
        else
            PdBIUVT_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
            PdBIUVT_RAND_OBJT+=("$1")
            PdBIUVT_RANX_OBJT+=("$PdBIUVT_TEMP")
        fi
        if [[ "$2" == *":"*":"* ]]; then
            PdBIUVT_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
            PdBIUVT_DECX_OBJT+=("$2")
            PdBIUVT_DECD_OBJT+=("$PdBIUVT_TEMP")
        else
            PdBIUVT_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
            PdBIUVT_DECD_OBJT+=("$2")
            PdBIUVT_DECX_OBJT+=("$PdBIUVT_TEMP")
        fi
        shift # shift because we read a pair of values, another shift will be done at the end of current loop
        
        PdBIUVT_OBJ_POS+=("" "")
        PdBIUVT_OBJ_NUMB=$(bc <<< "$PdBIUVT_OBJ_NUMB+1")
    fi
    # -- obj offset
    if [[ "$PdBIUVT_RPAR" == "offset" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        # filling in default values for previous objects
        while [[ ${#PdBIUVT_OBJ_NAME[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_NAME+=("obj_$((${#PdBIUVT_OBJ_NAME[@]}+1))")
        done
        while [[ ${#PdBIUVT_OBJ_FUNC[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_FUNC+=("POINT")
        done
        while [[ ${#PdBIUVT_OBJ_SIZE[@]} -lt $((2*$PdBIUVT_OBJ_NUMB)) ]]; do 
            PdBIUVT_OBJ_SIZE+=("0.0")
        done
        while [[ ${#PdBIUVT_OBJ_ANGLE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_ANGLE+=("0.0")
        done
        while [[ ${#PdBIUVT_OBJ_VARY_POS[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_POS+=(0)
        done
        while [[ ${#PdBIUVT_OBJ_VARY_SIZE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_SIZE+=(1) # in default we vary size
        done
        while [[ ${#PdBIUVT_OBJ_VARY_ANGLE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_ANGLE+=(1) # in default we vary angle
        done
        
        PdBIUVT_OBJ_POS+=("$1" "$2")
        shift # shift because we read a pair of values, another shift will be done at the end of current loop
        
        PdBIUVT_RANX_OBJT+=("")
        PdBIUVT_DECX_OBJT+=("")
        PdBIUVT_RAND_OBJT+=("")
        PdBIUVT_DECD_OBJT+=("")
        PdBIUVT_OBJ_NUMB=$(bc <<< "$PdBIUVT_OBJ_NUMB+1")
    fi
    # -- obj additional-offset
    if [[ "$PdBIUVT_RPAR" == "additional-offset" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        # add additional offset to the last PdBIUVT_OBJ_POS or PdBIUVT_RAND_OBJT,PdBIUVT_DECD_OBJT
        if [[ ! -z "${PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+0]}" && ! -z "${PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+1]}" ]]; then
            #<DEBUG>#echo "****"
            #<DEBUG>#echo ${PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+0]}"+($1)"
            PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+0]=$(awk "BEGIN {print (${PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+0]})+($1);}")
            PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+1]=$(awk "BEGIN {print (${PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+1]})+($2);}")
            #<DEBUG>#echo ${PdBIUVT_OBJ_POS[2*(PdBIUVT_OBJ_NUMB-1)+0]}
            #<DEBUG>#echo "****"
        elif [[ ! -z "${PdBIUVT_RAND_OBJT[PdBIUVT_OBJ_NUMB-1]}" && ! -z "${PdBIUVT_DECD_OBJT[PdBIUVT_OBJ_NUMB-1]}" ]]; then
            PdBIUVT_RAND_OBJT[PdBIUVT_OBJ_NUMB-1]=$(awk "BEGIN {pi=atan2(0,-1); printf \"%0.10f\n\", (${PdBIUVT_RAND_OBJT[PdBIUVT_OBJ_NUMB-1]})+(($1)/3600.0)/cos(${PdBIUVT_DECD_OBJT[PdBIUVT_OBJ_NUMB-1]}/180*pi);}")
            PdBIUVT_DECD_OBJT[PdBIUVT_OBJ_NUMB-1]=$(awk "BEGIN {pi=atan2(0,-1); printf \"%0.10f\n\", (${PdBIUVT_DECD_OBJT[PdBIUVT_OBJ_NUMB-1]})+(($2)/3600.0);}")
            PdBIUVT_TEMP=($(degree2radec "${PdBIUVT_RAND_OBJT[PdBIUVT_OBJ_NUMB-1]}" "${PdBIUVT_DECD_OBJT[PdBIUVT_OBJ_NUMB-1]}" | cut -d ' ' -f 1,2))
            #<DEBUG>#echo "****"
            #<DEBUG>#echo ${PdBIUVT_TEMP[@]}
            #<DEBUG>#echo "****"
            PdBIUVT_RANX_OBJT[PdBIUVT_OBJ_NUMB-1]=${PdBIUVT_TEMP[0]}
            PdBIUVT_DECX_OBJT[PdBIUVT_OBJ_NUMB-1]=${PdBIUVT_TEMP[1]}
        fi
        shift
    fi
    # -- obj name
    if [[ "$PdBIUVT_RPAR" == "OBJ_NAME" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        PdBIUVT_OBJ_NAME+=("$1")
    fi
    # -- obj size
    if [[ "$PdBIUVT_RPAR" == "OBJ_SIZE" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        if echo "$1" | grep -q -v -E '^[0-9 ".+-]*$'; then # objsize allows input a pair of number, for major and minor axis size. 
            echo ""; echo "Error! Input -objsize $1 has a wrong format! Please input only number value of the object size."; echo ""
            return 2
        fi
        PdBIUVT_OBJ_SIZE+=($(echo "$1"))
        PdBIUVT_SIZE+=($(echo "$1")) # for compatible purpose, or for go uvmap
    fi
    # -- obj angle
    if [[ "$PdBIUVT_RPAR" == "OBJ_ANGLE" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        if echo "$1" | grep -q -v -E "^[0-9.+-]*$"; then
            echo ""; echo "Error! Input -objposangle has a wrong format! Please input only number value of the object pos angle."; echo ""
            return 2
        fi
        PdBIUVT_OBJ_ANGLE+=("$1")
    fi
    
    
    if [[ "$PdBIUVT_RPAR" == "linewidth" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        if echo "$1" | grep -q -v -E "^[0-9.+-]*$"; then
            echo ""; echo "Error! Input -linewidth has a wrong format! Please input only number value of the expected observing line width in unit of km/s."; echo ""
            return 2
        fi
        PdBIUVT_VWID+=("$1")
    fi
    if [[ "$PdBIUVT_RPAR" == "lineobsfreq" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        if echo "$1" | grep -q -v -E "^[0-9.+-]*$"; then
            echo ""; echo "Error! Input -lineobsfreq has a wrong format! Please input only number value of the expected line observing frequency in unit of GHz."; echo ""
            return 2
        fi
        PdBIUVT_FCEN+=("$1")
    fi
    if [[ "$PdBIUVT_RPAR" == "linerestfreq" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        if echo "$1" | grep -q -v -E "^[0-9.+-]*$"; then
            echo ""; echo "Error! Input -linerestfreq has a wrong format! Please input only number value of the expected line observing frequency in unit of GHz."; echo ""
            return 2
        fi
        PdBIUVT_FLAB+=("$1")
    fi
    if [[ "$PdBIUVT_RPAR" == "linename" ]];  then 
        if [[ "$#" -lt 1 ]]; then break; fi
        PdBIUVT_LINE_NAME+=("$1")
    fi
    
    shift
    
done



# 
# Done input arguments
# 



# 
# Check input uv table name
# 
if [[ x"$PdBIUVT_NAME" == x ]]; then
    echo ""; echo "Error! UV table name was not given! Exit!"; echo ""
    PdBIUVT_GOOD=0
    return 3
else
    # Remove the suffix of the input uvtable name, and test whether the file exists
    if [[ "$PdBIUVT_NAME" == *".uvt" ]]; then
        PdBIUVT_TYPE="uvt"
        PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]uvt$//g')
    elif [[ "$PdBIUVT_NAME" == *".UVT" ]]; then
        PdBIUVT_TYPE="UVT"
        PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]UVT$//g')
    elif [[ "$PdBIUVT_NAME" == *".fits" ]]; then
        PdBIUVT_TYPE="fits"
        PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]fits$//g')
    elif [[ "$PdBIUVT_NAME" == *".FITS" ]]; then
        PdBIUVT_TYPE="FITS"
        PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]FITS$//g')
    elif [[ "$PdBIUVT_NAME" == *".uvfits" ]]; then
        PdBIUVT_TYPE="uvfits"
        PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]uvfits$//g')
    elif [[ "$PdBIUVT_NAME" == *".UVFITS" ]]; then
        PdBIUVT_TYPE="UVFITS"
        PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]UVFITS$//g')
    else
        PdBIUVT_TYPE="uvt"
    fi
    # test whether the file exists
    if [[ ! -f "$PdBIUVT_NAME.$PdBIUVT_TYPE" ]]; then
        echo ""; echo "Error! \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" was not found! Exit!"; echo ""
        PdBIUVT_GOOD=0
        return 3
    fi
fi



# 
# Check input parameters -- if not passed then print usage and exit
# 
if [[ $PdBIUVT_GOOD -eq 0 ]]; then
    echo ""; echo "Error! Input arguments are incorrect! Please have a check and try again! Exit!"; echo ""
    return 3
fi



# 
# Running GILDAS mapping to get uvtable header
# 
if [[ x"$PdBIUVT_TYPE" == x"uvt" || x"$PdBIUVT_TYPE" == x"UVT" ]]; then
    if [[ ! -f "$PdBIUVT_NAME.$PdBIUVT_TYPE" ]]; then 
        echo ""; echo "Error! \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" was not found!"; echo ""
        return 3
    else
        echo "header $PdBIUVT_NAME.$PdBIUVT_TYPE" | mapping -nw -nl | sed 's/[^[:print:]]//g' > "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt"
    fi
    if [[ ! -f "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" ]]; then
        echo ""; echo "Error! Failed to run \"echo \"header $PdBIUVT_NAME.$PdBIUVT_TYPE\" | mapping\" > \"$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt\"! Please make sure mapping is working!"; echo ""
        return 3
    fi
fi



# 
# Get Spectrum information from input uvt header
# 
if [[ x"$PdBIUVT_TYPE" == x"uvt" || x"$PdBIUVT_TYPE" == x"UVT" ]]; then
    # 
    # get line name and rest frequency <Corrected><20150217><DADDI><DZLIU> the rest frequency is not reference frequency
    # 
    if [[ ${#PdBIUVT_LINE_NAME[@]} -eq 0 ]]; then
        PdBIUVT_LINE_NAME=($(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Line Name.* Rest Frequency' | perl -p -e 's/.*Line Name[ ]*(.*)[ ]*Rest Frequency[ ]*(.*)[ ]*$/\1/g' | sed -e 's/^ *$//g'))
    fi
    if [[ x"$PdBIUVT_LINE_FREQ" == x ]]; then
        PdBIUVT_LINE_FREQ=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Line Name.* Rest Frequency' | perl -p -e 's/.*Line Name[ ]*(.*)[ ]*Rest Frequency[ ]*(.*)[ ]*$/\2/g' | sed -e 's/^ *$//g')
        if [[ x"$PdBIUVT_LINE_FREQ" != x ]]; then
            PdBIUVT_LINE_FREQ=$(echo "$PdBIUVT_LINE_FREQ/1000.0" | bc -l) # conver from MHz to GHz
        fi
    fi
    
    # 
    # get velocity resolution (and frequency resolution)
    # 
    PdBIUVT_VELO_BIN=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Resolution in Velocity.* in Frequency' | perl -p -e 's/.*Resolution in Velocity[ ]*(.*)[ ]*in Frequency[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g')
    PdBIUVT_FREQ_BIN=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Resolution in Velocity.* in Frequency' | perl -p -e 's/.*Resolution in Velocity[ ]*(.*)[ ]*in Frequency[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g')
    
    # 
    # get velocity offset
    # 
    PdBIUVT_VELO_REF=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Offset in Velocity.* Doppler' | perl -p -e 's/.*Offset in Velocity[ ]*(.*)[ ]*Doppler[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g')
    
    # 
    # get channel min max and center
    # 
    PdBIUVT_CHAN_MIN=1
    PdBIUVT_CHAN_MAX=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'UV Data * Channels:.*, Stokes:.*Visibilities:' | perl -p -e 's/.*UV Data[ ]* Channels:[ ]*(.*)[ ]*, Stokes:[ ]*(.*)[ ]*Visibilities:[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g')
    PdBIUVT_CHAN_CEN=$(echo "$PdBIUVT_CHAN_MAX/2+1" | bc) # for example 100 channels, the central channel is 51 in gildas, starting from 1.
    
    # 
    # get reference channel freq (and frequency resolution)
    # 
    PdBIUVT_TEMP_TEXT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep -A 1 'Size *Reference Pixel *Value *Increment' | tail -n 1) # get the line after 'Size *Reference Pixel *Value *Increment' line
    PdBIUVT_TEMP_TEXT=$(echo "$PdBIUVT_TEMP_TEXT" | sed -e 's/^ *//g' | tr -s ' ') # clean string
    PdBIUVT_CHAN_REF=$(echo "$PdBIUVT_TEMP_TEXT" | cut -d ' ' -f 2)
    PdBIUVT_FREQ_REF=$(echo "$PdBIUVT_TEMP_TEXT" | cut -d ' ' -f 3)
    PdBIUVT_FREQ_BIN=$(echo "$PdBIUVT_TEMP_TEXT" | cut -d ' ' -f 4)
fi



# 
# Get Pointing information from input uvt header
# 
if [[ x"$PdBIUVT_TYPE" == x"uvt" || x"$PdBIUVT_TYPE" == x"UVT" ]]; then
    # 
    # read the pointing center of telescope i.e. center RA Dec of FoV , from uv table using gildas/mapping
    # 
    if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
        echo "! "                                                                     >  "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "! GILDAS mapping script"                                                >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "! "                                                                     >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "define header hdr \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" read"                 >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "if ((hdr%a0.NE.0).AND.(hdr%d0.NE.0)) then "                             >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "    sic output \"$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.txt\""            >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "    say 'hdr%a0/pi*180' \" \" 'hdr%d0/pi*180' /format F0.12 A1 F0.12"   >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "    sic output"                                                         >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "else if ((hdr%ra.NE.0).AND.(hdr%dec.NE.0)) then "                       >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "    sic output \"$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.txt\""            >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "    say 'hdr%ra/pi*180' \" \" 'hdr%dec/pi*180' /format F0.12 A1 F0.12"  >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "    sic output"                                                         >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "endif"                                                                  >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "delete /var hdr"                                                        >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo ""                                                                       >> "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map"
        echo "@$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map" | mapping -nw -nl > "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.log"
        if [[ -f "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.txt" ]]; then
            PdBIUVT_TEMP_TEXT=($(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.txt" | sed -e 's/^ *//g' | grep -v "^#" | head -n 1))
            PdBIUVT_RAND_CENT=${PdBIUVT_TEMP_TEXT[0]}
            PdBIUVT_DECD_CENT=${PdBIUVT_TEMP_TEXT[1]}
        else
            echo "Error! Failed to run GILDAS/MAPPING and get pointing information from the input uv table \"$PdBIUVT_NAME.$PdBIUVT_TYPE\"!"
            echo "Please have a check on \"$PdBIUVT_NAME.$PdBIUVT_TYPE.pointing.map\"!"
            exit 1
        fi
    fi
    ## 
    ## read the pointing center of telescope i.e. center RA Dec of FoV , from 'Right Ascension.*Declination'
    ## 
    #if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    #    PdBIUVT_RANX_CENT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Right Ascension.*Declination' | perl -p -e 's/.*Right Ascension[ ]*(.*)[ ]*Declination[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g' | grep -v "00:00:00.000")
    #    PdBIUVT_DECX_CENT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Right Ascension.*Declination' | perl -p -e 's/.*Right Ascension[ ]*(.*)[ ]*Declination[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g' | grep -v "00:00:00.00")
    #fi
    ## 
    ## read the pointing center of telescope i.e. center RA Dec of FoV , from 'Axis 0 *A0.*Axis 0 *D0' if nothing in 'Right Ascension.*Declination'
    ## 
    #if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    #    PdBIUVT_RANX_CENT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g' | grep ":" |  grep -v "00:00:00.000")
    #    PdBIUVT_DECX_CENT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g' | grep ":" | grep -v "00:00:00.00")
    #fi
    ## 
    ## read the pointing center of telescope if failed to get them, then try degree format
    ## 
    #if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    #    PdBIUVT_RAND_CENT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g' | grep -v ":")
    #    PdBIUVT_DECD_CENT=$(cat "$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt" | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g' | grep -v ":")
    #fi
    # 
    # convert RANX DECX to degree or the opposite
    # 
    if [[ x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
        if [[ x"$PdBIUVT_RANX_CENT" != x"" && x"$PdBIUVT_DECX_CENT" != x"" ]]; then
            PdBIUVT_RAND_CENT=$(radec2degree "$PdBIUVT_RANX_CENT" "$PdBIUVT_DECX_CENT" 2>/dev/null | cut -d ' ' -f 1)
            PdBIUVT_DECD_CENT=$(radec2degree "$PdBIUVT_RANX_CENT" "$PdBIUVT_DECX_CENT" 2>/dev/null | cut -d ' ' -f 2)
        fi
    else
        if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" ]]; then
            PdBIUVT_RANX_CENT=$(degree2radec "$PdBIUVT_RAND_CENT" "$PdBIUVT_DECD_CENT" 2>/dev/null | cut -d ' ' -f 1)
            PdBIUVT_DECX_CENT=$(degree2radec "$PdBIUVT_RAND_CENT" "$PdBIUVT_DECD_CENT" 2>/dev/null | cut -d ' ' -f 2)
        fi
    fi
    # 
    # check Telescope pointing RA Dec
    # 
    if [[ x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
        echo ""; echo "Error! Could not find telescope pointing information in the uv table header \"$PdBIUVT_NAME.$PdBIUVT_TYPE.header.txt\"! Please input telescope pointing like \"-pointing 12:36:20 62:20:00\"!"; echo ""
        return 4
    fi
    # 
    # if object RA Dec not found, then we fit the telescope pointing center RA Dec
    # 
    if [[ $PdBIUVT_OBJ_NUMB -eq 0 ]]; then
        #echo ""; echo "Warning! Object RA Dec was not given! We will use telescope pointing RA Dec for fitting! (will continue in 2.5 seconds)"; echo ""; sleep 2.5
        #echo ""; echo "Warning! Object RA Dec was not given! We will use telescope pointing RA Dec when needed (e.g. for uv_fit)!"; echo ""; sleep 2.5
        PdBIUVT_RAND_OBJT=("$PdBIUVT_RAND_CENT")
        PdBIUVT_DECD_OBJT=("$PdBIUVT_DECD_CENT")
        PdBIUVT_RANX_OBJT=("$PdBIUVT_RANX_CENT")
        PdBIUVT_DECX_OBJT=("$PdBIUVT_DECX_CENT")
        PdBIUVT_OBJ_POS=("" "")
        PdBIUVT_OBJ_NUMB=1
    fi
    # 
    # calculate OBJ_POS as the distance from telescope pointing center
    # 
    for (( i=0; i<$PdBIUVT_OBJ_NUMB; i++ )); do
        # convert between offset and radec
        if [[ -z "${PdBIUVT_OBJ_POS[2*i+0]}" || -z "${PdBIUVT_OBJ_POS[2*i+1]}" ]]; then
            # if input is RA Dec but not offset
            PdBIUVT_OBJ_POS_X=$(printf "%0.5f\n" $(echo "(${PdBIUVT_RAND_OBJT[i]}-($PdBIUVT_RAND_CENT))*3600.0*c($PdBIUVT_DECD_CENT/180*4*a(1))" | bc -l | tail -n 1 | sed 's/^\./0./' | sed 's/^[-]\./-0./')) # RA offset, note that the direction is +1!
            PdBIUVT_OBJ_POS_Y=$(printf "%0.5f\n" $(echo "(${PdBIUVT_DECD_OBJT[i]}-($PdBIUVT_DECD_CENT))*3600.0" | bc -l | tail -n 1 | sed 's/^\./0./' | sed 's/^[-]\./-0./')) # DEC offset
            PdBIUVT_OBJ_POS[2*i+0]="$PdBIUVT_OBJ_POS_X"
            PdBIUVT_OBJ_POS[2*i+1]="$PdBIUVT_OBJ_POS_Y"
        else
            # if input is offset instead of RA Dec. Note that +X means +left (increase in RA), +Y means +up (increase in Dec). 
            PdBIUVT_OBJ_POS_X=$(awk "BEGIN {pi=atan2(0,-1); printf \"%0.7f\n\", ($PdBIUVT_RAND_CENT)+(${PdBIUVT_OBJ_POS[2*i+0]}/cos($PdBIUVT_DECD_CENT/180.0*pi))/3600.0;}") # RA offset, note that the direction is +1!
            PdBIUVT_OBJ_POS_Y=$(awk "BEGIN {pi=atan2(0,-1); printf \"%0.7f\n\", ($PdBIUVT_DECD_CENT)+(${PdBIUVT_OBJ_POS[2*i+1]})/3600.0;}")
            # -- note: in awk, we can use "pi=atan2(0,-1)" to retrieve the value of pi. -- https://www.gnu.org/software/gawk/manual/html_node/Numeric-Functions.html
            PdBIUVT_RAND_OBJT[i]="$PdBIUVT_OBJ_POS_X"
            PdBIUVT_DECD_OBJT[i]="$PdBIUVT_OBJ_POS_Y"
            PdBIUVT_RANX_OBJT[i]=$(degree2radec "$PdBIUVT_OBJ_POS_X" "$PdBIUVT_OBJ_POS_Y" 2>/dev/null | cut -d ' ' -f 1)
            PdBIUVT_DECX_OBJT[i]=$(degree2radec "$PdBIUVT_OBJ_POS_X" "$PdBIUVT_OBJ_POS_Y" 2>/dev/null | cut -d ' ' -f 2)
        fi
        
        # filling in default values for previous objects (again, same as the above code)
        while [[ ${#PdBIUVT_OBJ_NAME[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_NAME+=("obj_$((${#PdBIUVT_OBJ_NAME[@]}+1))")
        done
        while [[ ${#PdBIUVT_OBJ_FUNC[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_FUNC+=("POINT")
        done
        while [[ ${#PdBIUVT_OBJ_SIZE[@]} -lt $((2*$PdBIUVT_OBJ_NUMB)) ]]; do 
            PdBIUVT_OBJ_SIZE+=("0.0")
        done
        while [[ ${#PdBIUVT_OBJ_ANGLE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_ANGLE+=("0.0")
        done
        while [[ ${#PdBIUVT_OBJ_VARY_POS[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_POS+=(0)
        done
        while [[ ${#PdBIUVT_OBJ_VARY_SIZE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_SIZE+=(1) # in default we vary size
        done
        while [[ ${#PdBIUVT_OBJ_VARY_ANGLE[@]} -lt $PdBIUVT_OBJ_NUMB ]]; do 
            PdBIUVT_OBJ_VARY_ANGLE+=(1) # in default we vary angle
        done
        
        # make sure 
        if echo "${PdBIUVT_OBJ_FUNC[i]}" | grep -q -i "POINT"; then
            PdBIUVT_OBJ_SIZE[2*i+0]="0.0"; PdBIUVT_OBJ_SIZE[2*i+1]="0.0"; PdBIUVT_OBJ_VARY_SIZE[i]=1
            PdBIUVT_OBJ_ANGLE[2*i+0]="0.0"; PdBIUVT_OBJ_VARY_ANGLE[i]=1
        elif echo "${PdBIUVT_OBJ_FUNC[i]}" | grep -q -i "C_GAUSS"; then
            # set minor axis FWHM size to 0, and set angle to 0
            PdBIUVT_OBJ_SIZE[2*i+1]="0.0"
            PdBIUVT_OBJ_ANGLE[2*i+0]="0.0"; PdBIUVT_OBJ_VARY_ANGLE[i]=1
            # check major axis FWHM size, if non-positive then set it to fit.
            if [[ $(awk "BEGIN {if(${PdBIUVT_OBJ_SIZE[2*i+0]}>0) print 1; else print 0;}") -eq 0 ]]; then
                PdBIUVT_OBJ_SIZE[2*i+0]="1.0"; PdBIUVT_OBJ_VARY_SIZE[i]=1
            fi
        elif echo "${PdBIUVT_OBJ_FUNC[i]}" | grep -q -i "E_GAUSS"; then
            # check major and minor axis FWHM size, if non-positive then set it to fit.
            if [[ $(awk "BEGIN {if(${PdBIUVT_OBJ_SIZE[2*i+0]}>0) print 1; else print 0;}") -eq 0 ]]; then
                PdBIUVT_OBJ_SIZE[2*i+0]="1.0"; PdBIUVT_OBJ_SIZE[2*i+1]="1.0"; PdBIUVT_OBJ_VARY_SIZE[i]=1; PdBIUVT_OBJ_VARY_ANGLE[i]=1
            elif [[ $(awk "BEGIN {if(${PdBIUVT_OBJ_SIZE[2*i+1]}>0) print 1; else print 0;}") -eq 0 ]]; then
                PdBIUVT_OBJ_SIZE[2*i+1]="1.0"; PdBIUVT_OBJ_VARY_SIZE[i]=1; PdBIUVT_OBJ_VARY_ANGLE[i]=1
            fi
        fi
        
    done
    # 
    # Print UV table header info
    # 
    echo ""
    echo "************************"
    echo "* UV table header info *"
    echo "************************"
    echo "Pointing Center = $PdBIUVT_RANX_CENT $PdBIUVT_DECX_CENT"
    echo "Line Rest Freq. = $(printf '%0.3f' $PdBIUVT_LINE_FREQ) GHz"
    echo "Line Name   = $PdBIUVT_LINE_NAME"
    echo "Chan. Min.  = $PdBIUVT_CHAN_MIN"
    echo "Chan. Cen.  = $PdBIUVT_CHAN_CEN"
    echo "Chan. Max.  = $PdBIUVT_CHAN_MAX"
    echo "Chan. Bin.  = 1"
    echo "Velo. Bin.  = $PdBIUVT_VELO_BIN km/s"
    echo "Freq. Bin.  = $PdBIUVT_FREQ_BIN MHz"
    echo "Chan. Ref.  = $PdBIUVT_CHAN_REF"
    echo "Velo. Ref.  = $PdBIUVT_VELO_REF km/s"
    echo "Freq. Ref.  = $PdBIUVT_FREQ_REF MHz"
    # 
    # Print user input parameters
    #     
    echo ""
    echo "************************************"
    echo "* User input or default parameters *"
    echo "************************************"
    # -- print channel range input
    for (( i=0; i<${#PdBIUVT_CMIN[@]}; i++ )); do
        printf "%-15s %s\n" "crange ${PdBIUVT_CMIN[i]} ${PdBIUVT_CMAX[i]}" "# Input channel range (pair $(($i+1)))"
    done
    # -- print velocity range input
    for (( i=0; i<${#PdBIUVT_VMIN[@]}; i++ )); do
        printf "%-15s %s\n" "vrange ${PdBIUVT_VMIN[i]} ${PdBIUVT_VMAX[i]}" "# Input velocity range in km/s (pair $(($i+1)))"
    done
    # -- print frequency range input
    for (( i=0; i<${#PdBIUVT_FMIN[@]}; i++ )); do
        printf "%-15 %s\n" "frange ${PdBIUVT_FMIN[i]} ${PdBIUVT_FMAX[i]}" "# Input frequency range in GHz (pair $(($i+1)))"
    done
    
    for (( i=0; i<$PdBIUVT_OBJ_NUMB; i++ )); do
        PdBIUVT_OBJ_VARY_POS_STR=""
        PdBIUVT_OBJ_VARY_SIZE_STR=""
        PdBIUVT_OBJ_VARY_ANGLE_STR=""
        if [[ "${PdBIUVT_OBJ_VARY_POS[i]}" == "0" ]]; then PdBIUVT_OBJ_VARY_POS_STR=" (fixed)"; fi
        if [[ "${PdBIUVT_OBJ_VARY_SIZE[i]}" == "0" ]]; then PdBIUVT_OBJ_VARY_SIZE_STR=" (fixed)"; fi
        if [[ "${PdBIUVT_OBJ_VARY_ANGLE[i]}" == "0" ]]; then PdBIUVT_OBJ_VARY_ANGLE_STR=" (fixed)"; fi
        # 
        #printf "Object %30s Function %10s RA Dec %11.7f %11.7f %-7s Size %4.2f %4.2f %-7s PA %10s %-7s\n" \
        #      "${PdBIUVT_OBJ_NAME[i]}" "${PdBIUVT_OBJ_FUNC[i]}" \
        #      "${PdBIUVT_OBJ_POS[2*i+0]}" "${PdBIUVT_OBJ_POS[2*i+1]}" "$PdBIUVT_OBJ_VARY_POS_STR" \
        #      "${PdBIUVT_OBJ_SIZE[2*i+0]}" "${PdBIUVT_OBJ_SIZE[2*i+1]}" "$PdBIUVT_OBJ_VARY_SIZE_STR" \
        #      "${PdBIUVT_OBJ_ANGLE[i]}" "$PdBIUVT_OBJ_VARY_ANGLE_STR"
        printf "Object \"%s\" function %s offset %0.3f %0.3f%s size %0.3f %0.3f%s PA %0.1f%s\n" \
              "${PdBIUVT_OBJ_NAME[i]}" "${PdBIUVT_OBJ_FUNC[i]}" \
              "${PdBIUVT_OBJ_POS[2*i+0]}" "${PdBIUVT_OBJ_POS[2*i+1]}" "$PdBIUVT_OBJ_VARY_POS_STR" \
              "${PdBIUVT_OBJ_SIZE[2*i+0]}" "${PdBIUVT_OBJ_SIZE[2*i+1]}" "$PdBIUVT_OBJ_VARY_SIZE_STR" \
              "${PdBIUVT_OBJ_ANGLE[i]}" "$PdBIUVT_OBJ_VARY_ANGLE_STR"
    done
    
fi


