#!/bin/bash
# 
# Input RA Dec
# Output spec & uvfit
# 
# Last update:
#    2015-03-23 make vrange also a list
#    2016-06-29 supermongo tail -n 1
#    2016-07-01 use bc -l to replace all supermongo calculations except final plotting
#    2016-07-01 use perl -p -e to replace sed -E where regex \S \s are used
#    2016-07-01 support simultaneous running now
# 
# 
#set -e
# 
PdBIUVT_EXMP=".pdbi-uvt-go-uvfit.mapping"
PdBIUVT_EXPY=".pdbi-uvt-go-uvfit.py"
PdBIUVT_STTY=".pdbi-uvt-go-uvfit.tty"
PdBIUVT_NAME=""
PdBIUVT_RESI="" # the output residual uvtable after subtraction
PdBIUVT_SAVE="" # the output save files base name
PdBIUVT_RSUB="YES" # whether subtract the fit component or not (now always make residual uvtable) -- (if we set PdBIUVT_RESI, then PdBIUVT_RSUB="YES")
PdBIUVT_SIZE="1.0" # <TODO> only can input for one object
PdBIUVT_POSA="0.0"
PdBIUVT_VARY=0
PdBIUVT_VARY_SIZE=1
PdBIUVT_VARY_POSA=1
PdBIUVT_FUNC="POINT"
PdBIUVT_VMIN=()
PdBIUVT_VMAX=()
PdBIUVT_CMIN=()
PdBIUVT_CMAX=()
PdBIUVT_FMIN=()
PdBIUVT_FMAX=()
PdBIUVT_RANX_OBJT=() # "09:59:38.101"
PdBIUVT_DECX_OBJT=() # "02:28:57.108"
PdBIUVT_RAND_OBJT=() # "150.000"
PdBIUVT_DECD_OBJT=() # "30.0000"
PdBIUVT_RANX_CENT="" # "09:59:38.101"
PdBIUVT_DECX_CENT="" # "02:28:57.108"
PdBIUVT_RAND_CENT="" # "150.000"
PdBIUVT_DECD_CENT="" # "30.0000"
PdBIUVT_CHAN_WDTH="0" # channel width in unit of channel
PdBIUVT_LINE_FREQ=""
PdBIUVT_PARALLELS=0
# LANG
LANG=C
# CHECK radec2degree
if [[ $(radec2degree 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! radec2degree not found! Please contact dzliu. 
    exit 1
fi
# CHECK degree2radec
if [[ $(degree2radec 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! degree2radec not found! Please contact dzliu. 
    exit 1
fi
# CHECK bc
if [[ $(bc <<< 1+2 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool bc not found! Exit!
    exit 1
fi
# CHECK awk
if [[ $(echo "Go" | awk "NR==1" 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool awk not found! Exit!
    exit 1
fi
# CHECK supermongo
if [[ x$(echo echo hello | sm 2>/dev/null | tail -n 1) != xhello ]]; then
    echo "Error! Supermongo not found or not working! \"echo echo hello | sm\" not working! Exit!"
    exit 1
fi
# 
# Read input parameters
# 
PdBIUVT_GOOD=1
PdBIUVT_TSTR=""
PdBIUVT_RPAR=""
while [[ "$#" -gt 0 ]]; do
    # echo $1
    PdBIUVT_TSTR=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    case "$PdBIUVT_TSTR" in
          "-name") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_NAME="$1";;
           "-res") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_RESI="$1";;
      "-residual") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_RESI="$1";;
           "-out") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SAVE="$1";;
          "-save") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SAVE="$1";;
      "-restfreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_LINE_FREQ="$1";;
      "-linefreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_LINE_FREQ="$1";;
  "-linerestfreq") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_LINE_FREQ="$1";;
          "-vary") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY=1;;
  "-varyposition") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY=1;;
   "-fixposition") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY=0;;
          "-size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SIZE="$1";;
      "-varysize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY_SIZE=1;;
       "-fixsize") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY_SIZE=0;;
      "-posangle") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_POSA="$1";;
  "-varyposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY_POSA=1;;
   "-fixposangle") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY_POSA=0;;
         "-gauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_FUNC="E_GAUSS";;
        "-egauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_FUNC="E_GAUSS";;
        "-cgauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_FUNC="C_GAUSS";;
         "-radec") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="radec";;
      "-pointing") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="pointing";;
        "-crange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="crange";;
        "-vrange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="vrange";;
        "-frange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="frange";; #<TODO># input frange should be MHz
  "-simultaneous") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_PARALLELS=1;; #<TODO># allow simultaneous uv_fit to run
      "-parallel") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_PARALLELS=1;; #<TODO># allow simultaneous uv_fit to run
    esac
    if [[ "$PdBIUVT_RPAR" == "radec" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if [[ "$1" == *":"*":"* ]]; then
            PdBIUVT_RANX_OBJT=("${PdBIUVT_RANX_OBJT[@]}" "$1")
            PdBIUVT_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
            PdBIUVT_RAND_OBJT=("${PdBIUVT_RAND_OBJT[@]}" "$PdBIUVT_TEMP")
        else
            PdBIUVT_RAND_OBJT=("${PdBIUVT_RAND_OBJT[@]}" "$1")
            PdBIUVT_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
            PdBIUVT_RANX_OBJT=("${PdBIUVT_RANX_OBJT[@]}" "$PdBIUVT_TEMP")
        fi
        if [[ "$2" == *":"*":"* ]]; then
            PdBIUVT_DECX_OBJT=("${PdBIUVT_DECX_OBJT[@]}" "$2")
            PdBIUVT_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
            PdBIUVT_DECD_OBJT=("${PdBIUVT_DECD_OBJT[@]}" "$PdBIUVT_TEMP")
        else
            PdBIUVT_DECD_OBJT=("${PdBIUVT_DECD_OBJT[@]}" "$2")
            PdBIUVT_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
            PdBIUVT_DECX_OBJT=("${PdBIUVT_DECX_OBJT[@]}" "$PdBIUVT_TEMP")
        fi
        shift
    fi
    if [[ "$PdBIUVT_RPAR" == "pointing" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if [[ "$1" == *":"*":"* ]]; then
            PdBIUVT_RANX_CENT="$1"
            PdBIUVT_RAND_CENT=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
        else
            PdBIUVT_RAND_CENT="$1"
            PdBIUVT_RANX_CENT=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
        fi
        if [[ "$2" == *":"*":"* ]]; then
            PdBIUVT_DECX_CENT="$2"
            PdBIUVT_DECD_CENT=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
        else
            PdBIUVT_DECD_CENT="$2"
            PdBIUVT_DECX_CENT=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
        fi
        shift
        PdBIUVT_RPAR=""
    fi
    if [[ "$PdBIUVT_RPAR" == "crange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        PdBIUVT_CMIN=("${PdBIUVT_CMIN[@]}" "$1")
        PdBIUVT_CMAX=("${PdBIUVT_CMAX[@]}" "$2")
        shift
    fi
    if [[ "$PdBIUVT_RPAR" == "vrange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        PdBIUVT_VMIN=("${PdBIUVT_VMIN[@]}" "$1")
        PdBIUVT_VMAX=("${PdBIUVT_VMAX[@]}" "$2")
        shift
    fi
    if [[ "$PdBIUVT_RPAR" == "frange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if echo "$1" | grep -Eq '^[-+]?[0-9]+\.?[0-9]*$'; then
            PdBIUVT_FMIN=("${PdBIUVT_FMIN[@]}" "$1")
        else
            echo "Error! Input frequency range value \"$1\" is not a float number! Exit!"
            exit
        fi
        if echo "$2" | grep -Eq '^[-+]?[0-9]+\.?[0-9]*$'; then
            PdBIUVT_FMAX=("${PdBIUVT_FMAX[@]}" "$2")
        else
            echo "Error! Input frequency range value \"$2\" is not a float number! Exit!"
            exit
        fi
        shift
    fi
    shift
done
# 
# Check input parameters -- make sure radec is given
# 
##if [[ "${#PdBIUVT_RAND_OBJT[@]}" -lt 1 ]]; then
##    PdBIUVT_GOOD=0
##fi
# 
# Check input parameters -- make sure input uv table name is given
# 
if [[ x"$PdBIUVT_NAME" == x ]]; then
    PdBIUVT_GOOD=0
fi
# 
# Check input parameters -- if not passed then print usage and exit
# 
if [[ $PdBIUVT_GOOD -eq 0 ]]; then
    #echo Usage: pdbi-uvt-go-uvfit -name PdBIUVT_NAME[no-suffix] [-size 10] [-vary] [-pointing RA DEC] -radec RA DEC [RA DEC [RA DEC]] [-cgauss/-egauss] [-residual residual.uvt]
    echo "Usage: "
    echo "    pdbi-uvt-go-uvfit -name NAME.uvt [-size 10] [-vary] [-pointing RA DEC] [-radec RA DEC [RA DEC [RA DEC]]] [-cgauss] [-egauss] [-residual residual.uvt]"
    echo ""
    echo "Examples:"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -vary                                               # This will fit position and flux for a source at telescope pointing center with POINT model"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -vary -cgauss                                       # This will fit position and flux for a source at telescope pointing center with C_GAUSS model"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -vary -egauss                                       # This will fit position and flux for a source at telescope pointing center with E_GAUSS model"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME                                                     # This will fix position to 0,0 and only fit flux for the source"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -radec 12:30:00 03:00:00 -vary                      # This will fit position and flux for a source at the given coordinate"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -size 2.5 -fixsize -cgauss                          # This will fit the source with fixed size of 2.5 arcsec in diameter"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -size '2.5 1.5' -fixsize -egauss                    # This will fit the source with fixed size of 2.5,1.5 arcsec in major,minor diameter"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -radec 189.120 62.205 189.123 62.204 189.121 62.202 # This will fit 3 sources at their corresponding coordinates"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -crange 1 10                                        # This will highlight channel range 1 to 10 in the resulting plot and compute the integrated flux"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -vrange -300 300                                    # This will highlight velocity range -300 to 300 km/s in the resulting plot and compute the integrated flux"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -frange 115.1 115.2                                 # This will highlight frequency range 115.1 to 115.2 GHz in the resulting plot and compute the integrated flux"
    echo "    pdbi-uvt-go-uvfit -name SOME_NAME -parallel                                           # This will allow simultaneous running. Without this running more than two uv_fit at the same time will cause error."
    echo ""
    exit
fi
# 
# Revise input parameters
# 
# Remove the suffix of the input uvtable name, and test whether the file exists
PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -e 's/[.]uvt$//g')
if [[ ! -f "$PdBIUVT_NAME.uvt" ]]; then
	echo ""; echo Error! "$PdBIUVT_NAME.uvt" was not found! Exit!; echo ""
    exit
fi
# Make sure the suffix of the residual uvtable name is .uvt, and test whether the file exists
if [[ x"$PdBIUVT_RESI" != x ]]; then 
    if [[ "$PdBIUVT_RESI" != *".uvt" ]]; then PdBIUVT_RESI="$PdBIUVT_RESI.uvt"; fi # make sure the suffix is .uvt
    #if [[ -f "$PdBIUVT_RESI" ]]; then echo -n Warning! "$PdBIUVT_RESI exists! Do you like to overwrite? [y/n] "
    #    read PdBIUVT_TEMP; if [[ "$PdBIUVT_TEMP" == "y"* ]]; then 
    #    echo Deleted old "$PdBIUVT_RESI"!; rm "$PdBIUVT_RESI"; else 
    #    echo OK! We have not modify any thing! Exit!; exit; fi
    #fi
    PdBIUVT_RSUB="YES"
fi
# Sset default output save files base name
if [[ x"$PdBIUVT_SAVE" == x ]]; then 
    PdBIUVT_SAVE="tmp_doUVFIT"
fi
# 
# Running GILDAS mapping to get uvtable header
echo "header $PdBIUVT_NAME.uvt" | mapping | sed 's/[^[:print:]]//g' > "header.txt"
if [[ ! -f "header.txt" ]]; then
	echo ""; echo "Error! Failed to run \"echo \"header $PdBIUVT_NAME.uvt\" | mapping\" > \"header.txt\"! Please make sure mapping is working!"; echo ""
	exit
fi
# 
# get line name and rest frequency <Corrected><20150217><DADDI><DZLIU> the rest frequency is not reference frequency
PdBIUVT_LINE_NAME=$(cat header.txt | grep 'Line Name.* Rest Frequency' | perl -p -e 's/.*Line Name[ ]*(.*)[ ]*Rest Frequency[ ]*(.*)[ ]*$/\1/g' | sed -e 's/^ *$//g')
if [[ x"$PdBIUVT_LINE_FREQ" == x ]]; then
    PdBIUVT_LINE_FREQ=$(cat header.txt | grep 'Line Name.* Rest Frequency' | perl -p -e 's/.*Line Name[ ]*(.*)[ ]*Rest Frequency[ ]*(.*)[ ]*$/\2/g' | sed -e 's/^ *$//g')
    if [[ x"$PdBIUVT_LINE_FREQ" != x ]]; then
        PdBIUVT_LINE_FREQ=$(echo "$PdBIUVT_LINE_FREQ/1000.0" | bc -l) # conver from MHz to GHz
    fi
fi
# 
# get velocity resolution (and frequency resolution)
PdBIUVT_VELO_BIN=$(cat header.txt | grep 'Resolution in Velocity.* in Frequency' | perl -p -e 's/.*Resolution in Velocity[ ]*(.*)[ ]*in Frequency[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g')
PdBIUVT_FREQ_BIN=$(cat header.txt | grep 'Resolution in Velocity.* in Frequency' | perl -p -e 's/.*Resolution in Velocity[ ]*(.*)[ ]*in Frequency[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g')
# 
# get velocity offset
PdBIUVT_VELO_REF=$(cat header.txt | grep 'Offset in Velocity.* Doppler' | perl -p -e 's/.*Offset in Velocity[ ]*(.*)[ ]*Doppler[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g')
# 
# get channel min max and center
PdBIUVT_CHAN_MIN=1
PdBIUVT_CHAN_MAX=$(cat header.txt | grep 'UV Data * Channels:.*, Stokes:.*Visibilities:' | perl -p -e 's/.*UV Data[ ]* Channels:[ ]*(.*)[ ]*, Stokes:[ ]*(.*)[ ]*Visibilities:[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g')
PdBIUVT_CHAN_CEN=$(echo "$PdBIUVT_CHAN_MAX/2+1" | bc) # for example 100 channels, the central channel is 51 in gildas, starting from 1.
# 
# get reference channel freq (and frequency resolution)
PdBIUVT_TEMP_TEXT=$(cat header.txt | grep -A 1 'Size *Reference Pixel *Value *Increment' | tail -n 1) # get the line after 'Size *Reference Pixel *Value *Increment' line
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_CHAN_REF=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 2)
PdBIUVT_FREQ_REF=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 3)
PdBIUVT_FREQ_BIN=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4)
# 
# read the pointing center of telescope i.e. center RA Dec of FoV , from 'Right Ascension.*Declination'
if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    PdBIUVT_RANX_CENT=$(cat header.txt | grep 'Right Ascension.*Declination' | perl -p -e 's/.*Right Ascension[ ]*(.*)[ ]*Declination[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g' | grep -v "00:00:00.000")
    PdBIUVT_DECX_CENT=$(cat header.txt | grep 'Right Ascension.*Declination' | perl -p -e 's/.*Right Ascension[ ]*(.*)[ ]*Declination[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g' | grep -v "00:00:00.00")
fi
# 
# read the pointing center of telescope i.e. center RA Dec of FoV , from 'Axis 0 *A0.*Axis 0 *D0' if nothing in 'Right Ascension.*Declination'
if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    PdBIUVT_RANX_CENT=$(cat header.txt | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g' | grep ":" |  grep -v "00:00:00.000")
    PdBIUVT_DECX_CENT=$(cat header.txt | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g' | grep ":" | grep -v "00:00:00.00")
fi
# 
# read the pointing center of telescope if failed to get them, then try degree format
if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" || x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    PdBIUVT_RAND_CENT=$(cat header.txt | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\1/g' | sed -e 's/ //g' | grep -v ":")
    PdBIUVT_DECD_CENT=$(cat header.txt | grep 'Axis 0 *A0.*Axis 0 *D0' | perl -p -e 's/.*Axis 0[ ]*A0[ ]*(.*)[ ]*Axis 0[ ]*D0[ ]*(.*)[ ]*$/\2/g' | sed -e 's/ //g' | grep -v ":")
fi
# 
# convert RANX DECX to degree or the opposite
if [[ x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
    if [[ x"$PdBIUVT_RANX_CENT" != x"" && x"$PdBIUVT_DECX_CENT" != x"" ]]; then
        PdBIUVT_RAND_CENT=$(radec2degree "$PdBIUVT_RANX_CENT" "$PdBIUVT_DECX_CENT" 2>/dev/null | cut -d ' ' -f 1)
        PdBIUVT_DECD_CENT=$(radec2degree "$PdBIUVT_RANX_CENT" "$PdBIUVT_DECX_CENT" 2>/dev/null | cut -d ' ' -f 2)
    fi
else
    if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" ]]; then
        PdBIUVT_RANX_CENT=$(degree2radec "$PdBIUVT_RAND_CENT" "$PdBIUVT_DECD_CENT" 2>/dev/null | cut -d ' ' -f 1)
        PdBIUVT_DECX_CENT=$(degree2radec "$PdBIUVT_RAND_CENT" "$PdBIUVT_DECD_CENT" 2>/dev/null | cut -d ' ' -f 2)
    fi
fi
# 
# check Telescope pointing RA Dec
if [[ x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
	echo ""; echo "Error! Could not find telescope pointing information in the uv table header \"header.txt\"! Please input telescope pointing like \"-pointing 12:36:20 62:20:00\"!"; echo ""
	exit
fi
# 
# if object RA Dec not found, then we fit the telescope pointing center RA Dec
if [[ x"$PdBIUVT_RAND_OBJT" == x"" || x"$PdBIUVT_DECD_OBJT" == x"" ]]; then
    PdBIUVT_RAND_OBJT=("$PdBIUVT_RAND_CENT")
    PdBIUVT_DECD_OBJT=("$PdBIUVT_DECD_CENT")
    PdBIUVT_RANX_OBJT=("$PdBIUVT_RANX_CENT")
    PdBIUVT_DECX_OBJT=("$PdBIUVT_DECX_CENT")
    echo ""; echo "Warning! Object RA Dec was not given! We will use telescope pointing RA Dec for fitting! (will continue in 3 seconds)"; echo ""; sleep 3
fi
# 
# if telescope pointing not found, then use object RA Dec
##if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" ]]; then
##    PdBIUVT_RAND_CENT=(${PdBIUVT_RAND_OBJT[0]})
##    PdBIUVT_DECD_CENT=(${PdBIUVT_DECD_OBJT[0]})
##    PdBIUVT_RANX_CENT=(${PdBIUVT_RANX_OBJT[0]})
##    PdBIUVT_DECX_CENT=(${PdBIUVT_DECX_OBJT[0]})
##    echo 
##    echo Warning! Telescope pointing was not found! We will use object radec instead!
##    echo 
##fi
# 
# 
# 
# 
# 
# -- print uvtable name without suffix
echo "PdBIUVT_NAME=$PdBIUVT_NAME"
# -- print source size -- not go view box size in arcsec
echo "PdBIUVT_SIZE=$PdBIUVT_SIZE"
# -- print object radec in sexagesimal and decimal
echo PdBIUVT_RANX_OBJT=${PdBIUVT_RANX_OBJT[*]}
echo PdBIUVT_DECX_OBJT=${PdBIUVT_DECX_OBJT[*]}
echo PdBIUVT_RAND_OBJT=${PdBIUVT_RAND_OBJT[*]}
echo PdBIUVT_DECD_OBJT=${PdBIUVT_DECD_OBJT[*]}
# -- print center radec in sexagesimal and decimal
echo PdBIUVT_RANX_CENT=$PdBIUVT_RANX_CENT
echo PdBIUVT_DECX_CENT=$PdBIUVT_DECX_CENT
echo PdBIUVT_RAND_CENT=$PdBIUVT_RAND_CENT
echo PdBIUVT_DECD_CENT=$PdBIUVT_DECD_CENT
# -- print channel range input
echo PdBIUVT_CMIN=${PdBIUVT_CMIN[*]}
echo PdBIUVT_CMAX=${PdBIUVT_CMAX[*]}
# -- print velocity range input
echo PdBIUVT_VMIN=${PdBIUVT_VMIN[*]}
echo PdBIUVT_VMAX=${PdBIUVT_VMAX[*]}
# -- print frequency range input
echo PdBIUVT_FMIN=${PdBIUVT_FMIN[*]}
echo PdBIUVT_FMAX=${PdBIUVT_FMAX[*]}
# -- print whether vary position or not
echo PdBIUVT_VARY=$PdBIUVT_VARY
echo PdBIUVT_VARY_SIZE=$PdBIUVT_VARY_SIZE
echo PdBIUVT_VARY_POSA=$PdBIUVT_VARY_POSA
# 
echo ""
echo "Line Rest Freq. = $(printf '%0.3f' $PdBIUVT_LINE_FREQ) GHz"
echo "Line Name   = $PdBIUVT_LINE_NAME"
echo "Chan. Min.  = $PdBIUVT_CHAN_MIN"
echo "Chan. Cen.  = $PdBIUVT_CHAN_CEN"
echo "Chan. Max.  = $PdBIUVT_CHAN_MAX"
echo "Chan. Bin.  = 1"
echo "Velo. Bin.  = $PdBIUVT_VELO_BIN km/s"
echo "Freq. Bin.  = $PdBIUVT_FREQ_BIN MHz"
echo "Chan. Ref.  = $PdBIUVT_CHAN_REF"
echo "Velo. Ref.  = $PdBIUVT_VELO_REF km/s"
echo "Freq. Ref.  = $PdBIUVT_FREQ_REF MHz"
# 
#exit
# 
# 
# 
# 
# 
# 
################################################################
# prepare functions to convert channel, velocity and frequency #
################################################################
convert_channel_to_velocity () {
    if [ -z "$1" ]; then echo "Error! Incorrect parameters for convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_CHAN_REF" ]; then echo "Error! \$PdBIUVT_CHAN_REF was not defined before running convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_VELO_BIN" ]; then echo "Error! \$PdBIUVT_VELO_BIN was not defined before running convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_VELO_REF" ]; then echo "Error! \$PdBIUVT_VELO_REF was not defined before running convert_channel_to_velocity!"; exit; fi
    echo "($1-($PdBIUVT_CHAN_REF))*($PdBIUVT_VELO_BIN)+($PdBIUVT_VELO_REF)" | bc -l
}
convert_channel_to_frequency () {
    if [ -z "$1" ]; then echo "Error! Incorrect parameters for convert_channel_to_frequency!"; exit; fi
    if [ -z "$PdBIUVT_CHAN_REF" ]; then echo "Error! \$PdBIUVT_CHAN_REF was not defined before running convert_channel_to_frequency!"; exit; fi
    if [ -z "$PdBIUVT_FREQ_BIN" ]; then echo "Error! \$PdBIUVT_FREQ_BIN was not defined before running convert_channel_to_frequency!"; exit; fi
    if [ -z "$PdBIUVT_FREQ_REF" ]; then echo "Error! \$PdBIUVT_FREQ_REF was not defined before running convert_channel_to_frequency!"; exit; fi
    echo "($1-($PdBIUVT_CHAN_REF))*($PdBIUVT_FREQ_BIN)+($PdBIUVT_FREQ_REF)" | bc -l
}
convert_velocity_to_channel () {
    if [ -z "$1" ]; then echo "Error! Incorrect parameters for convert_velocity_to_channel!"; exit; fi
    if [ -z "$PdBIUVT_CHAN_REF" ]; then echo "Error! \$PdBIUVT_CHAN_REF was not defined before running convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_VELO_BIN" ]; then echo "Error! \$PdBIUVT_VELO_BIN was not defined before running convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_VELO_REF" ]; then echo "Error! \$PdBIUVT_VELO_REF was not defined before running convert_channel_to_velocity!"; exit; fi
    echo "($1-($PdBIUVT_VELO_REF))/($PdBIUVT_VELO_BIN)+($PdBIUVT_CHAN_REF)" | bc -l
}
convert_frequency_to_channel () {
    if [ -z "$1" ]; then echo "Error! Incorrect parameters for convert_velocity_to_channel!"; exit; fi
    if [ -z "$PdBIUVT_CHAN_REF" ]; then echo "Error! \$PdBIUVT_CHAN_REF was not defined before running convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_FREQ_BIN" ]; then echo "Error! \$PdBIUVT_FREQ_BIN was not defined before running convert_channel_to_velocity!"; exit; fi
    if [ -z "$PdBIUVT_FREQ_REF" ]; then echo "Error! \$PdBIUVT_FREQ_REF was not defined before running convert_channel_to_velocity!"; exit; fi
    echo "($1-($PdBIUVT_FREQ_REF))/($PdBIUVT_FREQ_BIN)+($PdBIUVT_CHAN_REF)" | bc -l
}
abs() { 
    if [ -z "$1" ]; then echo "Error! Incorrect parameters for abs!"; exit; fi
    if [[ "$1" == "-"* ]]; then echo "$1" | sed -e 's/^[-]//g'; else echo "$1"; fi
}
##<checkpoint>
##convert_channel_to_velocity $PdBIUVT_CHAN_REF
##convert_channel_to_frequency $PdBIUVT_CHAN_REF
##convert_velocity_to_channel 0.0
##convert_frequency_to_channel 0.0
##convert_channel_to_velocity 34
##convert_channel_to_frequency 34
##convert_velocity_to_channel -19.6353450000000000000
##convert_frequency_to_channel 30538.00000000000000000000
##exit
# 
# 
# 
# 
# 
# 
#########################################################################
# get object channel range and frequency range if velocity range is set #
# <added><20150323><dzliu> for each object                              #
# <moded><20160630><dzliu> using bc -l instead of sm                    #
#########################################################################
for (( PdBIUVT_OBJI = 0; PdBIUVT_OBJI < "${#PdBIUVT_RAND_OBJT[@]}"; PdBIUVT_OBJI++ )); do
    # 
    # Loop each input object 
    # For each input object, we have its ra dec for fitting
    # While for plotting, we can input -crange or -vrange or -frange to highlight the window of line. 
    # Note that Velocity axis should have a opposite direction as Frequency axis, but Channel axis has an arbitrary direction. 
    # 
    # Check the input channel range of each object
    # Channel range is given by "-crange CMIN1 CMAX1 CMIN2 CMAX2 ..."
    if [[ "${#PdBIUVT_CMIN[@]}"<=$PdBIUVT_OBJI ]]; then
        PdBIUVT_CMIN=("${PdBIUVT_CMIN[@]}" "0")
    fi
    if [[ "${#PdBIUVT_CMAX[@]}"<=$PdBIUVT_OBJI ]]; then
        PdBIUVT_CMAX=("${PdBIUVT_CMAX[@]}" "0")
    fi
    TEMP_CMIN=${PdBIUVT_CMIN[$PdBIUVT_OBJI]}
    TEMP_CMAX=${PdBIUVT_CMAX[$PdBIUVT_OBJI]}
    # 
    # Check the input velocity range of each object
    # Velocity range is given by "-vrange VMIN1 VMAX1 VMIN2 VMAX2 ..."
    if [[ "${#PdBIUVT_VMIN[@]}"<=$PdBIUVT_OBJI ]]; then
        PdBIUVT_VMIN=("${PdBIUVT_VMIN[@]}" "0")
    fi
    if [[ "${#PdBIUVT_VMAX[@]}"<=$PdBIUVT_OBJI ]]; then
        PdBIUVT_VMAX=("${PdBIUVT_VMAX[@]}" "0")
    fi
    TEMP_VMIN=${PdBIUVT_VMIN[$PdBIUVT_OBJI]}
    TEMP_VMAX=${PdBIUVT_VMAX[$PdBIUVT_OBJI]}
    # 
    # Check the input frequency range of each object
    # Frequency range is given by "-frange FMIN1 FMAX1 FMIN2 FMAX2 ..."
    if [[ "${#PdBIUVT_FMIN[@]}"<=$PdBIUVT_OBJI ]]; then
        PdBIUVT_FMIN=("${PdBIUVT_FMIN[@]}" "0")
    fi
    if [[ "${#PdBIUVT_FMAX[@]}"<=$PdBIUVT_OBJI ]]; then
        PdBIUVT_FMAX=("${PdBIUVT_FMAX[@]}" "0")
    fi
    TEMP_FMIN=$(echo ${PdBIUVT_FMIN[$PdBIUVT_OBJI]}*1000 | bc -l) # MHz
    TEMP_FMAX=$(echo ${PdBIUVT_FMAX[$PdBIUVT_OBJI]}*1000 | bc -l) # MHz
    # 
    # If CMIN>CMAX, then swap
    if echo "($TEMP_CMIN)>($TEMP_CMAX)" | bc -l | grep -q "1"; then
        TEMP_CVAR="$TEMP_CMIN"
        TEMP_CMIN="$TEMP_CMAX"
        TEMP_CMAX="$TEMP_CVAR"
    fi
    # 
    # If VMIN>VMAX, then swap
    if echo "($TEMP_VMIN)>($TEMP_VMAX)" | bc -l | grep -q "1"; then
        TEMP_VVAR="$TEMP_VMIN"
        TEMP_VMIN="$TEMP_VMAX"
        TEMP_VMAX="$TEMP_VVAR"
    fi
    # 
    # If VMIN>VMAX, then swap
    if echo "($TEMP_FMIN)>($TEMP_FMAX)" | bc -l | grep -q "1"; then
        TEMP_FVAR="$TEMP_FMIN"
        TEMP_FMIN="$TEMP_FMAX"
        TEMP_FMAX="$TEMP_FVAR"
    fi
    # 
    # If CMIN CMAX are invalid, then compute from VMIN VMAX or FMIN FMAX
    if [[ "$TEMP_CMIN" == "0" || "$TEMP_CMAX" == "0" ]]; then
        if [[ "$TEMP_VMIN" != "0" && "$TEMP_VMAX" != "0" ]]; then
            TEMP_CMIN=$(convert_velocity_to_channel $TEMP_VMIN)
            TEMP_CMAX=$(convert_velocity_to_channel $TEMP_VMAX)
        elif [[ "$TEMP_FMIN" != "0" && "$TEMP_FMAX" != "0" ]]; then
            TEMP_CMIN=$(convert_frequency_to_channel $TEMP_FMIN)
            TEMP_CMAX=$(convert_frequency_to_channel $TEMP_FMAX)
        fi
    fi
    # 
    # Make sure CMIN CMAX are integer
    TEMP_CMIN=$(printf '%.*f\n' 0 $TEMP_CMIN)
    TEMP_CMAX=$(printf '%.*f\n' 0 $TEMP_CMAX)
    # 
    # Compute velocity range from channel range
    TEMP_VMIN=$(convert_channel_to_velocity $TEMP_CMIN)
    TEMP_VMAX=$(convert_channel_to_velocity $TEMP_CMAX)
    # 
    # Compute frequency range from channel range
    TEMP_FMIN=$(convert_channel_to_frequency $TEMP_CMIN)
    TEMP_FMAX=$(convert_channel_to_frequency $TEMP_CMAX)
    # 
    # <checkpoint>
    ##echo "($TEMP_CMAX-($TEMP_CMIN))"
    ##echo "($TEMP_VMAX-($TEMP_VMIN))"
    ##echo "($TEMP_FMAX-($TEMP_FMIN))"
    # 
    # Compute frequency range center
    TEMP_FCEN=$(echo "($TEMP_FMIN+($TEMP_FMAX))/2.0/1000" | bc -l | tail -n 1 | sed 's/^\./0./') # GHz
    # 
    # Compute channel range width
    TEMP_CWID=$(echo "($TEMP_CMAX-($TEMP_CMIN))" | bc -l | tail -n 1 | sed 's/^\./0./')
    TEMP_CWID=$(abs "$TEMP_CWID")
    TEMP_CWID=$(echo "$TEMP_CWID+1" | bc -l | tail -n 1)
    # 
    # Compute frequency range width
    TEMP_FWID=$(echo "$TEMP_CWID*($PdBIUVT_FREQ_BIN)/1000" | bc -l | tail -n 1 | sed 's/^\./0./') # GHz
    TEMP_FWID=$(abs "$TEMP_FWID")
    # 
    # Compute velocity range width
    TEMP_VWID=$(echo "$TEMP_CWID*($PdBIUVT_VELO_BIN)" | bc -l | tail -n 1 | sed 's/^\./0./')
    TEMP_VWID=$(abs "$TEMP_VWID")
    # 
    # Save values
    if echo "($TEMP_CMIN)>($TEMP_CMAX)" | bc -l | grep -q "1"; then
        PdBIUVT_CMIN[PdBIUVT_OBJI]="$TEMP_CMAX"
        PdBIUVT_CMAX[PdBIUVT_OBJI]="$TEMP_CMIN"
    else
        PdBIUVT_CMIN[PdBIUVT_OBJI]="$TEMP_CMIN"
        PdBIUVT_CMAX[PdBIUVT_OBJI]="$TEMP_CMAX"
    fi
    if echo "($TEMP_VMIN)>($TEMP_VMAX)" | bc -l | grep -q "1"; then
        PdBIUVT_VMIN[PdBIUVT_OBJI]="$TEMP_VMAX"
        PdBIUVT_VMAX[PdBIUVT_OBJI]="$TEMP_VMIN"
    else
        PdBIUVT_VMIN[PdBIUVT_OBJI]="$TEMP_VMIN"
        PdBIUVT_VMAX[PdBIUVT_OBJI]="$TEMP_VMAX"
    fi
    if echo "($TEMP_FMIN)>($TEMP_FMAX)" | bc -l | grep -q "1"; then
        PdBIUVT_FMIN[PdBIUVT_OBJI]=$(echo "$TEMP_FMAX/1000" | bc -l)
        PdBIUVT_FMAX[PdBIUVT_OBJI]=$(echo "$TEMP_FMIN/1000" | bc -l)
    else
        PdBIUVT_FMIN[PdBIUVT_OBJI]=$(echo "$TEMP_FMIN/1000" | bc -l)
        PdBIUVT_FMAX[PdBIUVT_OBJI]=$(echo "$TEMP_FMAX/1000" | bc -l)
    fi
    # 
    # Print the line window
    if [[ "$TEMP_CMIN" != "0" && "$TEMP_CMAX" != "0" ]]; then
        echo ""
        echo "Selecting line window with Chan. range: ${PdBIUVT_CMIN[PdBIUVT_OBJI]} ${PdBIUVT_CMAX[PdBIUVT_OBJI]}        "
        echo "Selecting line window with Velo. range: ${PdBIUVT_VMIN[PdBIUVT_OBJI]} ${PdBIUVT_VMAX[PdBIUVT_OBJI]}  [km/s]" # "(input $TEMP_VMIN $TEMP_VMAX [km/s])"
        echo "Selecting line window with Freq. range: ${PdBIUVT_FMIN[PdBIUVT_OBJI]} ${PdBIUVT_FMAX[PdBIUVT_OBJI]}   [GHz]" # "(aligned to channel center)"
        echo "Selecting line window with Freq. width: $TEMP_FWID   [GHz]"
        echo "Selecting line window with Velo. width: $TEMP_VWID  [km/s]"
        # 
        # determine line frequency from line name if provided
        if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"* ]]; then
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"1-0"* ]]; then PdBIUVT_LINE_FREQ="115.2712018"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"2-1"* ]]; then PdBIUVT_LINE_FREQ="230.5380000"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"3-2"* ]]; then PdBIUVT_LINE_FREQ="345.7959899"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"4-3"* ]]; then PdBIUVT_LINE_FREQ="461.0407682"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"5-4"* ]]; then PdBIUVT_LINE_FREQ="576.2679305"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"6-5"* ]]; then PdBIUVT_LINE_FREQ="691.4730763"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"7-6"* ]]; then PdBIUVT_LINE_FREQ="806.6518060"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"8-7"* ]]; then PdBIUVT_LINE_FREQ="921.7997000"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"9-8"* ]]; then PdBIUVT_LINE_FREQ="1036.9123930"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO"*"10-9"* ]]; then PdBIUVT_LINE_FREQ="1151.9854520"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO10"* ]]; then PdBIUVT_LINE_FREQ="115.2712018"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO21"* ]]; then PdBIUVT_LINE_FREQ="230.5380000"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO32"* ]]; then PdBIUVT_LINE_FREQ="345.7959899"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO43"* ]]; then PdBIUVT_LINE_FREQ="461.0407682"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO54"* ]]; then PdBIUVT_LINE_FREQ="576.2679305"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO65"* ]]; then PdBIUVT_LINE_FREQ="691.4730763"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO76"* ]]; then PdBIUVT_LINE_FREQ="806.6518060"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO87"* ]]; then PdBIUVT_LINE_FREQ="921.7997000"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO98"* ]]; then PdBIUVT_LINE_FREQ="1036.9123930"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CO109"* ]]; then PdBIUVT_LINE_FREQ="1151.9854520"; fi
        fi
        if [[ x"$PdBIUVT_LINE_NAME" == x*"CI"* ]]; then
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CII"*"158"* ]]; then PdBIUVT_LINE_FREQ="1900.53690"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CI"*"2-1"* ]]; then PdBIUVT_LINE_FREQ="809.34197"; fi
            if [[ x"$PdBIUVT_LINE_NAME" == x*"CI"*"1-0"* ]]; then PdBIUVT_LINE_FREQ="492.16065"; fi
        fi
        # 
        if [[ x"$PdBIUVT_LINE_FREQ" != x ]]; then
            PdBIUVT_LINE_zRED=$(echo "($PdBIUVT_LINE_FREQ)/($TEMP_FCEN)-1" | bc -l | tail -n 1 | sed 's/^\./0./' | sed 's/^[-]\./-0./') # sed 's/^\./0./' -- http://stackoverflow.com/questions/8402181/how-do-i-get-bc1-to-print-the-leading-zero
            echo    ""
            echo    "******************************************************************"
            echo -n "Line with rest frequency $(printf '%0.3f' $PdBIUVT_LINE_FREQ) GHz "
            echo    "has a redshift of "$(printf '%0.4f' $PdBIUVT_LINE_zRED)
            echo    "******************************************************************"
            echo    ""
        fi
    fi
done
# 
# 
# 
# 
# 
# 
##################################################
# prepare GILDAS mapping init and script and run #
##################################################
PdBIUVT_TEMP_INIT="$PdBIUVT_SAVE.init"
PdBIUVT_TEMP_EXEC="$PdBIUVT_SAVE.map"
PdBIUVT_TEMP_LOGT="$PdBIUVT_SAVE.log"
# 
# loop each object (according to the input radec pairs)
for (( PdBIUVT_OBJI = 0; PdBIUVT_OBJI < "${#PdBIUVT_RAND_OBJT[@]}"; PdBIUVT_OBJI++ )); do
    # 
    PdBIUVT_PosX=$(printf "%0.5f\n" $(echo "(${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]}-($PdBIUVT_RAND_CENT))*3600.0*c($PdBIUVT_DECD_CENT/180*4*a(1))" | bc -l | tail -n 1 | sed 's/^\./0./' | sed 's/^[-]\./-0./')) # RA offset
    PdBIUVT_PosY=$(printf "%0.5f\n" $(echo "(${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]}-($PdBIUVT_DECD_CENT))*3600.0" | bc -l | tail -n 1 | sed 's/^\./0./' | sed 's/^[-]\./-0./')) # DEC offset
    # 
    echo 
    #echo Tel R.A. = $PdBIUVT_RANX_CENT 
    #echo Tel Dec. = $PdBIUVT_DECX_CENT 
    #echo Tel R.A. = $PdBIUVT_RAND_CENT 
    #echo Tel Dec. = $PdBIUVT_DECD_CENT 
    echo Obj R.A. = ${PdBIUVT_RANX_OBJT[$PdBIUVT_OBJI]} 
    echo Obj Dec. = ${PdBIUVT_DECX_OBJT[$PdBIUVT_OBJI]} 
    #echo Obj R.A. = ${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]} 
    #echo Obj Dec. = ${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]} 
    echo Obj R.A. offset = $PdBIUVT_PosX arcsec
    echo Obj Dec. offset = $PdBIUVT_PosY arcsec
    # 
    # write to PdBIUVT_TEMP_INIT
    if [[ $PdBIUVT_OBJI -eq 0 ]]; then
        echo  '! '                                                                                                                  > $PdBIUVT_TEMP_INIT
        echo  '! Task UV_FIT (new version R. Lucas)'                                                                               >> $PdBIUVT_TEMP_INIT
        echo  '! 6 parameters needed for all functions'                                                                            >> $PdBIUVT_TEMP_INIT
        echo  '!'                                                                                                                  >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV Table: "                     UVTABLE$       "'"$PdBIUVT_NAME"'"'                                 >> $PdBIUVT_TEMP_INIT
        echo  'TASK\INTEGER   "Channels: "                     CHANNEL$[2]     '"$PdBIUVT_CHAN_MIN" "$PdBIUVT_CHAN_MAX"            >> $PdBIUVT_TEMP_INIT
        echo  'TASK\REAL      "UV Range: "                     UV_RANGE$[2]    '"0 19600"                                          >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "Result Fits Table: "            RESULT$        "'"${PdBIUVT_SAVE}_uv_fit_res.column"'"'             >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "Residual UV Table: "            RESIDUALS$     "'"${PdBIUVT_SAVE}_uv_fit_res.uvt"'"'                >> $PdBIUVT_TEMP_INIT
        echo  'TASK\INTEGER   "Number of Functions"            NF$             '"${#PdBIUVT_RAND_OBJT[@]}"                         >> $PdBIUVT_TEMP_INIT
        echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
        echo  '! Functions '                                                                                                       >> $PdBIUVT_TEMP_INIT
        echo  '! (POINT, C_GAUSS, E_GAUSS, C_DISK, '                                                                               >> $PdBIUVT_TEMP_INIT
        echo  '!  E_DISK, RING, EXP, POWER-2, POWER-3)'                                                                            >> $PdBIUVT_TEMP_INIT
        echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
        echo  '! --- begin repeat ---'                                                                                             >> $PdBIUVT_TEMP_INIT
    fi
    # 
    # allow parameter to vary/fixed
    PdBIUVT_OBJN=$(printf "%02d" $(echo $PdBIUVT_OBJI+1 | bc))
    PdBIUVT_PosX_Fit=$(echo $PdBIUVT_VARY-1 | bc)
    PdBIUVT_PosY_Fit=$(echo $PdBIUVT_VARY-1 | bc)
    PdBIUVT_DMajor=$(echo $PdBIUVT_SIZE | sed -e 's/[ ][^ ]*//g') # if SIZE contains white space, the separate them for major and minor diameter. 
    PdBIUVT_DMinor=$(echo $PdBIUVT_SIZE | sed -e 's/[^ ]*[ ]//g') # if SIZE contains white space, the separate them for major and minor diameter. 
    PdBIUVT_DMajor_Fit=$(echo $PdBIUVT_VARY_SIZE-1 | bc)
    PdBIUVT_DMinor_Fit=$(echo $PdBIUVT_VARY_SIZE-1 | bc)
    PdBIUVT_PosAngle=$PdBIUVT_POSA
    PdBIUVT_PosAngle_Fit=$(echo $PdBIUVT_VARY_POSA-1 | bc)
    # 
    # <20160629><dzliu> allow size to vary/fixed
    if echo "$PdBIUVT_FUNC" | grep -q -i "POINT"; then
    	PdBIUVT_DMajor=0; PdBIUVT_DMajor_Fit=0
    	PdBIUVT_DMinor=0; PdBIUVT_DMinor_Fit=0
    	PdBIUVT_PosAngle=0; PdBIUVT_PosAngle_Fit=0
    fi
    if echo "$PdBIUVT_FUNC" | grep -q -i "C_GAUSS"; then
    	PdBIUVT_DMinor=0; PdBIUVT_DMinor_Fit=0
    	PdBIUVT_PosAngle=0; PdBIUVT_PosAngle_Fit=0
    fi
    #if echo "$PdBIUVT_FUNC" | grep -q -i "E_GAUSS"; then
    #	# In this case PdBIUVT_SIZE="12.0 6.0", a string include two values separated by a white space. 
    #	PdBIUVT_DMajor=$(echo $PdBIUVT_SIZE | sed -e 's/[ ][^ ]*//g')
    #	PdBIUVT_DMinor=$(echo $PdBIUVT_SIZE | sed -e 's/[^ ]*[ ]//g')
    #fi
    # 
    # Continue to write to PdBIUVT_TEMP_INIT
    echo  '! '                                                                                                                                                                      >> $PdBIUVT_TEMP_INIT
    echo  "! --- $PdBIUVT_OBJN"                                                                                                                                                     >> $PdBIUVT_TEMP_INIT
    echo  '! '                                                                                                                                                                      >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Function"            FUNCT'$PdBIUVT_OBJN'$       '"$PdBIUVT_FUNC"                                                                                        >> $PdBIUVT_TEMP_INIT
    echo  'TASK\REAL      "Parameters"          PARAM'$PdBIUVT_OBJN'$[7]    '$PdBIUVT_PosX $PdBIUVT_PosY 1.0 $PdBIUVT_DMajor $PdBIUVT_DMinor $PdBIUVT_PosAngle 0                    >> $PdBIUVT_TEMP_INIT
    echo  'TASK\REAL      "Starting range"      RANGE'$PdBIUVT_OBJN'$[7]    '0 0 0 0 0 0 0                                                                                          >> $PdBIUVT_TEMP_INIT
    echo  'TASK\INTEGER   "number of starts"    START'$PdBIUVT_OBJN'$[7]    '$PdBIUVT_PosX_Fit $PdBIUVT_PosY_Fit 0 $PdBIUVT_DMajor_Fit $PdBIUVT_DMinor_Fit $PdBIUVT_PosAngle_Fit 0  >> $PdBIUVT_TEMP_INIT
    echo  'TASK\LOGICAL   "Subtract function"   SUBSF'$PdBIUVT_OBJN'$       '$PdBIUVT_RSUB                                                                                          >> $PdBIUVT_TEMP_INIT
    # 
    # Final write to PdBIUVT_TEMP_INIT
    if [[ $(bc <<< $PdBIUVT_OBJI+1) -eq "${#PdBIUVT_RAND_OBJT[@]}" ]]; then
        echo  '! '                                                                                                                                                                      >> $PdBIUVT_TEMP_INIT
        echo  '! --- end repeat ---'                                                                                                                                                    >> $PdBIUVT_TEMP_INIT
        echo  '! '                                                                                                                                                                      >> $PdBIUVT_TEMP_INIT
        echo  'TASK\GO'                                                                                                                                                                 >> $PdBIUVT_TEMP_INIT
        echo  "let name $PdBIUVT_NAME"                        > $PdBIUVT_TEMP_EXEC
        echo  "run uv_fit $PdBIUVT_TEMP_INIT /NOWINDOW"       >> $PdBIUVT_TEMP_EXEC
    fi
done
# 
# DEBUG
# 
# exit
# 
# Run GILDAS/mapping
# 
echo ""
echo "****************************"
echo "Running GILDAS mapping"
echo "****************************"
###echo "@$PdBIUVT_TEMP_EXEC  | mapping > "$PdBIUVT_TEMP_LOGT
###echo "@$PdBIUVT_TEMP_EXEC" | mapping >  $PdBIUVT_TEMP_LOGT
# GOT MAPPING RUNNING PROBLEM 
# can not run multiple mapping simultaneously because mapping wirtes to the same log file $HOME/.gag/log/*
# -nw -nl
##echo "@$PdBIUVT_TEMP_EXEC  | mapping -nw -nl > "$PdBIUVT_TEMP_LOGT
##echo "@$PdBIUVT_TEMP_EXEC" | mapping -nw -nl >  $PdBIUVT_TEMP_LOGT
# still can not run multiple mapping simultaneously because mapping wirtes to the same log file $HOME/.gag/log/uv_fit.gildas
# found a solution by calling uv_fit.exe directly
if [[ -f "$PdBIUVT_TEMP_LOGT" ]];then
    mv "$PdBIUVT_TEMP_LOGT" "$PdBIUVT_TEMP_LOGT.backup"
fi
if [[ $PdBIUVT_PARALLELS -eq 0 ]]; then
    # do not do parallel, just wait for on-going uv_fit
    echo "@$PdBIUVT_TEMP_EXEC | mapping -nw -nl > $PdBIUVT_TEMP_LOGT"
    if ps aux | grep -v 'grep' | grep -q "logs/uv_fit.gildas"; then
        echo -n "Waiting for on-going uv_fit ."
        sleep 2.0
    fi
    while ps aux | grep -v 'grep' | grep -q "logs/uv_fit.gildas"; do
        echo -n "."
        sleep 2.5
    done
    echo ""
    echo "Running uv_fit"
    echo "@$PdBIUVT_TEMP_EXEC" | mapping -nw -nl > "$PdBIUVT_TEMP_LOGT"
else
    # do parallel! directly call $GAG_EXEC_DIR/tasks/uv_fit.exe
    # <TODO> this needs more test and confirmation!
    echo "Running GILDAS mapping in parallel mode"
    if [[ -z $GAG_EXEC_DIR && -f "/opt/local/lib/gildas/x86_64-darwin-gfortran/tasks/uv_fit.exe" ]]; then
        export GAG_EXEC_DIR="/opt/local/lib/gildas/x86_64-darwin-gfortran"
        export GAG_EXEC_SYSTEM="x86_64-darwin-gfortran"
        export GAG_ROOT_DIR="/opt/local/lib/gildas"
        export GAG_PATH="/opt/local/lib/gildas/etc"
    fi
    if [[ -f "$GAG_EXEC_DIR/tasks/uv_fit.exe" ]]; then
        cat "$PdBIUVT_SAVE.init" | grep '^TASK' | grep -v '^TASK\\GO' | perl -p -e 's/.*\s+(\S*)(\$)\S*\s*(.*)/\1\2\3/g' | grep -v '^RES' | perl -p -e 's/\$/\$\n/g' | sed 's/["]//g' | sed 's/^YES$/.TRUE./g' | sed 's/^NO$/.FALSE./g' >  "$PdBIUVT_SAVE.ipar"
        cat "$PdBIUVT_SAVE.init" | grep '^TASK' | grep -v '^TASK\\GO' | perl -p -e 's/.*\s+(\S*)(\$)\S*\s*(.*)/\1\2\3/g' | grep    '^RES' | perl -p -e 's/\$/\$\n/g' | sed 's/["]//g' | sed 's/^YES$/.TRUE./g' | sed 's/^NO$/.FALSE./g' >> "$PdBIUVT_SAVE.ipar"
        echo "" >> "$PdBIUVT_SAVE.ipar"
        echo "" >> "$PdBIUVT_SAVE.ipar"
        echo "" >> "$PdBIUVT_SAVE.ipar"
        echo "# now executing the following command to run gildas mapping uv_fit, this might take a while" >> "$PdBIUVT_SAVE.ipar"
        echo "# cat \"$PdBIUVT_SAVE.ipar\" | \"$GAG_EXEC_DIR/tasks/uv_fit.exe\" > \"$PdBIUVT_TEMP_LOGT\"" >> "$PdBIUVT_SAVE.ipar"
                cat  "$PdBIUVT_SAVE.ipar"  |  tail -n 2
                cat  "$PdBIUVT_SAVE.ipar"  |  "$GAG_EXEC_DIR/tasks/uv_fit.exe"  >  "$PdBIUVT_TEMP_LOGT"
        if tail -n 1 "$PdBIUVT_TEMP_LOGT" | grep -q "F-SYSTEM,  Exit code"; then
            echo "Error! Failed to run cat \"$PdBIUVT_SAVE.ipar\" | \"$GAG_EXEC_DIR/tasks/uv_fit.exe\" > \"$PdBIUVT_TEMP_LOGT\"! Perhaps GILDAS is not set well? Sorry!"
            exit
        fi
    else
        echo "Error! For parallelly runing GILDAS mapping, we need system environment \$GAG_EXEC_DIR, however it is not defined! Exit!"
        exit
    fi
fi
echo ""
echo ""
# 
# loop each object (according to the input radec pairs)
# 
for (( PdBIUVT_OBJI = 0; PdBIUVT_OBJI < "${#PdBIUVT_RAND_OBJT[@]}"; PdBIUVT_OBJI++ )); do
    
    # Get the Result of Velocity
    PdBIUVT_VELO_OBJT=$(grep 'Velocity=' "$PdBIUVT_TEMP_LOGT" | cut -c 60- | sed -e 's/=//g' | tr -s ' ' | cut -d ' ' -f 2)
    
    # Get the Result of Flux
    ##PdBIUVT_TEMP_OBJM=$(bc <<< "${#PdBIUVT_RAND_OBJT[@]}*3") # r.m.s. and N*3 following lines
    ##PdBIUVT_TEMP_TEXT=$(grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' "$PdBIUVT_TEMP_LOGT")
    PdBIUVT_TEMP_OBJJ=$(bc <<< "($PdBIUVT_OBJI+1)")
    #PdBIUVT_TEMP_OBJI=$(bc <<< "($PdBIUVT_OBJI+1)*3+1") # 1+3p, 1+6p, 1+9p is flux # <TODO> NOT ALWAYS # GILDAS mapping -- column x '7+1' /table cont351+362GHz_uv_fit.column
    #PdBIUVT_TEMP_OBJM=$(bc <<< "${#PdBIUVT_RAND_OBJT[@]}*3+1+1") 
    PdBIUVT_TEMP_OBJI="$PdBIUVT_OBJI"
    PdBIUVT_TEMP_OBJM="${#PdBIUVT_RAND_OBJT[@]}" 
    # echo awk "NR%$PdBIUVT_TEMP_OBJM==$PdBIUVT_TEMP_OBJI"
    # PdBIUVT_FMOD_OBJT=$(grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJM==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *FLUX *=(.*) [(](.*)[)]/\1/g')
    # PdBIUVT_FLUX_OBJT=$(grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJM==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *FLUX *=(.*) [(](.*)[)]/\2/g')
    # PdBIUVT_FERR_OBJT=$(grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJM==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *FLUX *=(.*) [(](.*)[)]/\3/g')
                    ##  grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJM==$PdBIUVT_TEMP_OBJI" | perl -p -e 's/ *(.*) *=(.*) [(](.*)[)]/\1 \2 \3/g' > tmp_ObjFlux.$PdBIUVT_TEMP_OBJJ
                      # grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -B  2                 ' r.m.s. *=' | awk "NR%4==1"                                   | perl -p -e 's/.*Velocity *= *(.*)/Velocity   \1/g' > tmp_ObjVelo.$PdBIUVT_TEMP_OBJJ
                        grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -i ' FLUX *='                                        | awk "(NR-1)%${#PdBIUVT_RAND_OBJT[@]}==$PdBIUVT_OBJI" | perl -p -e 's/ *(.*) *=(.*) [(](.*)[)]/\1 \2 \3/g' > tmp_ObjFlux.$PdBIUVT_TEMP_OBJJ
                        grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -i 'Starting minimization on channel.*Velocity.*=.*' | awk "(NR-1)%${#PdBIUVT_RAND_OBJT[@]}==$PdBIUVT_OBJI" | perl -p -e 's/.*Velocity *= *(.*)/Velocity   \1/g' > tmp_ObjVelo.$PdBIUVT_TEMP_OBJJ
    # 
    # echo PdBIUVT_FMOD_OBJT=$PdBIUVT_FMOD_OBJT
    # echo PdBIUVT_FLUX_OBJT=$PdBIUVT_FLUX_OBJT
    # echo PdBIUVT_FERR_OBJT=$PdBIUVT_FERR_OBJT
    # echo PdBIUVT_FUNT_OBJT=$PdBIUVT_FUNT_OBJT
    # exit
    
    # 
    # prepare plot
    rm tmp_ObjFlux 2>/dev/null
    rm tmp_ObjVelo 2>/dev/null
    cp tmp_ObjFlux.$PdBIUVT_TEMP_OBJJ tmp_ObjFlux
    cp tmp_ObjVelo.$PdBIUVT_TEMP_OBJJ tmp_ObjVelo
    
    
    # 
    # print message
    echo "****************************"
    echo "Plotting for object $(($PdBIUVT_OBJI+1))"
    echo "****************************"
    PdBIUVT_NAME_TEX=$(echo $PdBIUVT_NAME | sed -e 's/_/\\_/g')
    
    # 
    # do plot
    # 
sm << EOF
    # set freq_Cen = $PdBIUVT_LINE_FREQ # GHz
    set freq_Ref = $PdBIUVT_FREQ_REF # MHz
    #set velo_Wth = $(echo "(${PdBIUVT_CMAX[$PdBIUVT_OBJI]}-(${PdBIUVT_CMIN[$PdBIUVT_OBJI]})+1)*$(abs $PdBIUVT_VELO_BIN)" | bc -l | tail -n 1 | sed 's/^\./0./') # km/s
    #set freq_Bin = $PdBIUVT_FREQ_BIN # MHz
    #set chan_Ref = $PdBIUVT_CHAN_REF # 
    #set velo_Ref = $PdBIUVT_VELO_REF # km/s
    #set velo_Ref = $PdBIUVT_VELO_REF # km/s
    #set velo_Wid = $PdBIUVT_VELO_BIN # km/s
    set velo_Bin = $PdBIUVT_VELO_BIN # km/s
    #set velo_Off = $PdBIUVT_VELO_REF # km/s
    set ra_Obj = ${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]}
    set de_Obj = ${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]}
    set raX_Obj = '${PdBIUVT_RANX_OBJT[$PdBIUVT_OBJI]}'
    set deX_Obj = '${PdBIUVT_DECX_OBJT[$PdBIUVT_OBJI]}'
    set id_Str = {"$PdBIUVT_NAME_TEX"}
    set velo_low = ${PdBIUVT_VMIN[$PdBIUVT_OBJI]} # $PdBIUVT_VMIN
    set velo_high = ${PdBIUVT_VMAX[$PdBIUVT_OBJI]} # $PdBIUVT_VMAX
    echo set freq_Ref = \$(freq_Ref)
    #echo set velo_Wth = \$(velo_Wth)
    #echo set freq_Ref = $PdBIUVT_FREQ_REF # MHz
    #echo set freq_Bin = $PdBIUVT_FREQ_BIN # MHz
    #echo set chan_Ref = $PdBIUVT_CHAN_REF # 
    #echo set velo_Ref = $PdBIUVT_VELO_REF # km/s
    echo set velo_Bin = \$(velo_Bin)
    #echo set velo_Off = $PdBIUVT_VELO_REF # km/s
    echo set ra_Obj = \$(ra_Obj)
    echo set de_Obj = \$(de_Obj)
    echo set raX_Obj = '\$(raX_Obj)'
    echo set deX_Obj = '\$(deX_Obj)'
    echo set id_Str = '$PdBIUVT_NAME_TEX'
    echo set velo_low = \$(velo_low)
    echo set velo_high = \$(velo_high)
    echo macro read \""$(dirname $0)/pdbi-uvt-go-uvfit.sm"\" goUVFIT_PlotVeloAmpl
    macro read "$(dirname $0)/pdbi-uvt-go-uvfit.sm" goUVFIT_PlotVeloAmpl
    
EOF
    
    # copy "tmp_doUVFIT" to "tmp_doUVFIT.$OBJI"
    if [[ "${#PdBIUVT_RAND_OBJT[@]}" -gt 1 ]]; then
        echo "cp tmp_doUVFIT.eps $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.eps"
        echo "cp tmp_doUVFIT.log $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.log"
        echo "cp tmp_doUVFIT.txt $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.txt"
        echo "cp tmp_doUVFIT.dat $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.dat"
              cp tmp_doUVFIT.eps $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.eps
              cp tmp_doUVFIT.log $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.log
              cp tmp_doUVFIT.txt $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.txt
              cp tmp_doUVFIT.dat $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.dat
    else
      if [[ x"$PdBIUVT_SAVE" != x"tmp_doUVFIT" ]]; then
        echo "cp tmp_doUVFIT.eps $PdBIUVT_SAVE.eps"
        echo "cp tmp_doUVFIT.log $PdBIUVT_SAVE.log"
        echo "cp tmp_doUVFIT.txt $PdBIUVT_SAVE.txt"
        echo "cp tmp_doUVFIT.dat $PdBIUVT_SAVE.dat"
              cp tmp_doUVFIT.eps $PdBIUVT_SAVE.eps
              cp tmp_doUVFIT.log $PdBIUVT_SAVE.log
              cp tmp_doUVFIT.txt $PdBIUVT_SAVE.txt
              cp tmp_doUVFIT.dat $PdBIUVT_SAVE.dat
      fi
    fi
    # open tmp_doUVFIT.eps
    
done


