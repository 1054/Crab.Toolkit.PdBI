#!/bin/bash
# 
# Aim:
#    Input uvt
#    Search for line emitter
# 
# Last update:
#    2017-04-09 Initialized
# 



# 
# LANG
# 
LANG=C

# 
# CHECK bc
# 
if [[ $(bc <<< 1+2 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool bc not found! Exit!
    exit -1
fi

# 
# CHECK awk
# 
if [[ $(echo "Go" | awk "NR==1" 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool awk not found! Exit!
    exit -1
fi

# 
# CHECK GILDAS mapping
# 
if [[ $(echo "say hello" | mapping 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! GILDAS mapping not found! Exit!"
    exit -1
fi

# 
# CHECK radec2degree
# 
if [[ $(radec2degree 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! radec2degree not found! It should be included in this software! Please contact dzliu. "
    exit -1
fi

# 
# CHECK degree2radec
# 
if [[ $(degree2radec 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! degree2radec not found! It should be included in this software! Please contact dzliu. "
    exit -1
fi

# 
# CHECK degree2radec
# 
if [[ $(CrabTableReadInfo 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! CrabTableReadInfo not found! It should be included in this software! Please contact dzliu. "
    exit -1
fi



# 
# Check input arguments
# 
Usage() {
    echo "Usage: crab-uvt-line-search -name a.uvt -sigma 5.0 -bin 500 -map-size 300 -fov-size 45"
    exit -1
}
if [[ $# -eq 0 ]]; then
    Usage
    exit
fi



# 
# SOURCE pdbi-uvt-core-arg
# 
if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5" ]]; then
    source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5" "$@"
else
    echo ""
    echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5\"!"
    echo ""
    exit 1
fi



# 
# Check UVT name and Object RADec
# 
if [[ ${#PdBIUVT_NAME[@]} -eq 0 ]]; then
    Usage
    exit
fi



# 
# Parse input arguments
# 
default_velo_width="300.0"
default_velo_step="150.0"
default_map_size="300" # pixel, 512 is 60 arcsec
default_fov_size="45" # arcsec
default_sigma_threshold="4.4" #<TODO># 
default_deblend_level="10"



# 
# Loop input uv tables
# 
for (( tk=0; tk<${#PdBIUVT_NAME[@]}; tk++ )); do
    
    
    
    # 
    # SOURCE pdbi-uvt-core-cvf
    # 
    if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-cvf-v5" ]]; then
        source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-cvf-v5" "${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}"
    else
        echo ""
        echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-cvf-v5\"!"
        echo ""
        exit 1
    fi
    
    
    
    # 
    # SOURCE pdbi-uvt-core-rad
    # 
    if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-rad-v5" ]]; then
        source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-rad-v5" "${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}"
    else
        echo ""
        echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-rad-v5\"!"
        echo ""
        exit 1
    fi
    
    
    
    # 
    # Check Telescope pointing information
    # 
    if [[ x"$PdBIUVT_RAND_CENT" == x"" || x"$PdBIUVT_DECD_CENT" == x"" ]]; then
        echo ""; echo "Error! Could not find telescope pointing information in the uv table file! Please input telescope pointing like \"-pointing 12:36:20 62:20:00\"!"; echo ""
        exit 4
    fi
    
    
    
    # 
    # Set default output directory
    # 
    if [[ ${#PdBIUVT_SAVE[@]} -le $tk ]]; then
        PdBIUVT_SAVE+=($(basename "${PdBIUVT_NAME[tk]}")"_crab_uvt_line_search")
        echo "Warning! Output directory name was not defined, we will set it as \"${PdBIUVT_SAVE[tk]}\"!"
    fi
    if [[ x"${PdBIUVT_SAVE[tk]}" == x || x"${PdBIUVT_SAVE[tk]}" == x"tmp_pdbi_uvt" || x"${PdBIUVT_SAVE[tk]}" == x"tmp_pdbi_uvt_run_uv_fit" ]]; then
        PdBIUVT_SAVE[tk]=$(basename "${PdBIUVT_NAME[tk]}")"_crab_uvt_line_search"
        echo "Warning! Output directory name was not defined, we will set it as \"${PdBIUVT_SAVE[tk]}\"!"
    fi
    if [[ ! -d "${PdBIUVT_SAVE[tk]}" ]]; then
        mkdir "${PdBIUVT_SAVE[tk]}"
    fi
    # 
    # Backup existing output file
    # 
    
    
    
    # 
    # Print message
    # 
    echo ""
    echo "*********"
    echo "* hello *"
    echo "*********"
    echo "PdBIUVT_SAVE[tk] = ${PdBIUVT_SAVE[tk]}"
    echo "PdBIUVT_VELO_MIN = $PdBIUVT_VELO_MIN"
    echo "PdBIUVT_VELO_MAX = $PdBIUVT_VELO_MAX"
    echo "--"
    
    velo_count=1
    velo_start="$PdBIUVT_VELO_MIN"
    #velo_width="300.0"
    #velo_step="150.0"
    #map_size="300" # pixel, 512 is 60 arcsec
    #fov_size="45" # arcsec
    #sigma_threshold="4.4" #<TODO># 
    if [[ ${#PdBIUVT_LINE_SEARCH_WIDTH[@]} -gt $tk ]]; then
        velo_width="${PdBIUVT_LINE_SEARCH_BIN_WIDTH[$tk]}"
    else
        velo_width="$default_velo_width"
    fi
    if [[ ${#PdBIUVT_LINE_SEARCH_STEP[@]} -gt $tk ]]; then
        velo_step="${PdBIUVT_LINE_SEARCH_BIN_STEP[$tk]}"
    else
        velo_step="$default_velo_step"
    fi
    if [[ ${#PdBIUVT_MAP_SIZE[@]} -gt $tk ]]; then
        map_size="${PdBIUVT_MAP_SIZE[$tk]}"
    else
        map_size="$default_map_size"
    fi
    if [[ ${#PdBIUVT_FOV_SIZE[@]} -gt $tk ]]; then
        fov_size="${PdBIUVT_FOV_SIZE[$tk]}"
    else
        fov_size="$default_fov_size"
    fi
    if [[ ${#PdBIUVT_LINE_SEARCH_SIGMA[@]} -gt $tk ]]; then
        sigma_threshold="${PdBIUVT_LINE_SEARCH_SIGMA[$tk]}"
    else
        sigma_threshold="$default_sigma_threshold"
    fi
    if [[ ${#PdBIUVT_LINE_SEARCH_BLEND[@]} -gt $tk ]]; then
        deblend_level="${PdBIUVT_LINE_SEARCH_BLEND[$tk]}"
    else
        deblend_level="$default_deblend_level"
    fi
    
    # patch for continuum uvt
    continuum_mode=0
    if [[ "$PdBIUVT_VELO_MIN" == "$PdBIUVT_VELO_MAX" && $(awk "BEGIN {if(($PdBIUVT_VELO_MIN)*($PdBIUVT_VELO_MIN)>1e-6) print 1; else print 0;}") == "0" ]]; then
        continuum_mode=1
    fi
    if [[ $continuum_mode -eq 1 ]]; then
        PdBIUVT_VELO_MAX="$velo_width"
    fi
    
    while [[ $(awk "BEGIN {if(($velo_start)<($PdBIUVT_VELO_MAX)) print 1; else print 0;}") -eq 1 ]]; do
        velo_end=$(awk "BEGIN {print ($velo_start)+($velo_width)}")
        if [[ $(awk "BEGIN {if(($velo_end)>=($PdBIUVT_VELO_MAX)) print 1; else print 0;}") -eq 1 ]]; then
            velo_end="$PdBIUVT_VELO_MAX"
        fi
        
        if [[ $(ls -1f "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}."* 2>/dev/null | wc -l) -ne 0 ]]; then
            if [[ $(grep "Exit code" "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}."*".log" 2>/dev/null | wc -l) -ne 0 ]]; then
                echo "Found \"Exit code\" in log files, will remove old results!"
                echo "rm" "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}."* 2>/dev/null
                rm "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}."* 2>/dev/null
            fi
        fi
        
        # run uv_average to average every velo_width km/s bin
        if [[ ! -f "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}.uvt" ]]; then
            # patch for continuum uvt
            if [[ $continuum_mode -eq 1 ]]; then
                echo "cp \"${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}\" \"${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}.uvt\""
                cp "${PdBIUVT_NAME[tk]}.${PdBIUVT_TYPE[tk]}" "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}.uvt"
            else
                echo "pdbi-uvt-go-average -name \"${PdBIUVT_NAME[tk]}\" -out \"${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}.uvt\" -vrange $velo_start $velo_end"
                pdbi-uvt-go-average -name "${PdBIUVT_NAME[tk]}" -out "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}.uvt" -vrange "$velo_start" "$velo_end" \
                                                                   > "${PdBIUVT_SAVE[tk]}/velo_bin_${velo_count}.uv_average.log"
            fi
        fi
        
        cd "${PdBIUVT_SAVE[tk]}/"
        
        #rm "velo_bin_${velo_count}.lmv"* "velo_bin_${velo_count}.lmv_bscale.detect_blob"* 2>/dev/null
        
        if [[ ! -f "velo_bin_${velo_count}.lmv" || ! -f "velo_bin_${velo_count}.lmv.fits" || ! -f "velo_bin_${velo_count}.uvt.uv_map.log" ]]; then
            echo "pdbi-uvt-go-uvmap -name \"velo_bin_${velo_count}.uvt\" -size $fov_size -map_size $map_size"
            pdbi-uvt-go-uvmap -name "velo_bin_${velo_count}.uvt" -size $fov_size -map_size $map_size | sed -e 's/[^[[:print:]]]//g' \
                                  > "velo_bin_${velo_count}.uvt.uv_map.log.log"
        fi
        
        if [[ ! -f "velo_bin_${velo_count}.lmv" ]]; then
            echo "Error! Failed to create \"velo_bin_${velo_count}.uvt\"!"
            echo "Please check \"velo_bin_${velo_count}.uvt.uv_map.log\"!"
            echo "Current directory \"$(pwd -P)\"!"
            exit
        fi
        
        #data_noise=$(cat "velo_bin_${velo_count}.uvt.uv_map.log" | grep "^NOISE" | grep "=")
        data_noise=$(CrabTableReadInfo "velo_bin_${velo_count}.uvt.uv_map.log" "NOISE" "!")
        echo "data_noise = $data_noise Jy"
        if [[ x"$data_noise" == x ]]; then
            echo "Error! Failed to get data_noise for \"velo_bin_${velo_count}.uvt\"!"
            echo "Please check \"velo_bin_${velo_count}.uvt.uv_map.log\" and \"velo_bin_${velo_count}.uvt.uv_map.log.log\"!"
            echo "Current directory \"$(pwd -P)\"!"
            exit
        fi
        
        # convert gildas lmv converted fits image BSCALE
        if [[ ! -f "velo_bin_${velo_count}.lmv_bscale.fits" ]]; then
            data_bscale=$(gethead "velo_bin_${velo_count}.lmv.fits" BSCALE)
            CrabFitsImageArithmetic "velo_bin_${velo_count}.lmv.fits" "times" "$data_bscale" "velo_bin_${velo_count}.lmv_bscale.fits" \
                                  > "velo_bin_${velo_count}.lmv_bscale.fits.log" 2>&1
            sethead "velo_bin_${velo_count}.lmv_bscale.fits" BSCALE=1
        fi
        
        # convert gildas lmv converted fits image BZERO
        if [[ ! -f "velo_bin_${velo_count}.lmv_bzero.fits" ]]; then
            data_bzero=$(gethead "velo_bin_${velo_count}.lmv.fits" BZERO)
            CrabFitsImageArithmetic "velo_bin_${velo_count}.lmv_bscale.fits" "+" "$data_bzero" "velo_bin_${velo_count}.lmv_bzero.fits" \
                                  > "velo_bin_${velo_count}.lmv_bzero.fits.log" 2>&1
            sethead "velo_bin_${velo_count}.lmv_bzero.fits" BZERO=0
        fi
        
        # invert gildas lmv converted fits image BSCALE (negative image)
        if [[ ! -f "velo_bin_${velo_count}.lmv_invert.fits" ]]; then
            #<DEBUG># 
            #rm "velo_bin_${velo_count}.lmv_invert"*
            #<DEBUG># 
            CrabFitsImageArithmetic "velo_bin_${velo_count}.lmv_bzero.fits" "times" "0.0" "velo_bin_${velo_count}.lmv_zero.fits" \
                                  > "velo_bin_${velo_count}.lmv_zero.fits.log" 2>&1
            sethead "velo_bin_${velo_count}.lmv_zero.fits" BZERO=0
            CrabFitsImageArithmetic "velo_bin_${velo_count}.lmv_zero.fits" "minus" "velo_bin_${velo_count}.lmv_bzero.fits" "velo_bin_${velo_count}.lmv_invert.fits" \
                                  > "velo_bin_${velo_count}.lmv_invert.fits.log" 2>&1
        fi
        
        # perform blob search on both lmv_bscale and lmv_invert fits images <20170417><dzliu><edaddi>
        #lmv_types=(lmv_bscale)
        lmv_types=(lmv_bzero)
        if [[ $* == *"-do-negative"* ]]; then
            lmv_types+=(lmv_invert)
        fi
        for lmv_type in ${lmv_types[@]}; do
            # check previous blob detect results
            blob_overwrite=0
            if [[ $* == *"-overwrite"* ]]; then
                blob_overwrite=1
            fi
            if [[ ! -f "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh" ]]; then
                # prepare ds9 script
                echo "#!/bin/bash" > "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                echo "#" >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                echo "" >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                echo "cd \$(dirname \"\${BASH_SOURCE[0]}\")" >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                echo "" >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                echo "ds9 -title \"velo_bin_${velo_count}\" \"velo_bin_${velo_count}.lmv.fits\" -regions load \"velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.reg\"" \
                        >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                echo "" >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                chmod +x "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.sh"
                blob_overwrite=1
            fi
            if [[ ! -f "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.reg" || $blob_overwrite -eq 1 ]]; then
                # now try to find 4.5-sigma peaks in each velo_bin_*.lmv.fits image
                detect_threshold=$(awk "BEGIN {print ($sigma_threshold*($data_noise));}")
                echo "detect_threshold = $detect_threshold Jy"
                echo "CrabBlobDetector \"velo_bin_${velo_count}.${lmv_type}.fits\" -detect-threshold $detect_threshold  -deblend-level $deblend_level"
                CrabBlobDetector "velo_bin_${velo_count}.${lmv_type}.fits" -detect-threshold "$detect_threshold"  -deblend-level "$deblend_level" \
                           > "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" 2>&1
                cp "ds9.reg" "velo_bin_${velo_count}.${lmv_type}.detect_blob.ds9.reg"
                blob_overwrite=1
            fi
            if [[ ! -f "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" ]]; then
                echo "Error! Failed to run \"CrabBlobDetector\" and output \"velo_bin_${velo_count}.${lmv_type}.detect_blob.log\"!"
                echo "Please check \"velo_bin_${velo_count}.${lmv_type}.detect_blob.log\"!"
                echo "Current directory \"$(pwd -P)\"!"
                exit
            fi
            
            # count blobs
            blob_num=$(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" | grep "^Computing xc = " | wc -l)
            
            # check blob txt, determine fit simultaneously or separately
            blob_uv_fit_separ=0
            blob_txt_check_num=$(ls -1f "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.result.obj_"*".txt" 2>/dev/null | wc -l)
            if [[ $blob_num -eq 0 ]]; then
                echo "no blob detected"
            fi
            if [[ $blob_num -gt 0 && $blob_txt_check_num -eq 0 && $blob_overwrite -eq 0 ]]; then
                echo "* "
                echo "* Warning! Blob uv_fit result *.uv_fit.result.obj_*.txt was not found! We will run uv_fit anyway!"
                echo "* Current directory \"$(pwd -P)\""
                echo "* "
                blob_overwrite=1
            fi
            if [[ $blob_num -gt 0 && $blob_txt_check_num -gt 0 && $blob_txt_check_num -ne $blob_num ]]; then
                echo "* "
                echo "* Warning! Blob uv_fit result number does not match blob number in log file! Perhaps it is because of too many blobs fitted with uv_fit simultaneously. Will try to run uv_fit separately!"
                echo "* Current directory \"$(pwd -P)\""
                echo "* "
                blob_overwrite=1
                blob_uv_fit_separ=1
            fi
            if [[ $blob_num -gt 6 ]]; then
                echo "* "
                echo "* Warning! Blob number is larger than 6! We will run uv_fit separately!"
                echo "* Current directory \"$(pwd -P)\""
                echo "* "
                blob_uv_fit_separ=1
            fi
            
            # get blobs
            if [[ $blob_overwrite -ge 1 ]]; then
                blob_xc=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" | grep "^Computing xc = " | sed -e 's/Computing xc = //g' | tr -s ' ' | sed -e 's/^ *//g' | sed -e 's/ *$//g'))
                blob_yc=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" | grep "^Computing yc = " | sed -e 's/Computing yc = //g' | tr -s ' ' | sed -e 's/^ *//g' | sed -e 's/ *$//g'))
                blob_fc=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" | grep "^Computing fc = " | sed -e 's/Computing fc = //g' | tr -s ' ' | sed -e 's/^ *//g' | sed -e 's/ *$//g'))
                blob_snr=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" | grep "^Computing snr = " | sed -e 's/Computing snr = //g' | tr -s ' ' | sed -e 's/^ *//g' | sed -e 's/ *$//g'))
                blob_rms=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.log" | grep "^Computing rms = " | sed -e 's/Computing rms = //g' | tr -s ' ' | sed -e 's/^ *//g' | sed -e 's/ *$//g'))
                #echo "blob_xc = ${blob_xc[@]}"
                #echo "blob_yc = ${blob_yc[@]}"
                
                # convert xy2sky
                if [[ -f "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.input.txt" ]]; then
                    rm "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.input.txt"
                fi
                for (( iblob=0; iblob<${#blob_xc[@]}; iblob++ )); do
                    printf "%15d %15d\n" "${blob_xc[iblob]}" "${blob_yc[iblob]}" >> "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.input.txt"
                done
                if [[ -f "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.input.txt" ]]; then
                    xy2sky -d -n 10 "velo_bin_${velo_count}.${lmv_type}.fits" @"velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.input.txt" \
                           > "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.output.txt"
                    if [[ -f "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.output.txt" ]]; then
                        # Got some blobs
                        blob_ra=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.output.txt" | tr -s ' ' | sed -e 's/^ *//g' | cut -d ' ' -f 1))
                        blob_dec=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.output.txt" | tr -s ' ' | sed -e 's/^ *//g' | cut -d ' ' -f 2))
                        blob_radec=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.xy2sky.output.txt" | tr -s ' ' | sed -e 's/^ *//g' | cut -d ' ' -f 1,2))
                        
                        # run uvfit
                        if [[ $blob_uv_fit_separ -ne 1 ]]; then
                            # run uvfit simultaneously for all blobs (note that the blob_num should not be larger than 11, limited by GILDAS/MAPPING)
                            echo "pdbi-uvt-go-uvfit-v5 -name \"../${PdBIUVT_NAME[tk]}\" -out \"velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit\" -radec ${blob_radec[@]} -vrange $velo_start $velo_end -parallel "
                            pdbi-uvt-go-uvfit-v5 -name "../${PdBIUVT_NAME[tk]}" -out "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit" -radec ${blob_radec[@]} -vrange $velo_start $velo_end -parallel \
                                                                                   > "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.log.log"
                            frange=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.log.log" | grep "Selecting Freq. range:" | perl -p -e 's/Selecting Freq. range:[ ]+([0-9.+-]+)[ ]+([0-9.+-]+).*/\1 \2/g'))
                        fi
                        
                        # plot uvfit
                        for (( iobj=1; iobj<=${#blob_ra[@]}; iobj++ )); do
                            
                            if [[ $blob_uv_fit_separ -eq 1 ]]; then
                                # run uvfit separately for each blob
                                echo "pdbi-uvt-go-uvfit-v5 -name \"../${PdBIUVT_NAME[tk]}\" -out \"velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.run.obj_${iobj}\" -radec ${blob_ra[$((iobj-1))]} ${blob_dec[$((iobj-1))]} -vrange $velo_start $velo_end -parallel"
                                pdbi-uvt-go-uvfit-v5 -name "../${PdBIUVT_NAME[tk]}" -out "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.run.obj_${iobj}" -radec ${blob_ra[$((iobj-1))]} ${blob_dec[$((iobj-1))]} -vrange $velo_start $velo_end -parallel \
                                                                                       > "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.run.obj_${iobj}.log.log"
                                frange=($(cat "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.run.obj_${iobj}.log.log" | grep "Selecting Freq. range:" | perl -p -e 's/Selecting Freq. range:[ ]+([0-9.+-]+)[ ]+([0-9.+-]+).*/\1 \2/g'))
                                cp "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.run.obj_${iobj}.result.obj_1.txt" \
                                   "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.result.obj_${iobj}.txt"
                            fi
                            
                            echo "pdbi-uvt-go-plot-uvfit-result-spectrum \"velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.result.obj_${iobj}.txt\" -frange ${frange[@]}"
                            pdbi-uvt-go-plot-uvfit-result-spectrum "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.result.obj_${iobj}.txt" -frange ${frange[@]} \
                                                                        > "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotfit.obj_${iobj}.log"
                            cp pdbi_uvt_go_plot_uvfit_result_spectrum.sm  "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotfit.obj_${iobj}.sm"
                            cp pdbi_uvt_go_plot_uvfit_result_spectrum.eps "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotfit.obj_${iobj}.eps"
                            cp pdbi_uvt_go_plot_uvfit_result_spectrum.pdf "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotfit.obj_${iobj}.pdf"
                            
                            echo "pdbi-uvt-go-plot-uvfit-result-image \"velo_bin_${velo_count}.uvt\" -size $fov_size -radec ${blob_ra[$((iobj-1))]} ${blob_dec[$((iobj-1))]}"
                            pdbi-uvt-go-plot-uvfit-result-image "velo_bin_${velo_count}.uvt" -size $fov_size -radec ${blob_ra[$((iobj-1))]} ${blob_dec[$((iobj-1))]} \
                                                                     > "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotmap.obj_${iobj}.log"
                            cp pdbi_uvt_go_plot_uvfit_result_image.map "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotmap.obj_${iobj}.map"
                            cp pdbi_uvt_go_plot_uvfit_result_image.eps "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotmap.obj_${iobj}.eps"
                            cp pdbi_uvt_go_plot_uvfit_result_image.pdf "velo_bin_${velo_count}.${lmv_type}.detect_blob.uv_fit.plotmap.obj_${iobj}.pdf"
                            
                        done
                        
                    fi
                fi
                
                echo "--"
                
            else
                
                echo "Found existing \"velo_bin_${velo_count}.${lmv_type}.detect_blob.*\"!"
                echo "Will skip blob detecting and continue!"
                echo "--"
                
            fi
            
        done
        
        cd "../"
        
        velo_start=$(awk "BEGIN {print ($velo_start)+($velo_step)}")
        velo_count=$(($velo_count+1))
        if [[ $(awk "BEGIN {if(($velo_end)>=($PdBIUVT_VELO_MAX)) print 1; else print 0;}") -eq 1 ]]; then
            break
        fi
    done
    
    
    
    
done






















