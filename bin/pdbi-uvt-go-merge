#!/bin/bash
# 
# Input RA Dec
# Output spec & uv_average
# 
# Last update:
#    2017-03-30 using "pdbi-uvt-core-arg-v5"
# 
# 



# 
# Uage
# 
usage() {
    echo "Usage: "
    echo "   pdbi-uvt-go-merge -name UV_TABLE_NAME_1 UV_TABLE_NAME_2 [UV_TABLE_NAME_3 [UV_TABLE_NAME_4]] -out UV_TABLE_NEW [-keep-files]"
    echo "   pdbi-uvt-go-merge -name UV_TABLE_NAME_1 UV_TABLE_NAME_2 [UV_TABLE_NAME_3 [UV_TABLE_NAME_4]] -out UV_TABLE_NEW [-keep-files] [-weight 0.5 0.5 1.0 1.0]"
    echo "   pdbi-uvt-go-merge -name UV_TABLE_NAME_1 UV_TABLE_NAME_2 [UV_TABLE_NAME_3 [UV_TABLE_NAME_4]] -out UV_TABLE_NEW [-keep-files] [-factor 0.5 0.5 1.0 1.0]"
    echo "   pdbi-uvt-go-merge -name UV_TABLE_NAME_1 UV_TABLE_NAME_2 [UV_TABLE_NAME_3 [UV_TABLE_NAME_4]] -out UV_TABLE_NEW [-clean-files] [-continuum-mode]"
    echo ""
}



# 
# SOURCE pdbi-uvt-core-arg
# 
if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5" ]]; then
    source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5" "$@"
else
    echo ""
    echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5\"!"
    echo ""
    exit 1
fi



# 
# Check input parameters -- uvt file name
# 
if [[ ${#PdBIUVT_NAME[@]} -le 1 ]]; then
    usage; exit
fi



# 
# Make sure weighting array has the same dimension as the name array
# 
while [[ ${#PdBIUVT_UVMERGE_WEIGHT[@]} -lt ${#PdBIUVT_NAME[@]} ]]; do
    PdBIUVT_UVMERGE_WEIGHT+=("1.0")
done
while [[ ${#PdBIUVT_UVMERGE_FACTOR[@]} -lt ${#PdBIUVT_NAME[@]} ]]; do
    PdBIUVT_UVMERGE_FACTOR+=("1.0")
done



# 
# Print input uvtable list
# 
echo PdBIUVT_NAME=${PdBIUVT_NAME[*]}
echo PdBIUVT_SAVE=${PdBIUVT_SAVE[0]}
echo PdBIUVT_UVMERGE_WEIGHT=${PdBIUVT_UVMERGE_WEIGHT[*]}
echo PdBIUVT_UVMERGE_FACTOR=${PdBIUVT_UVMERGE_FACTOR[*]}



# 
# Set default output file name
# 
if [[ ${#PdBIUVT_SAVE[@]} -eq 0 ]]; then
    PdBIUVT_SAVE+=("${PdBIUVT_NAME[0]}-Merged")
    echo ""; echo "Warning! Output name was not given, setting to \"${PdBIUVT_SAVE[0]}.uvt\""; echo ""
fi
if [[ x"${PdBIUVT_SAVE[0]}" == x || x"${PdBIUVT_SAVE[0]}" == x"tmp_pdbi_uvt" ]]; then 
    PdBIUVT_SAVE[0]="${PdBIUVT_NAME[0]}-Merged"
    echo ""; echo "Warning! Output name was not given, setting to \"${PdBIUVT_SAVE[0]}.uvt\""; echo ""
fi
# 
# Remove suffix
# 
if [[ x"${PdBIUVT_SAVE[0]}" == x*".uvt" ]]; then
    PdBIUVT_SAVE[0]=$(echo "${PdBIUVT_SAVE[0]}" | sed -e 's/\.uvt$//g')
fi
if [[ x"${PdBIUVT_SAVE[0]}" == x*".UVT" ]]; then
    PdBIUVT_SAVE[0]=$(echo "${PdBIUVT_SAVE[0]}" | sed -e 's/\.UVT$//g')
fi
# 
# Backup existing output file
# 
if [[ -f "${PdBIUVT_SAVE[0]}.uvt" ]]; then
    echo "Warning! Found existing \"${PdBIUVT_SAVE[0]}.uvt\"! Backup as \"${PdBIUVT_SAVE[0]}.uvt.backup\"!"
    mv "${PdBIUVT_SAVE[0]}.uvt" "${PdBIUVT_SAVE[0]}.uvt.backup"
fi



# 
# Loop each two pairs of the input uv tables, i starts from 1.
# 
for (( i=1; i<${#PdBIUVT_NAME[@]}; i++ )); do
    # 
    # if type is uvtable
    # 
    if [[ 1 == 1 ]]; then
        # 
        # loop each 2 uv table to merge
        # 
        # prepare gildas/mapping init and script and run
        # 
        if [[ $i -eq 1 ]]; then 
        PdBIUVT_TEMP_TAB1="${PdBIUVT_NAME[i-1]}.${PdBIUVT_TYPE[i-1]}"
        else
        PdBIUVT_TEMP_TAB1="${PdBIUVT_SAVE[0]}."$((i-1))".uvt"
        fi
        PdBIUVT_TEMP_TAB2="${PdBIUVT_NAME[i]}.${PdBIUVT_TYPE[i]}"
        PdBIUVT_TEMP_TAB3="${PdBIUVT_SAVE[0]}.$i.uvt"
        # 
        #PdBIUVT_TEMP_WEIGHT="0.0" # note that the weight is only applied to TAB1 for each uv_merge run.
        #for (( j=0; j<$i; j++ )); do
        #    PdBIUVT_TEMP_WEIGHT=$(awk "BEGIN {print ($PdBIUVT_TEMP_WEIGHT)+(${PdBIUVT_UVMERGE_WEIGHT[j]});}")
        #done
        #PdBIUVT_TEMP_WEIGHT=$(awk "BEGIN {print ($PdBIUVT_TEMP_WEIGHT)/(${PdBIUVT_UVMERGE_WEIGHT[i]});}")
        PdBIUVT_TEMP_WEIGHT=$(awk "BEGIN {print (${PdBIUVT_UVMERGE_WEIGHT[i-1]})/(${PdBIUVT_UVMERGE_WEIGHT[i]});}")
        # 
        #PdBIUVT_TEMP_FACTOR="${PdBIUVT_UVMERGE_FACTOR[i-1]}" # note that the factor is only applied to TAB1 for each uv_merge run.
        #for (( j=$i; j<${#PdBIUVT_UVMERGE_FACTOR[@]}; j++ )); do
        #    PdBIUVT_TEMP_FACTOR=$(awk "BEGIN {print ($PdBIUVT_TEMP_FACTOR)/(${PdBIUVT_UVMERGE_FACTOR[j]});}")
        #done
        PdBIUVT_TEMP_FACTOR=$(awk "BEGIN {print (${PdBIUVT_UVMERGE_FACTOR[i-1]})/(${PdBIUVT_UVMERGE_FACTOR[i]});}")
        # 
        #                    (w1/w2)*(a1/a2) * f1 + 1 * f2
        # (w2/w3)*(a2/a3) * ((w1/w2)*(a1/a2) * f1 + 1 * f2) + 1 * f3
        #=(w2/w3)*(a2/a3) *  (w1/w2)*(a1/a2) * f1
        # 
        # 
        PdBIUVT_TEMP_INIT="${PdBIUVT_SAVE[0]}.$i.init"
        PdBIUVT_TEMP_EXEC="${PdBIUVT_SAVE[0]}.$i.map"
        PdBIUVT_TEMP_LOGT="${PdBIUVT_SAVE[0]}.$i.log"
        echo  '! '                                                                                            >  $PdBIUVT_TEMP_INIT
        echo  '! Task UV_MERGE'                                                                               >> $PdBIUVT_TEMP_INIT
        echo  '!'                                                                                             >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV table 1"                  TABLE_IN$      "'$PdBIUVT_TEMP_TAB1'"'            >> $PdBIUVT_TEMP_INIT
        echo  'TASK\REAL      "Weighting 1"                   WEIGHT$       ' $PdBIUVT_TEMP_WEIGHT            >> $PdBIUVT_TEMP_INIT
        echo  'TASK\REAL      "Multipling 1"                  FACTOR$       ' $PdBIUVT_TEMP_FACTOR            >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV table 2"                 TABLE_REF$      "'$PdBIUVT_TEMP_TAB2'"'            >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV table out"               TABLE_OUT$      "'$PdBIUVT_TEMP_TAB3'"'            >> $PdBIUVT_TEMP_INIT
        echo  'TASK\INTEGER   "Continuum Mode"                  MODE$       ' $PdBIUVT_UVMERGE_CONT_MODE      >> $PdBIUVT_TEMP_INIT
        echo  'TASK\GO'                                                                                       >> $PdBIUVT_TEMP_INIT
        echo  "run uv_merge $PdBIUVT_TEMP_INIT /NOWINDOW" > $PdBIUVT_TEMP_EXEC
        # or apply the last "-factor" if it is not 1.0
        if [[ $i -eq $((${#PdBIUVT_NAME[@]}-1)) ]]; then 
            if [[ $(awk "BEGIN {if((${PdBIUVT_UVMERGE_FACTOR[i]}-1.0)**2 > 1e-5) print 1; else print 0; }") -eq 1 ]]; then
                PdBIUVT_TEMP_INIT="${PdBIUVT_SAVE[0]}.$i.apply.final.factor.init"
                echo  '! '                                                                             >  $PdBIUVT_TEMP_INIT
                echo  '! Task UV_MULT'                                                                 >> $PdBIUVT_TEMP_INIT
                echo  '! '                                                                             >> $PdBIUVT_TEMP_INIT
                echo  'TASK\CHARACTER "UV table"     UV_TABLE$      "'$PdBIUVT_TEMP_TAB3'"'            >> $PdBIUVT_TEMP_INIT
                echo  'TASK\REAL "Multipling U"         MULTA$      ' 1                                >> $PdBIUVT_TEMP_INIT
                echo  'TASK\REAL "Multipling V"         MULTB$      ' 1                                >> $PdBIUVT_TEMP_INIT
                echo  'TASK\REAL "Multipling Intensity" MULTC$      ' ${PdBIUVT_UVMERGE_FACTOR[i]}     >> $PdBIUVT_TEMP_INIT
                echo  'TASK\GO'                                                                        >> $PdBIUVT_TEMP_INIT
                echo  "run uv_mult $PdBIUVT_TEMP_INIT /NOWINDOW" >> $PdBIUVT_TEMP_EXEC
            fi
        fi
        echo -n "Merging \"$PdBIUVT_TEMP_TAB1\" and \"$PdBIUVT_TEMP_TAB2\" to \"$PdBIUVT_TEMP_TAB3\" (command: "
        echo "@$PdBIUVT_TEMP_EXEC | mapping -nw -nl > $PdBIUVT_TEMP_LOGT)"
        echo "@$PdBIUVT_TEMP_EXEC" | mapping -nw -nl > "$PdBIUVT_TEMP_LOGT"
        
        # check output 
        if [[ ! -f "$PdBIUVT_TEMP_TAB3" ]]; then
            echo "Error! Failed to merge \"$PdBIUVT_TEMP_TAB1\" and \"$PdBIUVT_TEMP_TAB2\" to \"$PdBIUVT_TEMP_TAB3\"!"
            echo "Please check \"$PdBIUVT_TEMP_LOGT\"! (Maybe columns do not match?)"
            exit
        fi
        
        # clean intermediate uvt
        if [[ $i -ge 2 ]]; then 
            if [[ $PdBIUVT_UVMERGE_KEEP_FILE -le 0 ]]; then
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$((i-1)).uvt\""
                rm "${PdBIUVT_SAVE[0]}.$((i-1)).uvt"
            fi
            if [[ $PdBIUVT_UVMERGE_KEEP_FILE -lt 0 ]]; then
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$((i-1)).log\""
                rm "${PdBIUVT_SAVE[0]}.$((i-1)).log"
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$((i-1)).map\""
                rm "${PdBIUVT_SAVE[0]}.$((i-1)).map"
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$((i-1)).init\""
                rm "${PdBIUVT_SAVE[0]}.$((i-1)).init"
            fi
        fi
        
        if [[ $i -eq $((${#PdBIUVT_NAME[@]}-1)) ]]; then 
            # copy final uvt
            echo "Copying \"${PdBIUVT_SAVE[0]}.$i.uvt\" to \"${PdBIUVT_SAVE[0]}.uvt\""
            cp "${PdBIUVT_SAVE[0]}.$i.uvt" "${PdBIUVT_SAVE[0]}.uvt"
            # clean final intermediate uvt
            if [[ $PdBIUVT_UVMERGE_KEEP_FILE -le 0 ]]; then
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$i.uvt\""
                rm "${PdBIUVT_SAVE[0]}.$i.uvt"
            fi
            if [[ $PdBIUVT_UVMERGE_KEEP_FILE -lt 0 ]]; then
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$i.log\""
                rm "${PdBIUVT_SAVE[0]}.$i.log"
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$i.map\""
                rm "${PdBIUVT_SAVE[0]}.$i.map"
                echo "Deleted \"${PdBIUVT_SAVE[0]}.$i.init\""
                rm "${PdBIUVT_SAVE[0]}.$i.init"
            fi
        fi
        
    fi
    
done

echo "Successufully saved to \"${PdBIUVT_SAVE[0]}.uvt\"!"














