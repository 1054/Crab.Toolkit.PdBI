#!/bin/bash
# 
# Input uvtablefile and average channel width
# Output compressed uvtablefile
# 
# Last update:
#    2017-03-30 using "pdbi-uvt-core-arg-v5"
# 
# 



# 
# Uage
# 
usage() {
    echo "Usage: "
    echo "  pdbi-uvt-go-compress -name UV_TABLE_NAME_1 -width 8 -out UV_TABLE_NEW"
    echo ""
}



# 
# SOURCE pdbi-uvt-core-arg
# 
if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5" ]]; then
    source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5" "$@"
else
    echo ""
    echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v5\"!"
    echo ""
    exit 1
fi



# 
# Check input parameters -- uvt file name, ra dec
# 
if [[ ${#PdBIUVT_NAME[@]} -eq 0 || ${#PdBIUVT_UVCOMPRESS_NC[@]} -eq 0 ]]; then
    usage; exit
fi



# 
# Loop input uv tables
# 
for (( i = 0; i < "${#PdBIUVT_NAME[@]}"; i++ )); do
    # 
    # if type is uvtable
    # 
    if [[ ${PdBIUVT_TYPE[i]} == "uvt" || ${PdBIUVT_TYPE[i]} == "UVT" ]]; then
        # 
        # Set default output file name
        # 
        if [[ ${#PdBIUVT_SAVE[@]} -le $i ]]; then
            PdBIUVT_SAVE+=("${PdBIUVT_NAME[i]}-Compressed")
        fi
        if [[ x"${PdBIUVT_SAVE[i]}" == x || x"${PdBIUVT_SAVE[i]}" == x"tmp_pdbi_uvt" ]]; then 
            PdBIUVT_SAVE[i]="${PdBIUVT_NAME[i]}-Compressed"
            echo ""; echo "Warning! Output name was not given for the input uvtable \"${PdBIUVT_NAME[i]}\", setting to \"${PdBIUVT_SAVE[i]}\""; echo ""
        fi
        # 
        # Remove suffix
        # 
        if [[ x"${PdBIUVT_SAVE[i]}" == x*".uvt" ]]; then
            PdBIUVT_SAVE[i]=$(echo "${PdBIUVT_SAVE[i]}" | sed -e 's/\.uvt$//g')
        fi
        if [[ x"${PdBIUVT_SAVE[i]}" == x*".UVT" ]]; then
            PdBIUVT_SAVE[i]=$(echo "${PdBIUVT_SAVE[i]}" | sed -e 's/\.UVT$//g')
        fi
        # 
        # Backup existing output file
        # 
        if [[ -f "${PdBIUVT_SAVE[i]}.uvt" ]]; then
            echo "Warning! Found existing \"${PdBIUVT_SAVE[i]}.uvt\"! Backup as \"${PdBIUVT_SAVE[i]}.uvt.backup\"!"
            mv "${PdBIUVT_SAVE[i]}.uvt" "${PdBIUVT_SAVE[i]}.uvt.backup"
        fi
        # 
        # check input channel width
        # 
        if [[ ${#PdBIUVT_UVCOMPRESS_NC[@]} -le $i ]]; then
            TEMP_NC="${PdBIUVT_UVCOMPRESS_NC[${#PdBIUVT_UVCOMPRESS_NC[@]}-1]}" # repeat the last input channel width if the input channel width number is less than uvtable number
        else
            TEMP_NC="${PdBIUVT_UVCOMPRESS_NC[i]}"
        fi
        # 
        # prepare gildas/mapping init and script and run
        # 
        # 
        PdBIUVT_TEMP_INIT="${PdBIUVT_SAVE[i]}.init"
        PdBIUVT_TEMP_EXEC="${PdBIUVT_SAVE[i]}.map"
        PdBIUVT_TEMP_LOGT="${PdBIUVT_SAVE[i]}.log"
        echo  '! '                                                                                               > $PdBIUVT_TEMP_INIT
        echo  '! Task UV_COMPRESS'                                                                              >> $PdBIUVT_TEMP_INIT
        echo  '!'                                                                                               >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV table 1"                  UV_INPUT$      "'${PdBIUVT_NAME[i]}'"'              >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV table out"               UV_OUTPUT$      "'${PdBIUVT_SAVE[i]}'"'              >> $PdBIUVT_TEMP_INIT
        echo  'TASK\INTEGER   "Channel width"                     NC$       ' ${TEMP_NC}                        >> $PdBIUVT_TEMP_INIT
        echo  'TASK\GO'                                                                                         >> $PdBIUVT_TEMP_INIT
        echo  "run uv_compress $PdBIUVT_TEMP_INIT /NOWINDOW" > $PdBIUVT_TEMP_EXEC
        echo  "@$PdBIUVT_TEMP_EXEC | mapping > $PdBIUVT_TEMP_LOGT"
        echo  "@$PdBIUVT_TEMP_EXEC" | mapping > "$PdBIUVT_TEMP_LOGT"
        
        if [[ -f "${PdBIUVT_SAVE[i]}.uvt" ]]; then
            echo "Successufully saved to \"${PdBIUVT_SAVE[i]}.uvt\"!"
            echo "--"
            if [[ -f "$PdBIUVT_TEMP_LOGT" ]]; then
                rm "$PdBIUVT_TEMP_LOGT"
            fi
        else
            echo "Error! Failed to run GILDAS MAPPING UV_COMPRESS and output \"${PdBIUVT_SAVE[i]}.uvt\"!"
            echo "Please check \"$PdBIUVT_TEMP_LOGT\"!"
            exit 1
        fi
    
    fi
    
done














