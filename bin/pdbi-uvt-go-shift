#!/bin/bash
# 
# Input RA Dec
# Output uv_shift-ed uvtable
# pdbi-uvt-go-shift -name split_GN11_spw38.uvt -radec 12:36:27.552 62:12:17.81
# 
# Last update:
#    2017-03-30 using "pdbi-uvt-core-arg-v5"
#    2017-09-28 using "pdbi-uvt-core-arg-v6"
# 
# 



# 
# Uage
# 
usage() {
    echo "Usage: "
    echo "  pdbi-uvt-go-shift -name UV_TABLE_NAME_1 UV_TABLE_NAME_2 [UV_TABLE_NAME_3 [UV_TABLE_NAME_4]] -radec NNN:NN:NN.NN NN:NN:NN.N -out UV_TABLE_NEW"
    echo ""
}



# 
# SOURCE pdbi-uvt-core-arg
# 
if [[ -f $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v8" ]]; then
    source $(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v8" "$@"
else
    echo ""
    echo "Error! Could not find \""$(dirname "${BASH_SOURCE[0]}")"/pdbi-uvt-core-arg-v8\"!"
    echo ""
    exit 1
fi



# 
# Check input parameters -- uvt file name, ra dec
# 
if [[ ${#PdBIUVT_NAME[@]} -eq 0 || ${#PdBIUVT_RANX_OBJT[@]} -eq 0 || ${#PdBIUVT_DECX_OBJT[@]} -eq 0 ]]; then
    usage; exit
fi



# 
# Loop input uv tables
# 
for (( i = 0; i < "${#PdBIUVT_NAME[@]}"; i++ )); do
    # 
    # if type is uvtable
    # 
    if [[ ${PdBIUVT_TYPE[i]} == "uvt" || ${PdBIUVT_TYPE[i]} == "UVT" ]]; then
        # 
        # Set default output file name
        # 
        if [[ ${#PdBIUVT_SAVE[@]} -le $i ]]; then
            PdBIUVT_SAVE+=("${PdBIUVT_NAME[i]}-Shifted")
        fi
        if [[ x"${PdBIUVT_SAVE[i]}" == x || x"${PdBIUVT_SAVE[i]}" == x"tmp_pdbi_uvt" ]]; then 
            PdBIUVT_SAVE[i]="${PdBIUVT_NAME[i]}-Shifted"
            echo ""; echo "Warning! Output name was not given for the input uvtable \"${PdBIUVT_NAME[i]}\", setting to \"${PdBIUVT_SAVE[i]}.uvt\""; echo ""
        fi
        # 
        # Remove suffix
        # 
        if [[ x"${PdBIUVT_SAVE[i]}" == x*".uvt" ]]; then
            PdBIUVT_SAVE[i]=$(echo "${PdBIUVT_SAVE[i]}" | sed -e 's/\.uvt$//g')
        fi
        if [[ x"${PdBIUVT_SAVE[i]}" == x*".UVT" ]]; then
            PdBIUVT_SAVE[i]=$(echo "${PdBIUVT_SAVE[i]}" | sed -e 's/\.UVT$//g')
        fi
        # 
        # Backup existing output file
        # 
        if [[ -f "${PdBIUVT_SAVE[i]}.uvt" ]]; then
            if [[ -f "${PdBIUVT_SAVE[i]}.uvt.backup" ]]; then
                rm "${PdBIUVT_SAVE[i]}.uvt.backup"
            fi
            echo "Warning! Found existing \"${PdBIUVT_SAVE[i]}.uvt\"! Backup as \"${PdBIUVT_SAVE[i]}.uvt.backup\"!"
            mv "${PdBIUVT_SAVE[i]}.uvt" "${PdBIUVT_SAVE[i]}.uvt.backup"
        fi
        # 
        # check input radec
        # 
        if [[ ${#PdBIUVT_RANX_OBJT[@]} -le $i ]]; then
            PdBIUVT_TEMP_MAP_RA="${PdBIUVT_RANX_OBJT[${#PdBIUVT_RANX_OBJT[@]}-1]}" # repeat the last input radec pair if the input radec pair number is less than uvtable number
            PdBIUVT_TEMP_MAP_DEC="${PdBIUVT_DECX_OBJT[${#PdBIUVT_DECX_OBJT[@]}-1]}" # repeat the last input radec pair if the input radec pair number is less than uvtable number
            PdBIUVT_TEMP_MAP_RA_DEG="${PdBIUVT_RAND_OBJT[${#PdBIUVT_RAND_OBJT[@]}-1]}" # repeat the last input radec pair if the input radec pair number is less than uvtable number
            PdBIUVT_TEMP_MAP_DEC_DEG="${PdBIUVT_DECD_OBJT[${#PdBIUVT_DECD_OBJT[@]}-1]}" # repeat the last input radec pair if the input radec pair number is less than uvtable number
        else
            PdBIUVT_TEMP_MAP_RA="${PdBIUVT_RANX_OBJT[i]}"
            PdBIUVT_TEMP_MAP_DEC="${PdBIUVT_DECX_OBJT[i]}"
            PdBIUVT_TEMP_MAP_RA_DEG="${PdBIUVT_RAND_OBJT[i]}"
            PdBIUVT_TEMP_MAP_DEC_DEG="${PdBIUVT_DECD_OBJT[i]}"
        fi
        if [[ ${#PdBIUVT_OBJ_ANGLE[@]} -gt 0 ]]; then
            if [[ ${#PdBIUVT_OBJ_ANGLE[@]} -le $i ]]; then
                PdBIUVT_TEMP_MAP_ANGLE="${PdBIUVT_OBJ_ANGLE[${#PdBIUVT_OBJ_ANGLE[@]}-1]}"
            else
                PdBIUVT_TEMP_MAP_ANGLE="${PdBIUVT_OBJ_ANGLE[i]}"
            fi
        else
            PdBIUVT_TEMP_MAP_ANGLE="0"
        fi
        # 
        # print shifted arcsec
        # 
        if [[ 1 == 1 ]]; then
            echo "header ${PdBIUVT_NAME[i]}.uvt" | mapping -nw -nl > "${PdBIUVT_NAME[i]}.uvt.header.txt"
            PdBIUVT_SKYFREQUENCY=$(grep "Axis 1 *.* *Rest Frequency *.*" "${PdBIUVT_NAME[i]}.uvt.header.txt" | head -n 1 | perl -p -e 's/^.*Rest Frequency *//g')
            echo "Sky frequency in MHz: $PdBIUVT_SKYFREQUENCY"
            #echo "grep \"Axis 0 *A0 *.* *Axis 0 * D0 *.*\" \"${PdBIUVT_NAME[i]}.uvt.header.txt\""
            PdBIUVT_PHASECENTER_RA_DEC=($(grep "Axis 0 *A0 *.* *Axis 0 * D0 *.*" "${PdBIUVT_NAME[i]}.uvt.header.txt" | head -n 1 | tr -s ' ' | cut -d ' ' -f 4,8))
            #echo "radec2degree ${PdBIUVT_PHASECENTER_RA_DEC[@]}"
            PdBIUVT_PHASECENTER_RA_DEC_DEG=($(radec2degree ${PdBIUVT_PHASECENTER_RA_DEC[@]}))
            PdBIUVT_PHASECENTER_RA_DEG=${PdBIUVT_PHASECENTER_RA_DEC_DEG[0]}
            PdBIUVT_PHASECENTER_DEC_DEG=${PdBIUVT_PHASECENTER_RA_DEC_DEG[1]}
            echo "Phase center RA Dec: $PdBIUVT_PHASECENTER_RA_DEG $PdBIUVT_PHASECENTER_DEC_DEG"
            echo "Shift to RA Dec: $PdBIUVT_TEMP_MAP_RA_DEG $PdBIUVT_TEMP_MAP_DEC_DEG"
            echo "Shifted angular distance in arcsec: "$(awk "BEGIN {print sqrt( ((($PdBIUVT_TEMP_MAP_RA_DEG)-($PdBIUVT_PHASECENTER_RA_DEG))*cos($PdBIUVT_PHASECENTER_DEC_DEG/180.0*3.1415926))^2 + (($PdBIUVT_TEMP_MAP_DEC_DEG)-($PdBIUVT_PHASECENTER_DEC_DEG))^2 )*3600.0;}")
            #frequency_GHz
            #antenna_diameter
            #echo "Primary beam size in arcsec: "$(awk "BEGIN print {1.13*2.99792458e5/(${frequency_GHz})/((${antenna_diameter})*1e6)/3.1415926*180.0*3600.0;}")
            # 1.13*2.99792458e5/sky_frequency_GHz/(primary_beam_diam_meter*1e6)/3.1415926*180.0*3600.0
        fi
        # 
        # prepare gildas/mapping init and script and run
        # 
        # "let name ${PdBIUVT_NAME[i]}"
        # "let map_ra ${PdBIUVT_TEMP_MAP_RA}"
        # "let map_dec ${PdBIUVT_TEMP_MAP_DEC}"
        # 
        #PdBIUVT_TEMP_INIT="${PdBIUVT_SAVE[i]}.init"
        #PdBIUVT_TEMP_EXEC="${PdBIUVT_SAVE[i]}.map"
        #PdBIUVT_TEMP_LOGT="${PdBIUVT_SAVE[i]}.log"
        PdBIUVT_TEMP_INIT="${PdBIUVT_SAVE[i]}.uvt.uv_shift.init"
        PdBIUVT_TEMP_EXEC="${PdBIUVT_SAVE[i]}.uvt.uv_shift.script"
        PdBIUVT_TEMP_LOGT="${PdBIUVT_SAVE[i]}.uvt.uv_shift.log"
        # 
        # copy uv table because uv_shift operates on uv table and do not write new uv table
        cp "${PdBIUVT_NAME[i]}.uvt" "${PdBIUVT_SAVE[i]}.uvt"
        # 
        echo  '! '                                                                                                             > $PdBIUVT_TEMP_INIT
        echo  '! Task UV_SHIFT'                                                                                               >> $PdBIUVT_TEMP_INIT
        echo  '!'                                                                                                             >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "UV table 1"                             UVTABLE$      "'${PdBIUVT_SAVE[i]}.uvt'"'              >> $PdBIUVT_TEMP_INIT
        echo  'TASK\LOGICAL   "Offset mode YES or Absolute mode NO"   RELATIVE$       ' NO                                    >> $PdBIUVT_TEMP_INIT
        echo  'TASK\REAL      "Offset mode offset by radians"           OFFSET$[2]    ' 0 0                                   >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "Absolute mode RA center"              RA_CENTER$      "'$PdBIUVT_TEMP_MAP_RA'"'                >> $PdBIUVT_TEMP_INIT
        echo  'TASK\CHARACTER "Absolute mode DEC center"            DEC_CENTER$      "'$PdBIUVT_TEMP_MAP_DEC'"'               >> $PdBIUVT_TEMP_INIT
        echo  'TASK\REAL      "Angle"                                    ANGLE$       '$PdBIUVT_TEMP_MAP_ANGLE                >> $PdBIUVT_TEMP_INIT
        echo  'TASK\LOGICAL   "Accuracy"                               PRECISE$       ' YES                                   >> $PdBIUVT_TEMP_INIT
        echo  'TASK\GO'                                                                                                       >> $PdBIUVT_TEMP_INIT
        echo  "run uv_shift $PdBIUVT_TEMP_INIT /NOWINDOW" > $PdBIUVT_TEMP_EXEC
        echo  "@$PdBIUVT_TEMP_EXEC | mapping -nw -nl > $PdBIUVT_TEMP_LOGT"
        echo  "@$PdBIUVT_TEMP_EXEC" | mapping -nw -nl >  "$PdBIUVT_TEMP_LOGT"
        # 
        # Check final output
        # 
        if [[ -f "${PdBIUVT_SAVE[i]}.uvt" ]]; then
            echo "Successufully saved to \"${PdBIUVT_SAVE[i]}.uvt\"!"
            echo "--"
            if [[ $PdBIUVT_UVMERGE_KEEP_FILE -le 0 ]]; then
                if [[ -f "$PdBIUVT_TEMP_LOGT" ]]; then
                    rm "$PdBIUVT_TEMP_LOGT"
                fi
                if [[ -f "$PdBIUVT_TEMP_INIT" ]]; then
                    rm "$PdBIUVT_TEMP_INIT"
                fi
                if [[ -f "$PdBIUVT_TEMP_EXEC" ]]; then
                    rm "$PdBIUVT_TEMP_EXEC"
                fi
                if [[ -f "${PdBIUVT_NAME[i]}.uvt.header.txt" ]]; then
                    rm "${PdBIUVT_NAME[i]}.uvt.header.txt"
                fi
            fi
        else
            echo "Error! Failed to run GILDAS MAPPING UV_SUBTRACT and output \"${PdBIUVT_SAVE[i]}.uvt\"!"
            echo "Please check \"$PdBIUVT_TEMP_LOGT\"!"
            exit 1
        fi
        
    fi
    
done












