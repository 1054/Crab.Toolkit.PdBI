#!/bin/bash
# 
# Input uvfits
# Output uvt
# 
# Last update:
#    2017-02-19 rewritten, beautified, used "pdbi-uvt-core-arg"
# 
# 



# CHECK wcstools gethead
if [[ $(type gethead 2>/dev/null | wc -l) -eq 0 ]]; then
    echo "Error! WCSTOOLS gethead not found! Exit!"
    exit 1
fi



# 
# Uage
# 
usage() {
    echo "Usage: "
    echo "  pdbi-uvt-go-import-uvfits -name PdBIUVT_NAME.uvt -size 15 -map_size 512 -map_cell 0.2 -out aaa.eps -overwrite"
    echo ""
}



#
# readlink
# 
if [[ $(uname) == *"Darwin"* ]]; then
    function readlink() {
        if [[ $# -gt 1 ]]; then if [[ "$1" == "-f" ]]; then shift; fi; fi
        DIR=$(echo "${1%/*}"); (cd "$DIR" && echo "$(pwd -P)/$(basename ${1})")
    }
fi
PdBIUVT_DIR=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))



# 
# Read input parameters by calling "pdbi-uvt-core-arg"
# 
if [[ -f "$PdBIUVT_DIR/pdbi-uvt-core-arg" ]]; then
    source "$PdBIUVT_DIR/pdbi-uvt-core-arg" "$@"
else
    echo ""; echo "Error! Could not find \"$PdBIUVT_DIR/pdbi-uvt-core-arg\"! Please contact software supplier!"; echo ""
    exit
fi



# 
# Check input parameters -- uvt file name
# 
if [[ x"$PdBIUVT_NAME" == x ]]; then
    usage; exit
fi











# 
# Set default output file as
# "$PdBIUVT_SAVE.uvt.go.uvmap.eps"
# 
if [[ x"$PdBIUVT_SAVE" == x || x"$PdBIUVT_SAVE" == x"tmp_pdbi_uvt" ]]; then 
    PdBIUVT_SAVE="$PdBIUVT_NAME"
    echo ""; echo "Warning! Output name was not given, setting to \"$PdBIUVT_SAVE.uvt\""; echo ""
fi

# 
# Backup existing output file
# 
if [[ -f "$PdBIUVT_SAVE.uvt" ]]; then
    echo "Warning! Found existing \"$PdBIUVT_SAVE.uvt\"! Backup as \"$PdBIUVT_SAVE.uvt.backup\"!"
    mv "$PdBIUVT_SAVE.uvt" "$PdBIUVT_SAVE.uvt.backup"
fi



# 
# Deal with the input uvfits file
# Output to mapping script
# "$PdBIUVT_SAVE.uvt.import.uvfits.script"
# 
PdBIUVT_EXE="$PdBIUVT_SAVE.uvt.import.uvfits.script"
PdBIUVT_LOG="$PdBIUVT_SAVE.uvt.import.uvfits.log"
PdBIUVT_INI="$PdBIUVT_SAVE.uvt.import.uvfits.init"
PdBIUVT_GETHEAD="$PdBIUVT_SAVE.uvt.import.uvfits.gethead"
PdBIUVT_SETHEAD="$PdBIUVT_SAVE.uvt.import.uvfits.sethead"

echo "" >  "$PdBIUVT_EXE"

echo "Checking \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" frequencies"
PdBIUVT_CRVAL4=$(gethead "$PdBIUVT_NAME.$PdBIUVT_TYPE" "CRVAL4")
PdBIUVT_RESTFREQ=$(gethead "$PdBIUVT_NAME.$PdBIUVT_TYPE" "RESTFREQ")
if [[ x"$PdBIUVT_RESTFREQ" == x ]]; then PdBIUVT_RESTFREQ="$PdBIUVT_CRVAL4"; fi #<added><20170304><dzliu># 
echo "CRVAL4   = $PdBIUVT_CRVAL4" > "$PdBIUVT_GETHEAD"
echo "RESTFREQ = $PdBIUVT_RESTFREQ" >> "$PdBIUVT_GETHEAD"
cat "$PdBIUVT_GETHEAD"
#echo "BEGIN {val=(($PdBIUVT_CRVAL4)-($PdBIUVT_RESTFREQ))/((($PdBIUVT_CRVAL4)+($PdBIUVT_RESTFREQ))/2.0); print (val>0)?(val<0.001):(-val<0.001)}"
PdBIUVT_CHECK=$(awk "BEGIN {val=(($PdBIUVT_CRVAL4)-($PdBIUVT_RESTFREQ))/((($PdBIUVT_CRVAL4)+($PdBIUVT_RESTFREQ))/2.0); print (val>0)?(val<0.001):(-val<0.001)}")
if [[ $PdBIUVT_CHECK -eq 0 ]]; then
    echo "sethead \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" RESTFREQ=$PdBIUVT_CRVAL4" > "$PdBIUVT_SETHEAD"
          sethead  "$PdBIUVT_NAME.$PdBIUVT_TYPE"  RESTFREQ=$PdBIUVT_CRVAL4
    cat "$PdBIUVT_SETHEAD"
fi


echo "Converting \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" to \"$PdBIUVT_SAVE.uvt\""
echo "FITS \"$PdBIUVT_NAME.$PdBIUVT_TYPE\" TO \"$PdBIUVT_SAVE.uvt\" /STYLE CASA" >> "$PdBIUVT_EXE"


echo "Running @$PdBIUVT_EXE in GILDAS mapping"
echo "@$PdBIUVT_EXE" | mapping > "$PdBIUVT_LOG"
#echo "header $PdBIUVT_NAME.uvt" | mapping > "$PdBIUVT_SAVE.uvt.header.txt"



echo "Done!"


