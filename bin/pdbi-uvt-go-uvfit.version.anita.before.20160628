#!/bin/bash
# 
# Input RA Dec
# Output spec & uvfit
# 
# Last update:
#    2015-03-23 make vrange also a list
# 
PdBIUVT_EXMP=".pdbi-uvt-go-uvfit.mapping"
PdBIUVT_EXPY=".pdbi-uvt-go-uvfit.py"
PdBIUVT_STTY=".pdbi-uvt-go-uvfit.tty"
PdBIUVT_NAME=""
PdBIUVT_RESI="" # the output residual uvtable after subtraction
PdBIUVT_SAVE="" # the output save files base name
PdBIUVT_RSUB="NO" # whether subtract the fit component or not (if we set PdBIUVT_RESI, then PdBIUVT_RSUB="YES")
PdBIUVT_SIZE="30"
PdBIUVT_VARY=0
PdBIUVT_FUNC="POINT"
PdBIUVT_VMIN=()
PdBIUVT_VMAX=()
PdBIUVT_CMIN=()
PdBIUVT_CMAX=()
PdBIUVT_RANX_OBJT=() # "09:59:38.101"
PdBIUVT_DECX_OBJT=() # "02:28:57.108"
PdBIUVT_RAND_OBJT=() # "150.000"
PdBIUVT_DECD_OBJT=() # "30.0000"
PdBIUVT_RANX_CENT="" # "09:59:38.101"
PdBIUVT_DECX_CENT="" # "02:28:57.108"
PdBIUVT_RAND_CENT="" # "150.000"
PdBIUVT_DECD_CENT="" # "30.0000"
# channel width in unit of channel
PdBIUVT_CHAN_WDTH="0"
# LANG
LANG=C
# CHECK radec2degree
if [[ $(radec2degree 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! radec2degree not found! Please contact dzliu. 
    exit 1
fi
# CHECK degree2radec
if [[ $(degree2radec 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! degree2radec not found! Please contact dzliu. 
    exit 1
fi
# CHECK bc
if [[ $(bc <<< 1+2 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool bc not found! Exit!
    exit 1
fi
# CHECK awk
if [[ $(echo "Go" | awk "NR==1" 2>/dev/null | wc -l) -eq 0 ]]; then
    echo Error! gnu tool awk not found! Exit!
    exit 1
fi
# CHECK supermongo
if [[ h$(echo echo ello | sm 2>/dev/null) != hello ]]; then
    echo Error! Supermongo not found! sm not working! Exit!
    exit 1
fi
# 
# Read input parameters
# 
PdBIUVT_GOOD=1
PdBIUVT_TSTR=""
PdBIUVT_RPAR=""
while [[ "$#" -gt 0 ]]; do
    # echo $1
    PdBIUVT_TSTR=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    case "$PdBIUVT_TSTR" in
          "-name") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_NAME="$1";;
           "-res") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_RESI="$1";;
      "-residual") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_RESI="$1";;
           "-out") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SAVE="$1";;
          "-save") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SAVE="$1";;
          "-size") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_SIZE="$1";;
          "-vary") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY=1;;
  "-varyposition") if [[ "$#" -lt 2 ]]; then PdBIUVT_GOOD=0; break; fi;        PdBIUVT_RPAR=""; PdBIUVT_VARY=1;;
         "-gauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_FUNC="E_GAUSS";;
        "-egauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_FUNC="E_GAUSS";;
        "-cgauss") if [[ "$#" -lt 1 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR=""; PdBIUVT_FUNC="C_GAUSS";;
         "-radec") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="radec";;
      "-pointing") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="pointing";;
        "-vrange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="vrange";;
        "-crange") if [[ "$#" -lt 3 ]]; then PdBIUVT_GOOD=0; break; fi; shift; PdBIUVT_RPAR="crange";;
    esac
    if [[ "$PdBIUVT_RPAR" == "radec" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if [[ "$1" == *":"*":"* ]]; then
            PdBIUVT_RANX_OBJT=("${PdBIUVT_RANX_OBJT[@]}" "$1")
            PdBIUVT_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
            PdBIUVT_RAND_OBJT=("${PdBIUVT_RAND_OBJT[@]}" "$PdBIUVT_TEMP")
        else
            PdBIUVT_RAND_OBJT=("${PdBIUVT_RAND_OBJT[@]}" "$1")
            PdBIUVT_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
            PdBIUVT_RANX_OBJT=("${PdBIUVT_RANX_OBJT[@]}" "$PdBIUVT_TEMP")
        fi
        if [[ "$2" == *":"*":"* ]]; then
            PdBIUVT_DECX_OBJT=("${PdBIUVT_DECX_OBJT[@]}" "$2")
            PdBIUVT_TEMP=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
            PdBIUVT_DECD_OBJT=("${PdBIUVT_DECD_OBJT[@]}" "$PdBIUVT_TEMP")
        else
            PdBIUVT_DECD_OBJT=("${PdBIUVT_DECD_OBJT[@]}" "$2")
            PdBIUVT_TEMP=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
            PdBIUVT_DECX_OBJT=("${PdBIUVT_DECX_OBJT[@]}" "$PdBIUVT_TEMP")
        fi
        shift
    fi
    if [[ "$PdBIUVT_RPAR" == "pointing" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        if [[ "$1" == *":"*":"* ]]; then
            PdBIUVT_RANX_CENT="$1"
            PdBIUVT_RAND_CENT=$(radec2degree "$1" "$2" | cut -d ' ' -f 1)
        else
            PdBIUVT_RAND_CENT="$1"
            PdBIUVT_RANX_CENT=$(degree2radec "$1" "$2" | cut -d ' ' -f 1)
        fi
        if [[ "$2" == *":"*":"* ]]; then
            PdBIUVT_DECX_CENT="$2"
            PdBIUVT_DECD_CENT=$(radec2degree "$1" "$2" | cut -d ' ' -f 2)
        else
            PdBIUVT_DECD_CENT="$2"
            PdBIUVT_DECX_CENT=$(degree2radec "$1" "$2" | cut -d ' ' -f 2)
        fi
        shift
        PdBIUVT_RPAR=""
    fi
    if [[ "$PdBIUVT_RPAR" == "vrange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        PdBIUVT_VMIN=("${PdBIUVT_VMIN[@]}" "$1")
        PdBIUVT_VMAX=("${PdBIUVT_VMAX[@]}" "$2")
        shift
    fi
    if [[ "$PdBIUVT_RPAR" == "crange" ]];  then 
        if [[ "$#" -lt 2 ]]; then
            break
        fi
        PdBIUVT_CMIN=("${PdBIUVT_CMIN[@]}" "$1")
        PdBIUVT_CMAX=("${PdBIUVT_CMAX[@]}" "$2")
        shift
    fi
    shift
done
# 
# Check input parameters -- make sure radec is given
# 
if [[ "${#PdBIUVT_RAND_OBJT[@]}" -lt 1 ]]; then
    PdBIUVT_GOOD=0
fi
# 
# Check input parameters -- if not passed then print usage and exit
# 
if [[ $PdBIUVT_GOOD -eq 0 ]]; then
    echo Usage: pdbi-uvt-go-uvfit -name PdBIUVT_NAME[no-suffix] [-size 10] [-vary] [-pointing RA DEC] -radec RA DEC [RA DEC [RA DEC]] [-cgauss/-egauss] [-residual residual.uvt]
    exit
fi
# 
# Revise input parameters
# 
# -- remove the suffix of the input uvtable name, and test whether the file exists
PdBIUVT_NAME=$(echo $PdBIUVT_NAME | sed -E 's/[.]uvt$//g')
if [[ ! -f "$PdBIUVT_NAME.uvt" ]]; then
    echo Error! "$PdBIUVT_NAME.uvt" was not found! Exit!
    exit
fi
# -- make sure the suffix of the residual uvtable name is .uvt, and test whether the file exists
if [[ x"$PdBIUVT_RESI" != x ]]; then 
    if [[ "$PdBIUVT_RESI" != *".uvt" ]]; then PdBIUVT_RESI="$PdBIUVT_RESI.uvt"; fi # make sure the suffix is .uvt
    #if [[ -f "$PdBIUVT_RESI" ]]; then echo -n Warning! "$PdBIUVT_RESI exists! Do you like to overwrite? [y/n] "
    #    read PdBIUVT_TEMP; if [[ "$PdBIUVT_TEMP" == "y"* ]]; then 
    #    echo Deleted old "$PdBIUVT_RESI"!; rm "$PdBIUVT_RESI"; else 
    #    echo OK! We have not modify any thing! Exit!; exit; fi
    #fi
    PdBIUVT_RSUB="YES"
fi
# -- set default output save files base name
if [[ x"$PdBIUVT_SAVE" == x ]]; then 
    PdBIUVT_SAVE="tmp_doUVFIT"
fi
# -- print uvtable name without suffix
echo PdBIUVT_NAME=$PdBIUVT_NAME
# -- print go view box size in arcsec
echo PdBIUVT_SIZE=$PdBIUVT_SIZE
# -- print object radec
echo PdBIUVT_RANX_OBJT=${PdBIUVT_RANX_OBJT[*]}
echo PdBIUVT_DECX_OBJT=${PdBIUVT_DECX_OBJT[*]}
echo PdBIUVT_RAND_OBJT=${PdBIUVT_RAND_OBJT[*]}
echo PdBIUVT_DECD_OBJT=${PdBIUVT_DECD_OBJT[*]}
# -- print center radec
echo PdBIUVT_RANX_CENT=$PdBIUVT_RANX_CENT
echo PdBIUVT_DECX_CENT=$PdBIUVT_DECX_CENT
echo PdBIUVT_RAND_CENT=$PdBIUVT_RAND_CENT
echo PdBIUVT_DECD_CENT=$PdBIUVT_DECD_CENT
# -- print velocity range
echo PdBIUVT_VMIN=${PdBIUVT_VMIN[*]}
echo PdBIUVT_VMAX=${PdBIUVT_VMAX[*]}
# -- print channel range
echo PdBIUVT_CMIN=${PdBIUVT_CMIN[*]}
echo PdBIUVT_CMAX=${PdBIUVT_CMAX[*]}
# -- print whether vary position or not
echo PdBIUVT_VARY=$PdBIUVT_VARY
# 
# Read uvtable header
echo header $PdBIUVT_NAME.uvt | mapping | sed 's/[^[:print:]]//g' > header.txt
# 
# get line name and rest frequency <Corrected><20150217><DADDI><DZLIU> the rest frequency is not reference frequency
PdBIUVT_TEMP_TEXT=$(cat header.txt| grep 'Rest Frequency')
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
if [[ "$PdBIUVT_TEMP_TEXT" == *"Line Name Rest Frequency"* ]]; then # IF Line Name is Empty
PdBIUVT_LINE_NAME=""
PdBIUVT_FREQ_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 7)
else
PdBIUVT_LINE_NAME=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 5)
PdBIUVT_FREQ_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 8)
fi
echo "Line Name  " = $PdBIUVT_LINE_NAME
echo "Freq Center" = $PdBIUVT_FREQ_CENT MHz
# get velocity resolution (and frequency resolution)
PdBIUVT_TEMP_TEXT=$(cat header.txt | grep 'Resolution in Velocity')
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_VELO_RESL=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4) # | sed -e 's/^-//g' # <TODO> remove negative sign?
PdBIUVT_FREQ_RESL=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 7)
echo "Freq  Resol" = $PdBIUVT_FREQ_RESL MHz
echo "Velo  Resol" = $PdBIUVT_VELO_RESL km/s
# get velocity offset
PdBIUVT_VELO_OFFS=0.0
PdBIUVT_TEMP_TEXT=$(cat header.txt | grep 'Offset in Velocity')
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_VELO_OFFS=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4)
# get channel min max and center
PdBIUVT_TEMP_TEXT=$(cat header.txt | grep 'UV Data *Channels')
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_CHAN_MINI=$(echo 1)
PdBIUVT_CHAN_MAXI=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4 | sed -e 's/[,]//g')
PdBIUVT_CHAN_CENT=$(echo calc $PdBIUVT_CHAN_MAXI / 2.0 + 1.0 | sm)
echo "Channel Min" = $PdBIUVT_CHAN_MINI
echo "Channel Max" = $PdBIUVT_CHAN_MAXI
echo "Channel Cen" = $PdBIUVT_CHAN_CENT
# get reference channel freq (and frequency resolution)
PdBIUVT_TEMP_TEXT=$(cat header.txt | grep -A 1 'Size *Reference Pixel *Value *Increment' | tail -n 1)
PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
PdBIUVT_CHAN_CREF=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 2)
PdBIUVT_FREQ_CREF=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 3)
PdBIUVT_FREQ_CBIN=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4)
PdBIUVT_VELO_CREF=0.0 #<TODO> make sure the reference channel is velocity zero
echo "Channel Ref" = $PdBIUVT_CHAN_CREF
echo "Velo    Ref" = $PdBIUVT_VELO_CREF km/s
echo "Velo    Off" = $PdBIUVT_VELO_OFFS km/s
echo "Freq    Ref" = $PdBIUVT_FREQ_CREF MHz
echo "Freq    Bin" = $PdBIUVT_FREQ_CBIN MHz
# get frequency min max
if [[ "$PdBIUVT_FREQ_CBIN" > 0.0 ]]; then
PdBIUVT_FREQ_MINI=$(echo "calc ($PdBIUVT_CHAN_MINI-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF" | sm)
PdBIUVT_FREQ_MAXI=$(echo "calc ($PdBIUVT_CHAN_MAXI-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF" | sm)
else
PdBIUVT_FREQ_MINI=$(echo "calc -($PdBIUVT_CHAN_MINI-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF" | sm)
PdBIUVT_FREQ_MAXI=$(echo "calc -($PdBIUVT_CHAN_MAXI-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF" | sm)
fi
echo "Freq    Min" = $PdBIUVT_FREQ_MINI MHz
echo "Freq    Max" = $PdBIUVT_FREQ_MAXI MHz
# get object channel range and frequency range if velocity range is set <added><20150323><dzliu> for each object
#PdBIUVT_CMIN=()
#PdBIUVT_CMAX=()
PdBIUVT_FMIN=()
PdBIUVT_FMAX=()
PdBIUVT_CCVMIN=()
PdBIUVT_CCVMAX=()
for (( PdBIUVT_OBJI = 0; PdBIUVT_OBJI < "${#PdBIUVT_RAND_OBJT[@]}"; PdBIUVT_OBJI++ )); do
    if [[ ! "${#PdBIUVT_VMIN[@]}">$PdBIUVT_OBJI || ! "${#PdBIUVT_VMAX[@]}">$PdBIUVT_OBJI ]]; then
        if [[ "${#PdBIUVT_VMIN[@]}"<=$PdBIUVT_OBJI ]]; then
            PdBIUVT_VMIN=("${PdBIUVT_VMIN[@]}" "0")
        fi
        if [[ "${#PdBIUVT_VMAX[@]}"<=$PdBIUVT_OBJI ]]; then
            PdBIUVT_VMAX=("${PdBIUVT_VMAX[@]}" "0")
        fi
    fi
    if [[ ! "${#PdBIUVT_CMIN[@]}">$PdBIUVT_OBJI || ! "${#PdBIUVT_CMAX[@]}">$PdBIUVT_OBJI ]]; then
        TEMP_CMIN=0
        TEMP_CMAX=0
        if [[ "${PdBIUVT_VMAX[$PdBIUVT_OBJI]}" -gt "${PdBIUVT_VMIN[$PdBIUVT_OBJI]}" ]]; then 
            if [[ "$PdBIUVT_VELO_RESL" > 0.0 ]]; then
                TEMP_CMIN=$(echo "calc int((${PdBIUVT_VMIN[$PdBIUVT_OBJI]}-$PdBIUVT_VELO_CREF-$PdBIUVT_VELO_OFFS)/$PdBIUVT_VELO_RESL+$PdBIUVT_CHAN_CREF)" | sm) #<TODO> int(-(
                TEMP_CMAX=$(echo "calc int((${PdBIUVT_VMAX[$PdBIUVT_OBJI]}-$PdBIUVT_VELO_CREF-$PdBIUVT_VELO_OFFS)/$PdBIUVT_VELO_RESL+$PdBIUVT_CHAN_CREF)" | sm) #<TODO> int(-(
            else
                TEMP_CMAX=$(echo "calc int((${PdBIUVT_VMIN[$PdBIUVT_OBJI]}-$PdBIUVT_VELO_CREF-$PdBIUVT_VELO_OFFS)/$PdBIUVT_VELO_RESL+$PdBIUVT_CHAN_CREF)" | sm) #<TODO> int(-(
                TEMP_CMIN=$(echo "calc int((${PdBIUVT_VMAX[$PdBIUVT_OBJI]}-$PdBIUVT_VELO_CREF-$PdBIUVT_VELO_OFFS)/$PdBIUVT_VELO_RESL+$PdBIUVT_CHAN_CREF)" | sm) #<TODO> int(-(
            fi
        fi
        if [[ "${#PdBIUVT_CMIN[@]}"<=$PdBIUVT_OBJI ]]; then
            PdBIUVT_CMIN=("${PdBIUVT_CMIN[@]}" "$TEMP_CMIN")
        fi
        if [[ "${#PdBIUVT_CMAX[@]}"<=$PdBIUVT_OBJI ]]; then
            PdBIUVT_CMAX=("${PdBIUVT_CMAX[@]}" "$TEMP_CMAX")
        fi
    fi
    if [[ ! "${#PdBIUVT_FMIN[@]}">$PdBIUVT_OBJI || ! "${#PdBIUVT_FMAX[@]}">$PdBIUVT_OBJI ]]; then
        TEMP_FMIN=0
        TEMP_FMAX=0
        if [[ "$PdBIUVT_FREQ_CBIN" > 0.0 ]]; then
            TEMP_FMIN=$(echo "calc ((${PdBIUVT_CMIN[$PdBIUVT_OBJI]}-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF)/1e3" | sm)
            TEMP_FMAX=$(echo "calc ((${PdBIUVT_CMAX[$PdBIUVT_OBJI]}-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF)/1e3" | sm)
        else
            TEMP_FMAX=$(echo "calc ((${PdBIUVT_CMIN[$PdBIUVT_OBJI]}-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF)/1e3" | sm)
            TEMP_FMIN=$(echo "calc ((${PdBIUVT_CMAX[$PdBIUVT_OBJI]}-$PdBIUVT_CHAN_CREF)*$PdBIUVT_FREQ_CBIN+$PdBIUVT_FREQ_CREF)/1e3" | sm)
        fi
        if [[ "${#PdBIUVT_FMIN[@]}"<=$PdBIUVT_OBJI ]]; then
            PdBIUVT_FMIN=("${PdBIUVT_FMIN[@]}" "$TEMP_FMIN")
        fi
        if [[ "${#PdBIUVT_CMAX[@]}"<=$PdBIUVT_OBJI ]]; then
            PdBIUVT_FMAX=("${PdBIUVT_FMAX[@]}" "$TEMP_FMAX")
        fi
    fi
    if [[ "${PdBIUVT_CMIN[$PdBIUVT_OBJI]}" > 0.0 && "${PdBIUVT_CMAX[$PdBIUVT_OBJI]}" > 0.0 ]]; then
        TEMP_CCVMIN=$(echo "calc ((${PdBIUVT_CMIN[$PdBIUVT_OBJI]}-$PdBIUVT_CHAN_CREF)*$PdBIUVT_VELO_RESL+$PdBIUVT_VELO_CREF)" | sm) # channel corresponding velocity
        TEMP_CCVMAX=$(echo "calc ((${PdBIUVT_CMAX[$PdBIUVT_OBJI]}-$PdBIUVT_CHAN_CREF)*$PdBIUVT_VELO_RESL+$PdBIUVT_VELO_CREF)" | sm) # channel corresponding velocity
        ##PdBIUVT_CCVMIN=("${PdBIUVT_CCVMIN[@]}" "$TEMP_CCVMIN") # channel corresponding velocity
        ##PdBIUVT_CCVMAX=("${PdBIUVT_CCVMAX[@]}" "$TEMP_CCVMAX") # channel corresponding velocity
        
        echo ""
        echo "Line Velo selected between $TEMP_CCVMIN $TEMP_CCVMAX  [km/s]"   "(input ${PdBIUVT_VMIN[$PdBIUVT_OBJI]} ${PdBIUVT_VMAX[$PdBIUVT_OBJI]}  [km/s])"
        echo "Line Chan selected between ${PdBIUVT_CMIN[$PdBIUVT_OBJI]} ${PdBIUVT_CMAX[$PdBIUVT_OBJI]}        "
        echo "Line Freq selected between ${PdBIUVT_FMIN[$PdBIUVT_OBJI]} ${PdBIUVT_FMAX[$PdBIUVT_OBJI]}  [GHz]"  "(aligned to channel center)"
        echo "Line Freq selected width  " $(echo "calc (${PdBIUVT_CMAX[$PdBIUVT_OBJI]} - ${PdBIUVT_CMIN[$PdBIUVT_OBJI]} + 1) * abs($PdBIUVT_FREQ_RESL) / 1e3" | sm) " [GHz]"
        echo "Line Velo selected width  " $(echo "calc (${PdBIUVT_CMAX[$PdBIUVT_OBJI]} - ${PdBIUVT_CMIN[$PdBIUVT_OBJI]} + 1) * abs($PdBIUVT_VELO_RESL)      " | sm) " [km/s]"
        
        if [[ x"$PdBIUVT_LINE_NAME" == x"CO(3-2)" ]]; then
            echo "******************************************"
            echo "Line $PdBIUVT_LINE_NAME has a redshift of "$(echo "calc 345.7959899/((${PdBIUVT_FMIN[$PdBIUVT_OBJI]}+${PdBIUVT_FMAX[$PdBIUVT_OBJI]})/2.0)-1.0" | sm)
            echo "******************************************"
        fi
        if [[ x"$PdBIUVT_LINE_NAME" == x"CO(5-4)" || x"$PdBIUVT_LINE_NAME" == x"CO54" ]]; then
            echo "******************************************"
            echo "Line $PdBIUVT_LINE_NAME has a redshift of "$(echo "calc 576.2679305/((${PdBIUVT_FMIN[$PdBIUVT_OBJI]}+${PdBIUVT_FMAX[$PdBIUVT_OBJI]})/2.0)-1.0" | sm)
            echo "******************************************"
        fi
    fi
done
# 
# read the pointing center of telescope i.e. center RA Dec of FoV 
# 
if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" ]]; then
    PdBIUVT_TEMP_TEXT=$(cat header.txt | grep 'Right Ascension')
    PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
    PdBIUVT_RANX_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 3)
    PdBIUVT_DECX_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 5)
    PdBIUVT_RAND_CENT=$(radec2degree "$PdBIUVT_RANX_CENT" "$PdBIUVT_DECX_CENT" | cut -d ' ' -f 1)
    PdBIUVT_DECD_CENT=$(radec2degree "$PdBIUVT_RANX_CENT" "$PdBIUVT_DECX_CENT" | cut -d ' ' -f 2)
fi
# 
# <TODO> might be useful -- convert Lii Bii to RA Dec
# 
# if [[ x"$PdBIUVT_RANX_CENT" == x"00:00:00.000" || x"$PdBIUVT_DECX_CENT" == x"00:00:00.00" ]]; then
# PdBIUVT_TEMP_TEXT=$(cat header.txt | grep 'Lii' | grep 'Bii')
# PdBIUVT_TEMP_TEXT=$(echo $PdBIUVT_TEMP_TEXT | sed -e 's/^ *//g' | tr -s ' ') # clean string
# PdBIUVT_LIIX_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 2)
# PdBIUVT_BIIX_CENT=$(echo $PdBIUVT_TEMP_TEXT | cut -d ' ' -f 4)
# ~/Software/iraf/iraf.macx.x86_64/noao/bin.macintel/x_astutil.e galactic in_coords="galactic" print_coords=yes << EOF
# STDIN
# $PdBIUVT_LIIX_CENT $PdBIUVT_BIIX_CENT 2000.
# EOF
# fi
# 
# if telescope pointing not found, then use object RA Dec
# 
if [[ x"$PdBIUVT_RANX_CENT" == x"" || x"$PdBIUVT_DECX_CENT" == x"" ]]; then
    PdBIUVT_RAND_CENT=(${PdBIUVT_RAND_OBJT[0]})
    PdBIUVT_DECD_CENT=(${PdBIUVT_DECD_OBJT[0]})
    PdBIUVT_RANX_CENT=(${PdBIUVT_RANX_OBJT[0]})
    PdBIUVT_DECX_CENT=(${PdBIUVT_DECX_OBJT[0]})
    echo 
    echo Warning! Telescope pointing was not found! We will use object radec instead!
    echo 
fi
# 
# prepare gildas/mapping init and script and run
# 
PdBIUVT_TEMP_INIT="$PdBIUVT_SAVE.init"
PdBIUVT_TEMP_EXEC="$PdBIUVT_SAVE.map"
PdBIUVT_TEMP_LOGT="$PdBIUVT_SAVE.log"
# 
# loop each object (according to the input radec pairs)
# 
for (( PdBIUVT_OBJI = 0; PdBIUVT_OBJI < "${#PdBIUVT_RAND_OBJT[@]}"; PdBIUVT_OBJI++ )); do
    
    PdBIUVT_RANS_OFFT=$(printf "%0.3f\n" $(echo "calc (${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]} - $PdBIUVT_RAND_CENT) * 3600.0" | sm)) # RA offset
    PdBIUVT_DECS_OFFT=$(printf "%0.3f\n" $(echo "calc (${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]} - $PdBIUVT_DECD_CENT) * 3600.0" | sm)) # DEC offset
    
    echo 
    echo Tel R.A. = $PdBIUVT_RANX_CENT 
    echo Tel Dec. = $PdBIUVT_DECX_CENT 
    echo Tel R.A. = $PdBIUVT_RAND_CENT 
    echo Tel Dec. = $PdBIUVT_DECD_CENT 
    echo Obj R.A. = ${PdBIUVT_RANX_OBJT[$PdBIUVT_OBJI]} 
    echo Obj Dec. = ${PdBIUVT_DECX_OBJT[$PdBIUVT_OBJI]} 
    echo Obj R.A. = ${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]} 
    echo Obj Dec. = ${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]} 
    echo Obj R.A. offset = $PdBIUVT_RANS_OFFT arcsec
    echo Obj Dec. offset = $PdBIUVT_DECS_OFFT arcsec
    
    if [[ $PdBIUVT_OBJI -eq 0 ]]; then
    echo  '! '                                                                                                                  > $PdBIUVT_TEMP_INIT
    echo  '! Task UV_FIT (new version R. Lucas)'                                                                               >> $PdBIUVT_TEMP_INIT
    echo  '! 6 parameters needed for all functions'                                                                            >> $PdBIUVT_TEMP_INIT
    echo  '!'                                                                                                                  >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "UV Table: "                     UVTABLE$       "'$PdBIUVT_NAME'"'                                   >> $PdBIUVT_TEMP_INIT
    echo  'TASK\INTEGER   "Channels: "                     CHANNEL$[2]     '$PdBIUVT_CHAN_MINI $PdBIUVT_CHAN_MAXI              >> $PdBIUVT_TEMP_INIT
    echo  'TASK\REAL      "UV Range: "                     UV_RANGE$[2]    '"0 19600"                                          >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Result Fits Table: "            RESULT$        "'$PdBIUVT_NAME.uv_fit.fits'"'                       >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Residual UV Table: "            RESIDUALS$     "'$PdBIUVT_RESI'"'                                   >> $PdBIUVT_TEMP_INIT
    echo  'TASK\INTEGER   "Number of Functions"            NF$             '"${#PdBIUVT_RAND_OBJT[@]}"                         >> $PdBIUVT_TEMP_INIT
    echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
    echo  '! Functions '                                                                                                       >> $PdBIUVT_TEMP_INIT
    echo  '! (POINT, C_GAUSS, E_GAUSS, C_DISK, '                                                                               >> $PdBIUVT_TEMP_INIT
    echo  '!  E_DISK, RING, EXP, POWER-2, POWER-3)'                                                                            >> $PdBIUVT_TEMP_INIT
    echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
    echo  '! --- begin repeat ---'                                                                                             >> $PdBIUVT_TEMP_INIT
    fi
    PdBIUVT_OBJN=$(printf "%02d" $(bc <<< $PdBIUVT_OBJI+1))
    PdBIUVT_OBJV=$(bc <<< $PdBIUVT_VARY-1)
    echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
    echo  "! --- $PdBIUVT_OBJN"                                                                                                >> $PdBIUVT_TEMP_INIT
    echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
    echo  'TASK\CHARACTER "Function"            FUNCT'$PdBIUVT_OBJN'$       '"$PdBIUVT_FUNC"                                   >> $PdBIUVT_TEMP_INIT
    echo  'TASK\REAL      "Parameters"          PARAM'$PdBIUVT_OBJN'$[7]    '$PdBIUVT_RANS_OFFT $PdBIUVT_DECS_OFFT 1 .5 1 0 0  >> $PdBIUVT_TEMP_INIT
    echo  'TASK\REAL      "Starting range"      RANGE'$PdBIUVT_OBJN'$[7]    ' 0 0 0 0 0 0 0                                    >> $PdBIUVT_TEMP_INIT
    echo  'TASK\INTEGER   "number of starts"    START'$PdBIUVT_OBJN'$[7]    '$PdBIUVT_OBJV $PdBIUVT_OBJV 0 0 0 0 0             >> $PdBIUVT_TEMP_INIT
    echo  'TASK\LOGICAL   "Subtract function"   SUBSF'$PdBIUVT_OBJN'$       '$PdBIUVT_RSUB                                     >> $PdBIUVT_TEMP_INIT
    if [[ $(bc <<<  $PdBIUVT_OBJI+1) -eq "${#PdBIUVT_RAND_OBJT[@]}" ]]; then
    echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
    echo  '! --- end repeat ---'                                                                                               >> $PdBIUVT_TEMP_INIT
    echo  '! '                                                                                                                 >> $PdBIUVT_TEMP_INIT
    echo  'TASK\GO'                                                                                                            >> $PdBIUVT_TEMP_INIT
    echo  "let name $PdBIUVT_NAME"                        > $PdBIUVT_TEMP_EXEC
    echo  "let type lmv"                                 >> $PdBIUVT_TEMP_EXEC
    echo  "let size $PdBIUVT_SIZE"                       >> $PdBIUVT_TEMP_EXEC
    echo  "run uv_fit $PdBIUVT_TEMP_INIT /NOWINDOW"      >> $PdBIUVT_TEMP_EXEC
    fi
    
done
# 
# DEBUG
# 
# exit
# 
# Run GILDAS/mapping
# 
echo  "@$PdBIUVT_TEMP_EXEC  |  mapping  > "$PdBIUVT_TEMP_LOGT
echo  "@$PdBIUVT_TEMP_EXEC" |  mapping  >  $PdBIUVT_TEMP_LOGT
# 
# loop each object (according to the input radec pairs)
# 
for (( PdBIUVT_OBJI = 0; PdBIUVT_OBJI < "${#PdBIUVT_RAND_OBJT[@]}"; PdBIUVT_OBJI++ )); do
    
    # Get the Result of Velocity
    PdBIUVT_VELO_OBJT=$(grep 'Velocity=' "$PdBIUVT_TEMP_LOGT" | cut -c 60- | sed -e 's/=//g' | tr -s ' ' | cut -d ' ' -f 2)
    
    # Get the Result of Flux
    PdBIUVT_TEMP_OBJM=$(bc <<< "${#PdBIUVT_RAND_OBJT[@]}*3") # r.m.s. and N*3 following lines
    PdBIUVT_TEMP_TEXT=$(grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' "$PdBIUVT_TEMP_LOGT")
    PdBIUVT_TEMP_OBJJ=$(bc <<< "($PdBIUVT_OBJI+1)")
    PdBIUVT_TEMP_OBJI=$(bc <<< "($PdBIUVT_OBJI+1)*3+1") # 1+3p, 1+6p, 1+9p is flux
    PdBIUVT_TEMP_OBJN=$(bc <<< "${#PdBIUVT_RAND_OBJT[@]}*3+1+1") 
    # echo awk "NR%$PdBIUVT_TEMP_OBJN==$PdBIUVT_TEMP_OBJI"
    PdBIUVT_FMOD_OBJT=$(grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJN==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *FLUX *=(.*) [(](.*)[)]/\1/g')
    PdBIUVT_FLUX_OBJT=$(grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJN==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *FLUX *=(.*) [(](.*)[)]/\2/g')
    PdBIUVT_FERR_OBJT=$(grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJN==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *FLUX *=(.*) [(](.*)[)]/\3/g')
                        grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -A $PdBIUVT_TEMP_OBJM ' r.m.s. *=' | awk "NR%$PdBIUVT_TEMP_OBJN==$PdBIUVT_TEMP_OBJI" | sed -E 's/ *(.*) *=(.*) [(](.*)[)]/\1 \2 \3/g' > tmp_ObjFlux.$PdBIUVT_TEMP_OBJJ
                      # grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep -B  2                 ' r.m.s. *=' | awk "NR%4==1"                                   | sed -E 's/.*Velocity *= *(.*)/Velocity   \1/g' > tmp_ObjVelo.$PdBIUVT_TEMP_OBJJ
                        grep -v 'STOP' "$PdBIUVT_TEMP_LOGT" | grep 'Starting minimization on channel.*Velocity.*=.*'                                    | sed -E 's/.*Velocity *= *(.*)/Velocity   \1/g' > tmp_ObjVelo.$PdBIUVT_TEMP_OBJJ
    
    # echo PdBIUVT_FMOD_OBJT=$PdBIUVT_FMOD_OBJT
    # echo PdBIUVT_FLUX_OBJT=$PdBIUVT_FLUX_OBJT
    # echo PdBIUVT_FERR_OBJT=$PdBIUVT_FERR_OBJT
    # echo PdBIUVT_FUNT_OBJT=$PdBIUVT_FUNT_OBJT
    # exit
    
    # 
    # prepare plot
    rm tmp_ObjFlux 2>/dev/null
    rm tmp_ObjVelo 2>/dev/null
    cp tmp_ObjFlux.$PdBIUVT_TEMP_OBJJ tmp_ObjFlux
    cp tmp_ObjVelo.$PdBIUVT_TEMP_OBJJ tmp_ObjVelo
    
    # 
    # do plot
sm << EOF
    # set freq_Cen = $PdBIUVT_FREQ_CENT # MHz
    set freq_Ref = $PdBIUVT_FREQ_CREF # MHz
    set freq_Bin = $PdBIUVT_FREQ_CBIN # MHz
    set chan_Ref = $PdBIUVT_CHAN_CREF # 
    set velo_Ref = $PdBIUVT_VELO_CREF # km/s
    set velo_Bin = $PdBIUVT_VELO_RESL # km/s
    set velo_Off = $PdBIUVT_VELO_OFFS # km/s
    set ra_Obj = ${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]}
    set de_Obj = ${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]}
    set id_Str = {"$PdBIUVT_NAME"}
    set velo_low = ${PdBIUVT_VMIN[$PdBIUVT_OBJI]} # $PdBIUVT_VMIN
    set velo_high = ${PdBIUVT_VMAX[$PdBIUVT_OBJI]} # $PdBIUVT_VMAX
    echo 
    echo set freq_Ref = $PdBIUVT_FREQ_CREF # MHz
    echo set freq_Bin = $PdBIUVT_FREQ_CBIN # MHz
    echo set chan_Ref = $PdBIUVT_CHAN_CREF # 
    echo set velo_Ref = $PdBIUVT_VELO_CREF # km/s
    echo set velo_Bin = $PdBIUVT_VELO_RESL # km/s
    echo set velo_Off = $PdBIUVT_VELO_OFFS # km/s
    echo set ra_Obj = ${PdBIUVT_RAND_OBJT[$PdBIUVT_OBJI]}
    echo set de_Obj = ${PdBIUVT_DECD_OBJT[$PdBIUVT_OBJI]}
    echo set id_Str = {"$PdBIUVT_NAME"}
    echo set velo_low = ${PdBIUVT_VMIN[$PdBIUVT_OBJI]} # $PdBIUVT_VMIN
    echo set velo_high = ${PdBIUVT_VMAX[$PdBIUVT_OBJI]} # $PdBIUVT_VMAX
    echo macro read \""$(dirname $0)/pdbi-uvt-go-uvfit.sm"\" goUVFIT_PlotVeloAmpl
    echo 
    macro read "$(dirname $0)/pdbi-uvt-go-uvfit.sm" goUVFIT_PlotVeloAmpl
    
EOF
    
    if [[ "${#PdBIUVT_RAND_OBJT[@]}" -gt 1 ]]; then
        mv tmp_doUVFIT.eps $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.eps
        mv tmp_doUVFIT.dat $PdBIUVT_SAVE.$PdBIUVT_TEMP_OBJJ.dat
    fi
    # open tmp_doUVFIT.eps

done

