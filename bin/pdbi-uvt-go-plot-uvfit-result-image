#!/bin/bash
# 
# plot image using GILDAS GREG
# 
# 20190501: GILDAS now does not allow white space in '' quoted expression..
# 20190606: fix new GILDAS missing telescope issue "GO TELES noema|alma|aca|..."


if [[ $# -lt 1 ]]; then
    echo "Usage: "
    echo "    pdbi-uvt-go-plot-uvfit-result-image aaa.uvt -radec ra dec -offset xoff yoff [-output output_name]"
    echo ""
    echo "Notes: "
    echo "    (1) If you input multiple \"-offset\" values, then that means multiple objects. "
    echo "        If the data has multiple channels, then all input objects will be highlighted by a black square in each channel map."
    echo "        If you want to highlight one object but different positions for channel maps, "
    echo "        then please set \"-offset-per-channel\" with all position pairs ordered by channel number (x1,y1,x2,y2,x3,y3,...)."
    echo ""
    exit
fi

function Is_Float_Number() {
    # http://stackoverflow.com/questions/13790763/bash-regex-to-check-floating-point-numbers-from-user-input
    #echo $1
    if [[ $# -ge 1 ]]; then
        #regExp='^[+-]?([0-9]+\.?|[0-9]*\.[0-9]+)$'
        regExp='^([+-])?([0-9]+\.?|[0-9]*\.[0-9]+)([eE][+-]?[0-9]+)?$'
        if [[ "$1" =~ $regExp ]]; then
            #echo "That is a number!"
            return 0
        else
            #echo "Damn! Not A Number!"
            #seq  -f "*" -s '' $(echo "${#1}+7+2+23" | bc); echo
            #echo "Error! \"$1\" is not a float number!"
            #seq  -f "*" -s '' $(echo "${#1}+7+2+23" | bc); echo
            #exit -1
            return 200
        fi
    fi
    return 200
}

uv_filename=$(echo $1 | sed -e 's/\.uvt$//g')
echo "uv_filename = $uv_filename"

echo "! GILDAS MAPPING SCRIPT" > "pdbi_uvt_go_plot_uvfit_result_image.map"

echo "let name \"$uv_filename\"" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let map_size 1024" >> "pdbi_uvt_go_plot_uvfit_result_image.map" #<Added><20170909># 
echo "let uv_shift no" >> "pdbi_uvt_go_plot_uvfit_result_image.map"

# 20190606 fix new GILDAS missing telescope issue "GO TELES noema|alma|aca|..."
echo "define header UVT_HEADER 'name'.uvt read" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "if (UVT_HEADER%NTEL.EQ.0) then" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "say \"Warning! No Telescope information found in the uvtable! Assuming NOEMA!\"" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let type uvt" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "go teles noema" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "endif" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "delete /variable UVT_HEADER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"

# 
# 2018-02-08 
if [[ $* == *"-center "* ]]; then
    mcenter=($(echo $* | perl -p -e 's/.* -center +([0-9.+-Ee:]+) +([0-9.+-Ee:]+).*/\1 \2/g'))
    if [[ ${#mcenter[@]} -eq 2 ]]; then
        if [[ ${mcenter[0]} == *":"* || ${mcenter[1]} == *":"* ]]; then
            mcenter_sexagement=(${mcenter[@]})
        else
            mcenter_sexagement=($(degree2radec ${mcenter[0]} ${mcenter[1]}))
        fi
        if [[ ${#mcenter_sexagement[@]} -eq 2 ]]; then
            echo "let map_ra ${mcenter_sexagement[0]}" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
            echo "let map_dec ${mcenter_sexagement[1]}" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
            echo "let uv_shift yes" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        else
            echo "Error! Failed to parse -center ${mcenter[0]} ${mcenter[1]}! Please provide map center RA Dec in sexagesimal!"
            exit 1
        fi
    fi
fi
# 
echo "go uvmap" >> "pdbi_uvt_go_plot_uvfit_result_image.map" #<Added><20170816># 
# 
#echo "!define header UVT_HEADER 'name'.uvt read" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define real PHASE_CENTER_RA" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define real PHASE_CENTER_DEC" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "let PHASE_CENTER_RA = SETUP%INT%A0%RAD" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "let PHASE_CENTER_DEC = SETUP%INT%D0%RAD" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "if (uv_shift.EQ.yes) then" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let PHASE_CENTER_RA = 'SETUP%INT%CENT%RAD[1]/12.0*pi' ! see integ/pro/p_setup.map, but only when uv_shift yes" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let PHASE_CENTER_DEC = 'SETUP%INT%CENT%RAD[2]/180.0*pi' ! see integ/pro/p_setup.map, but only when uv_shift yes" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "else" >> "pdbi_uvt_go_plot_uvfit_result_image.map" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let PHASE_CENTER_RA = 'SETUP%INT%CENT%RAD[1]' ! see integ/pro/p_setup.map, when uv_shift is no" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let PHASE_CENTER_DEC = 'SETUP%INT%CENT%RAD[2]' ! see integ/pro/p_setup.map, when uv_shift is no" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "endif" >> "pdbi_uvt_go_plot_uvfit_result_image.map" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
echo "fits 'name'.lmv-dirty.fits from 'name'.lmv /overwrite" >> "pdbi_uvt_go_plot_uvfit_result_image.map" #<Added><20170909># 
echo "let type lmv" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "read uv 'name'.uvt" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "INPUT UV_MAP" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "UV_MAP" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "UV_STAT WEIGHT" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "UV_MAP" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "go uvmap" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "read dirty 'name'.lmv" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "read beam 'name'.beam" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "!go bit" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
#echo "let size 30" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
if [[ $* == *"-size "* ]]; then
    msize=($(echo $* | perl -p -e 's/.* -size[ ]+([0-9.+-]+).*/\1/g'))
    if [[ $(awk "BEGIN {if ($msize>0) print 1; else print 0;}") -eq 1 ]]; then
        echo "let size $msize" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
    fi
fi
if [[ $* == *"-fov "* ]]; then
    msize=($(echo $* | perl -p -e 's/.* -fov[ ]+([0-9.+-]+).*/\1/g'))
    if [[ $(awk "BEGIN {if ($msize>0) print 1; else print 0;}") -eq 1 ]]; then
        echo "let size $msize" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
    fi
fi
if [[ $* == *"-FoV "* ]]; then
    msize=($(echo $* | perl -p -e 's/.* -FoV[ ]+([0-9.+-]+).*/\1/g'))
    if [[ $(awk "BEGIN {if ($msize>0) print 1; else print 0;}") -eq 1 ]]; then
        echo "let size $msize" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
    fi
fi
# 
echo "let niter 1" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "clean" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
#echo "write * 'name'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "write clean 'name'.lmv-clean" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "fits 'name'.lmv-clean.fits from 'name'.lmv-clean /overwrite" >> "pdbi_uvt_go_plot_uvfit_result_image.map" #<Added><20170909># 
echo "let type lmv-clean" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "go noise" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
if [[ $* == *"-spacing "* ]]; then
    #spacing=($(echo $* | perl -p -e 's/.* -spacing[ ]+([0-9.+-:]+)[ ]+([0-9.+-:]+).*/\1 \2/g')) # must be in degrees
    spacing_arg=0
    spacing=()
    for (( i=1; i<=$#; i++ )); do
        if [[ "${!i}" == "-spacing" ]]; then spacing_arg=1; continue; fi
        if [[ $spacing_arg -eq 1 ]]; then
            spacing_str=$(echo "${!i}" | sed -e 's/://g')
            if Is_Float_Number "$spacing_str"; then
                spacing+=("${!i}")
            else
                spacing_arg=0
            fi
        fi
    done
    echo "Setting spacing ${spacing}*noise"
    echo "let spacing ${spacing}*noise" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
else
    echo "let spacing noise" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
fi
# 
#echo "lut rainbow3" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let do_bit yes" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let do_contour yes" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
if [[ $* == *"-noheader"* ]]; then
echo "let do_header no" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
fi
# 
echo "PENCIL /COLOUR BLACK /WEIGHT 2" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "go nice" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
echo "define real OBJ_RA_RAD" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define real OBJ_DEC_RAD" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define real OBJ_RA_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define real OBJ_DEC_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define real OBJ_BOX_SIZE" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define integer OBJ_PANEL_X" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "define integer OBJ_PANEL_Y" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
if [[ $* == *"-radec "* ]]; then
    #radec=($(echo $* | perl -p -e 's/.* -radec[ ]+([0-9.+-:]+)[ ]+([0-9.+-:]+).*/\1 \2/g')) # must be in degrees
    radec_arg=0
    radec=()
    for (( i=1; i<=$#; i++ )); do
        if [[ "${!i}" == "-radec" ]]; then radec_arg=1; continue; fi
        if [[ $radec_arg -eq 1 ]]; then
            radec_str=$(echo "${!i}" | sed -e 's/://g')
            if Is_Float_Number "$radec_str"; then
                radec+=("${!i}")
            else
                radec_arg=0
            fi
        fi
    done
    echo "Setting radec ${radec[@]}"
    while [[ ${#radec[@]} -ge 2 ]]; do
        if [[ ${radec[0]} == *":"* || ${radec[1]} == *":"* ]]; then
            radec_sexagement=(${radec[@]})
            radec_degree=($(radec2degree ${radec_sexagement[0]} ${radec_sexagement[1]}))
            ra_radian=$(awk "BEGIN {printf \"%0.15f\", (${radec_degree[0]})/180.0*3.14159265358979}")
            dec_radian=$(awk "BEGIN {printf \"%0.15f\", (${radec_degree[1]})/180.0*3.14159265358979}")
        else
            ra_radian=$(awk "BEGIN {printf \"%0.15f\", (${radec[0]})/180.0*3.14159265358979}")
            dec_radian=$(awk "BEGIN {printf \"%0.15f\", (${radec[1]})/180.0*3.14159265358979}")
        fi
        radec=(${radec[@]:2})
        echo "ra_radian = $ra_radian"
        echo "dec_radian = $dec_radian"
        echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "FOR radec_in_panel_x 1 TO NX_BOX" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "FOR radec_in_panel_y 1 TO NY_BOX" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "SAY \"find_window_position \"'radec_in_panel_x'\" \"'radec_in_panel_y'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "@ find_window_position 'radec_in_panel_x' 'NY_BOX-radec_in_panel_y+1' ! see p_plotfit.map find_window_position ! IMPORTANT <20180215> I verified that the first panel is at bottom-right, but the first channel is at top-left!" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        #echo "LET OBJ_DEC_OFF = '($dec_radian - UVT_HEADER%D0)'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        #echo "LET OBJ_RA_OFF = '($ra_radian - UVT_HEADER%A0) * COS(UVT_HEADER%D0)'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_RA_RAD = $ra_radian" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_DEC_RAD = $dec_radian" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_RA_OFF = '($ra_radian - PHASE_CENTER_RA) * COS(PHASE_CENTER_DEC)'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_DEC_OFF = '($dec_radian - PHASE_CENTER_DEC)'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_BOX_SIZE = 2.0 ! draw box with size 2 arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "IF (OBJ_BOX_SIZE.LT.(SIZE[1]/15.0)) LET OBJ_BOX_SIZE = (SIZE[1]/15) ! prevent box size to be too small" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "IF (OBJ_BOX_SIZE.LT.(SIZE[2]/15.0)) LET OBJ_BOX_SIZE = (SIZE[2]/15) ! prevent box size to be too small" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_BOX_SIZE = 'OBJ_BOX_SIZE/3600.0/180.0*3.14159265358979' ! convert box size to radian" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM PHASE_CENTER_RA" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM PHASE_CENTER_DEC" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_RA_RAD" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_DEC_RAD" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_RA_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_DEC_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_BOX_SIZE" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "PENCIL /COLOUR BLACK /WEIGHT 3 ! draw box with line thickness 3" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW RELOCATE 'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF+OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF+OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF+OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF+OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "PENCIL 0" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "NEXT" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "NEXT" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
    done
fi
# 
if [[ $* == *"-offset "* ]] || [[ $* == *"-offset-per-object "* ]]; then
    #offset_per_object=($(echo $* | perl -p -e 's/.* -offset[ ]+([0-9.+-:]+)[ ]+([0-9.+-:]+).*/\1 \2/g')) # must be in degrees
    offset_per_object_arg=0
    offset_per_object=()
    for (( i=1; i<=$#; i++ )); do
        if [[ "${!i}" == "-offset" ]] || [[ "${!i}" == "-offset-per-object" ]]; then offset_per_object_arg=1; continue; fi
        if [[ $offset_per_object_arg -eq 1 ]]; then
            offset_per_object_str=$(echo "${!i}" | sed -e 's/://g')
            if Is_Float_Number "$offset_per_object_str"; then
                offset_per_object+=("${!i}")
            else
                offset_per_object_arg=0
            fi
        fi
    done
    echo "Setting offsets per object: ${offset_per_object[@]}"
    ioffset=0
    while [[ ${#offset_per_object[@]} -ge 2 ]]; do
        ra_offset_per_object=${offset_per_object[0]}
        dec_offset_per_object=${offset_per_object[1]}
        offset_per_object=(${offset_per_object[@]:2})
        echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "say \"ra_offset_per_object = $ra_offset_per_object\" ! arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "say \"dec_offset_per_object = $dec_offset_per_object\" ! arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "FOR offset_in_panel_x 1 TO NX_BOX" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "FOR offset_in_panel_y 1 TO NY_BOX" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "SAY \"find_window_position \"'offset_in_panel_x'\" \"'offset_in_panel_y'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "@ find_window_position 'offset_in_panel_x' 'NY_BOX-offset_in_panel_y+1' ! see p_plotfit.map find_window_position ! IMPORTANT <20180215> I verified that the first panel is at bottom-right, but the first channel is at top-left!" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_DEC_OFF = '($dec_offset_per_object)/3600.0/180.0*3.14159265358979'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_RA_OFF = '($ra_offset_per_object)/3600.0/180.0*3.14159265358979'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_BOX_SIZE = 2.0 ! draw box with size 2 arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "IF (OBJ_BOX_SIZE.LT.(SIZE[1]/15.0)) LET OBJ_BOX_SIZE = (SIZE[1]/15) ! prevent box size to be too small" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "IF (OBJ_BOX_SIZE.LT.(SIZE[2]/15.0)) LET OBJ_BOX_SIZE = (SIZE[2]/15) ! prevent box size to be too small" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_BOX_SIZE = 'OBJ_BOX_SIZE/3600.0/180.0*3.14159265358979' ! convert box size to radian" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_RA_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_DEC_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_BOX_SIZE" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "PENCIL /COLOUR BLACK /WEIGHT 3 ! draw box with line thickness 3" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW RELOCATE 'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF+OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF+OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF+OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF+OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "PENCIL 0" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "NEXT" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "NEXT" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        ioffset=$((ioffset+1))
    done
fi
# 
if [[ $* == *"-offset-per-channel "* ]]; then
    #offset_per_channel=($(echo $* | perl -p -e 's/.* -offset-per-channel[ ]+([0-9.+-:]+)[ ]+([0-9.+-:]+).*/\1 \2/g')) # must be in degrees
    offset_per_channel_arg=0
    offset_per_channel=()
    for (( i=1; i<=$#; i++ )); do
        if [[ "${!i}" == "-offset-per-channel" ]]; then offset_per_channel_arg=1; continue; fi
        if [[ $offset_per_channel_arg -eq 1 ]]; then
            offset_per_channel_str=$(echo "${!i}" | sed -e 's/://g')
            if Is_Float_Number "$offset_per_channel_str"; then
                offset_per_channel+=("${!i}")
            else
                offset_per_channel_arg=0
            fi
        fi
    done
    echo "Setting offsets per channel: ${offset_per_channel[@]}"
    ioffset=0
    while [[ ${#offset_per_channel[@]} -ge 2 ]]; do
        ra_offset_per_channel=${offset_per_channel[0]}
        dec_offset_per_channel=${offset_per_channel[1]}
        offset_per_channel=(${offset_per_channel[@]:2})
        echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "say \"-----------------------------------------------------\"" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "say \"ra_offset_per_channel = $ra_offset_per_channel\" ! arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "say \"dec_offset_per_channel = $dec_offset_per_channel\" ! arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_PANEL_X = mod($ioffset,NX_BOX)+1" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_PANEL_Y = int($ioffset/NX_BOX)+1" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "FOR /WHILE (OBJ_PANEL_Y.GT.NY_BOX)" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_PANEL_Y = OBJ_PANEL_Y - NY_BOX" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "NEXT" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "SAY \"find_window_position \"'OBJ_PANEL_X'\" \"'OBJ_PANEL_Y'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "@ find_window_position 'OBJ_PANEL_X' 'NY_BOX-OBJ_PANEL_Y+1' ! see p_plotfit.map find_window_position ! IMPORTANT <20180215> I verified that the first panel is at bottom-right, but the first channel is at top-left!" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_DEC_OFF = '($dec_offset_per_channel)/3600.0/180.0*3.14159265358979'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_RA_OFF = '($ra_offset_per_channel)/3600.0/180.0*3.14159265358979'" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_BOX_SIZE = 2.0 ! draw box with size 2 arcsec" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "IF (OBJ_BOX_SIZE.LT.(SIZE[1]/15.0)) LET OBJ_BOX_SIZE = (SIZE[1]/15) ! prevent box size to be too small" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "IF (OBJ_BOX_SIZE.LT.(SIZE[2]/15.0)) LET OBJ_BOX_SIZE = (SIZE[2]/15) ! prevent box size to be too small" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "LET OBJ_BOX_SIZE = 'OBJ_BOX_SIZE/3600.0/180.0*3.14159265358979' ! convert box size to radian" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_RA_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_DEC_OFF" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "EXAM OBJ_BOX_SIZE" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "PENCIL /COLOUR BLACK /WEIGHT 3 ! draw box with line thickness 3" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW RELOCATE 'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF+OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF+OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF+OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF+OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "DRAW LINE     'OBJ_RA_OFF-OBJ_BOX_SIZE/2' 'OBJ_DEC_OFF-OBJ_BOX_SIZE/2' /USER" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        echo "PENCIL 0" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
        ioffset=$((ioffset+1))
    done
    echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
    echo "say \"-----------------------------------------------------\"" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
    echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
fi
# 
#echo "LET DO_HEADER NO" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "LET DO_NICE YES" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
#<20180215># also print FoV on the figure
if [[ $* != *"-noheader"* ]]; then
echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "! print FoV" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "let aspect_ratio no ! see p_plotfit.map procedure fitheader" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "@ header_position ! see p_plotfit.map procedure fitheader" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "@ window_xy 1 1 1 ! see p_plotfit.map procedure fitheader" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "set expand 0.8 ! see p_plotfit.map procedure fitheader" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "PENCIL /COLOUR BLACK /WEIGHT 2" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "draw text .5 -9 \"\\\\iFoV:\\\\i \"'SIZE[1]'\" x \"'SIZE[2]'\" arcsec\" 6 /box 7" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
#echo "@ plot_position ! see p_plotfit.map" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
fi
# 
echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "hardcopy pdbi_uvt_go_plot_uvfit_result_image.eps /OVERWRITE" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
echo "" >> "pdbi_uvt_go_plot_uvfit_result_image.map"
# 
echo "@pdbi_uvt_go_plot_uvfit_result_image.map | mapping -nw -nl"
echo "@pdbi_uvt_go_plot_uvfit_result_image.map" | mapping -nw -nl
# 
if [[ -f "pdbi_uvt_go_plot_uvfit_result_image.eps" ]]; then
    ps2pdf -dEPSCrop "pdbi_uvt_go_plot_uvfit_result_image.eps" "pdbi_uvt_go_plot_uvfit_result_image.pdf"
fi
# 
# Final output
if [[ $* == *"-output "* ]]; then
    output=($(echo $* | perl -p -e 's/.* -output[ ]+([^ ]+).*/\1/g')) # must be in degrees
    for i in map pdf; do
        mv "pdbi_uvt_go_plot_uvfit_result_image.${i}" "${output}.${i}"
        echo "Output to \"${output}.${i}\""
    done
fi



