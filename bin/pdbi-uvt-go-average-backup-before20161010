#!/bin/bash
# 
# Input UV table file name
# Output spec & uv_average
# 
# 
# Usage
# 
PdBIUVT_PrintUsage() {
    echo "Usage: "
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME -crange 1 50 55 90 [-out PdBIUVT_NAME-Averaged]"
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME -linefreq 89.098 -linewidth 450 [-out PdBIUVT_NAME-Averaged]"
    echo "    pdbi-uvt-go-average -name PdBIUVT_NAME -redshift 2.055 -linename \"CO(3-2)\" -linewidth 450 [-out PdBIUVT_NAME-Averaged]"
}
if [[ $# -eq 0 ]]; then
    PdBIUVT_PrintUsage
    exit
fi
# 
# LANG
# 
LANG=C
#
# readlink
# 
if [[ $(uname) == *"Darwin"* ]]; then
    function readlink() {
        if [[ $# -gt 1 ]]; then if [[ "$1" == "-f" ]]; then shift; fi; fi
        DIR=$(echo "${1%/*}"); (cd "$DIR" && echo "$(pwd -P)/$(basename ${1})")
    }
fi
PdBIUVT_DIR=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
# 
# Call pdbi-uvt-core-cvf
# 
if [[ -f "$PdBIUVT_DIR/pdbi-uvt-core-cvf" ]]; then
    source "$PdBIUVT_DIR/pdbi-uvt-core-cvf" "$@"
else
    echo ""; echo "Error! Could not find \"$PdBIUVT_DIR/pdbi-uvt-core-cvf\"!"; echo ""
    exit
fi



# 
# 
# 
echo ""



# 
# Check output file
# 
# -- set output uvtable name, and check whether it exists
if [[ x"$PdBIUVT_SAVE" == x"" || x"$PdBIUVT_SAVE" == x"tmp_pdbi_uvt" ]]; then
    echo "Warning! Output uv table name not defined, we will set it to be ${PdBIUVT_NAME[0]}-Averaged.uvt!"
    PdBIUVT_SAVE="${PdBIUVT_NAME[0]}-Averaged"
fi
if [[ -f "$PdBIUVT_SAVE.uvt" ]]; then
    echo "Warning! Found previous \"$PdBIUVT_SAVE.uvt\"! Backup as \"$PdBIUVT_SAVE.uvt.backup\"!"
    cp "$PdBIUVT_SAVE.uvt" "$PdBIUVT_SAVE.uvt.backup"
fi



# 
# Check CRANGE list
# 
if [[ ${#PdBIUVT_CMIN[@]} -eq 0 || ${#PdBIUVT_CMAX[@]} -eq 0 || ${#PdBIUVT_CMIN[@]} != ${#PdBIUVT_CMAX[@]} ]]; then
    PdBIUVT_PrintUsage
    exit
fi

# 
# Prepare CRANGE list
# 
for (( i=0; i<1; i++ )); do
    if [[ ${PdBIUVT_CMIN[i]} -gt 0 && ${PdBIUVT_CMAX[i]} -gt 0 ]]; then
        PdBIUVT_CAGE="${PdBIUVT_CMIN[i]} ${PdBIUVT_CMAX[i]}"
    else
        PdBIUVT_CAGE="$PdBIUVT_CHAN_MIN $PdBIUVT_CHAN_MAX"
    fi
done
for (( i=1; i<${#PdBIUVT_CMIN[@]}; i++ )); do
    if [[ ${PdBIUVT_CMIN[i]} -gt 0 && ${PdBIUVT_CMAX[i]} -gt 0 ]]; then
        PdBIUVT_CAGE="$PdBIUVT_CAGE ${PdBIUVT_CMIN[i]} ${PdBIUVT_CMAX[i]}"
        ##echo "CRANGE: $PdBIUVT_CAGE"
    fi
done
echo ""
echo "CRANGE: $PdBIUVT_CAGE"
echo ""
# 
# prepare gildas/mapping init and script and run
# 
PdBIUVT_TEMP_INIT="tmp_doUVAVERAGE.init"
PdBIUVT_TEMP_EXEC="tmp_doUVAVERAGE.map"
PdBIUVT_TEMP_LOGT="tmp_doUVAVERAGE.log"
echo  '! '                                                                                       > $PdBIUVT_TEMP_INIT
echo  '! Task UV_AVERAGE'                                                                       >> $PdBIUVT_TEMP_INIT
echo  '! 6 parameters needed for all functions'                                                 >> $PdBIUVT_TEMP_INIT
echo  '!'                                                                                       >> $PdBIUVT_TEMP_INIT
echo  'TASK\CHARACTER "Input UV table"                   UV_INPUT$      "'$PdBIUVT_NAME'"'      >> $PdBIUVT_TEMP_INIT
echo  'TASK\CHARACTER "Output UV table"                  UV_OUTPUT$     "'$PdBIUVT_SAVE'"'      >> $PdBIUVT_TEMP_INIT
echo  'TASK\VALUES    "Channel range"                    RANGES$         '$PdBIUVT_CAGE         >> $PdBIUVT_TEMP_INIT
echo  'TASK\CHARACTER "Type of range"                    CTYPE$         "'"CHANNEL"'"'          >> $PdBIUVT_TEMP_INIT
echo  'TASK\GO'                                                                                 >> $PdBIUVT_TEMP_INIT
echo  "let name $PdBIUVT_NAME"                        > $PdBIUVT_TEMP_EXEC
echo  "let type lmv"                                 >> $PdBIUVT_TEMP_EXEC
#echo  "let size $PdBIUVT_SIZE"                       >> $PdBIUVT_TEMP_EXEC
echo  "run uv_average $PdBIUVT_TEMP_INIT /NOWINDOW"  >> $PdBIUVT_TEMP_EXEC
echo  '@tmp_doUVAVERAGE.map  |  mapping  > '"$PdBIUVT_TEMP_LOGT"
echo  '@tmp_doUVAVERAGE.map' |  mapping  >  "$PdBIUVT_TEMP_LOGT"
# 
# 
echo 
tail -n 1 "$PdBIUVT_TEMP_LOGT"
echo "I-RUN,  Output to $PdBIUVT_SAVE.uvt"
echo 

cp "$PdBIUVT_TEMP_INIT" "$PdBIUVT_SAVE.init"
cp "$PdBIUVT_TEMP_EXEC" "$PdBIUVT_SAVE.map"
cp "$PdBIUVT_TEMP_LOGT" "$PdBIUVT_SAVE.log"

