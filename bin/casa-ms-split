#!/bin/bash
# 
# Input field, name, width, 
# Output python script file (split,cvel,exportuvfits,uvmodelfit)
# 
# Last update:
#    2015-04-02 created
#    2016-06-27 automatically read SOURCE table, check input source, or loop all sources
#    2017-02-21 largely modified, using casa-command-line-arguments now.
#    2017-03-05 split each mosaic if there are multiple mosaic pointing for a same source name. 
# 



# Function to print usage
function usage() {
    echo ""
    echo "Usage: "
    echo ""
    echo "    (1)"
    echo "    casa-ms-split -vis calibrated.ms"
    echo ""
    echo "    The above example will split out each spw as a single-channel continuum for each source in the measurement set."
    echo ""
    echo "    (2)"
    echo "    casa-ms-split -vis calibrated.ms -width 4 -stokes \"RR LL\""
    echo ""
    echo "    The above example will split out each spw for each source in the measurement set. "
    echo "    Since \"-width\" is given, each spw will have a channel width of 4 (i.e. averaging every 4 original channels)."
    echo "    And since \"-stokes\" is also given, each stokes of each spw of each source will be split out."
    echo ""
    echo "    (3)"
    echo "    casa-ms-split -vis calibrated.ms -width \"2 64 0\" -stokes \"RR LL\""
    echo ""
    echo "    The above example will split out each spw for each source in the measurement set. "
    echo "    Since \"-width\" is given as a list, spw0 and spw1 will have a channel width of 2 and 64 respectively, while spw2 and the spws after spw2 will have the full width."
    echo "    And since \"-stokes\" is also given, each stokes of each spw of each source will be split out."
    echo ""
    echo "    (4)"
    echo "    casa-ms-split -vis calibrated.ms -spw \"0 2 4 6\" -width \"2 64 0\" -stokes \"RR LL\""
    echo ""
    echo "    The above example will split out spw0, spw2, spw4 and spw6 for each source in the measurement set. "
    echo "    Since \"-width\" is given as a list, spw0, spw2, spw4 and spw6 will have a channel width of 2, 64, full width and full width respectively."
    echo "    And since \"-stokes\" is also given, each stokes of each spw of each source will be split out."
    echo ""
    echo "    (5)"
    echo "    casa-ms-split -vis calibrated.ms -name SourceName-1 -spw \"0 2 4 6\" \\"
    echo "                                     -name SourceName-2 -spw \"1 3 5 7\" -width \"2 2 0\" \\"
    echo "                                     -name SourceName-3 -width 2"
    echo ""
    echo "    The above example will split out the spw0, spw2, spw4 and spw6 for SourceName-1; spw1, spw3, spw5 and spw7 for SourceName-2; and each spw for SourceName-3. "
    echo "    For SourceName-1, the 4 split spws will have the full width, i.e. be a single-channel continuum. "
    echo "    For SourceName-2, the 4 split spws will have channel width of 2, 2, full width and full width respectively. "
    echo "    For SourceName-3, all the split spws will have the full width. "
    echo ""
    #echo "    The acceptable arguments are \"-vis\" \"-name\" \"-spw\" \"-width\" \"-stokes\" \"-skyfreq\"."
    echo "Good luck!"
    echo ""
}



# 
# Read input parameters
# 
. $(dirname ${BASH_SOURCE[0]})/"casa-command-line-arguments" "$@"



# 
# Check input parameter -- vis
# 
if [[ ${#CASA_INP_VIS[@]} -eq 0 ]]; then usage; exit; fi



# 
# Prepare the output global script
# 
echo "#!/bin/bash"                                                               >  "run_casa_ms_split_all.bash"
echo ""                                                                          >> "run_casa_ms_split_all.bash"
echo "sources $(readlink -f $(dirname $(dirname ${BASH_SOURCE[0]}))/SETUP.bash)" >> "run_casa_ms_split_all.bash"
echo "#!/bin/bash"                                                               >  "run_casa_ms_split_all_step1.bash"
echo ""                                                                          >> "run_casa_ms_split_all_step1.bash"
echo "sources $(readlink -f $(dirname $(dirname ${BASH_SOURCE[0]}))/SETUP.bash)" >> "run_casa_ms_split_all_step1.bash"








# 
# Loop each input vis
# 
for (( ivis=0; ivis<${#CASA_INP_VIS[@]}; ivis++ )); do
    # 
    # Check SOURCE table
    # 
    CASAMS_VIS=$(readlink -f "${CASA_INP_VIS[ivis]}")
    
    if [[ ! -d "${CASAMS_VIS}/SOURCE" ]]; then
        echo ""
        echo "Error! Could not find \"${CASAMS_VIS}/SOURCE\"! The SOURCE table is missing?"
        echo ""
        exit
    fi
    



    # 
    # Check SOURCE and SPECTRAL_WINDOW table with casa
    # 
    CASAMS_TableSources=() # The list of sources in MS
    CASAMS_TableFields=() # The list of fields in MS, same dimension as source list. 
    CASAMS_TableWidths=() # The channel number list for all spws, has a dimension of spw number. 
    CASAMS_TableFreqs=() # The list of the ref freq of each spw, in Hz
    CASAMS_TableSpws=() # The list of list of spw for each source, has a dimension of source number. 
    CASAMS_ScriptName="$(basename ${CASAMS_VIS}).read.tables"
    echo "#!/bin/python"                                                   >  "$CASAMS_ScriptName.py"
    echo "tb.open('${CASAMS_VIS}/SOURCE')"                                 >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.name.txt','wb')"                   >> "$CASAMS_ScriptName.py"
    echo "fo.write('\n'.join(list(set(tb.getcol('NAME')))))"               >> "$CASAMS_ScriptName.py"
    echo "fo.write('\n')"                                                  >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.field.txt','wb')"                  >> "$CASAMS_ScriptName.py"
    echo "fo.write('\n'.join(list(set(map(str,tb.getcol('SOURCE_ID'))))))" >> "$CASAMS_ScriptName.py"
    echo "fo.write('\n')"                                                  >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "list_all_spw = tb.getcol('SPECTRAL_WINDOW_ID')"                  >> "$CASAMS_ScriptName.py"
    echo "list_all_sou = tb.getcol('NAME')"                                >> "$CASAMS_ScriptName.py"
    echo "list_uni_sou = list(set(list_all_sou))"                          >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.source.spw.uniq.txt','wb')"        >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_uni_sou)): "                             >> "$CASAMS_ScriptName.py"
    echo "    for j in range(len(list_all_sou)): "                         >> "$CASAMS_ScriptName.py"
    echo "        if list_all_sou[j] == list_uni_sou[i]: "                 >> "$CASAMS_ScriptName.py"
    echo "            fo.write('%s '%(list_all_spw[j]))"                   >> "$CASAMS_ScriptName.py"
    echo "    fo.write('\n')"                                              >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.source.name.uniq.txt','wb')"       >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_uni_sou)): "                             >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%s\n'%(list_uni_sou[i]))"                          >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.source.spw.txt','wb')"             >> "$CASAMS_ScriptName.py"
    echo "list_all = tb.getcol('SPECTRAL_WINDOW_ID')"                      >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all)): "                                 >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%d\n'%(list_all[i]))"                              >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.source.name.txt','wb')"            >> "$CASAMS_ScriptName.py"
    echo "list_all = tb.getcol('NAME')"                                    >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all)): "                                 >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%s\n'%(list_all[i]))"                              >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.source.id.txt','wb')"              >> "$CASAMS_ScriptName.py"
    echo "list_all = tb.getcol('SOURCE_ID')"                               >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all)): "                                 >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%d\n'%(list_all[i]))"                              >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.source.freq.txt','wb')"            >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all_sou)): "                             >> "$CASAMS_ScriptName.py"
    echo "    try:"                                                        >> "$CASAMS_ScriptName.py"
    echo "        list_ref_feq = (tb.getcell('REST_FREQUENCY',i))[0]"      >> "$CASAMS_ScriptName.py"
    echo "    except:"                                                     >> "$CASAMS_ScriptName.py"
    echo "        list_ref_feq = 0.0"                                      >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%s\n'%(list_ref_feq))"                             >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo ""                                                                >> "$CASAMS_ScriptName.py"
    echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo ""                                                                >> "$CASAMS_ScriptName.py"
    echo "tb.open('${CASAMS_VIS}/SPECTRAL_WINDOW')"                        >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.spw.txt','wb')"                    >> "$CASAMS_ScriptName.py"
    echo "list_all_chn = tb.getcol('NUM_CHAN')"                            >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all_chn)):"                              >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%d\n'%(i))"                                        >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.chan.txt','wb')"                   >> "$CASAMS_ScriptName.py"
    echo "list_all_chn = tb.getcol('NUM_CHAN')"                            >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all_chn)):"                              >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%g\n'%(list_all_chn[i]))"                          >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.chan.name.txt','wb')"              >> "$CASAMS_ScriptName.py"
    echo "list_all = tb.getcol('NAME')"                                    >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all)):"                                  >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%s\n'%(list_all[i]))"                              >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.chan.width.txt','wb')"             >> "$CASAMS_ScriptName.py"
    echo "list_all = tb.getcol('NUM_CHAN')"                                >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all)):"                                  >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%d\n'%(list_all[i]))"                              >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.chan.freq.ref.txt','wb')"          >> "$CASAMS_ScriptName.py"
    echo "list_all_chs = tb.getcol('REF_FREQUENCY')"                       >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all_chs)):"                              >> "$CASAMS_ScriptName.py"
    echo "    fo.write('%g\n'%(list_all_chs[i]))"                          >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "for i in range(len(list_all_chs)): "                             >> "$CASAMS_ScriptName.py"
    echo "    fo = open('$CASAMS_ScriptName.chan.freq.spw%d.txt'%(i),'wb')">> "$CASAMS_ScriptName.py"
    echo "    list_all_chk = tb.getcell('CHAN_FREQ',i)"                    >> "$CASAMS_ScriptName.py"
    echo "    for j in range(len(list_all_chk)): "                         >> "$CASAMS_ScriptName.py"
    echo "        fo.write('%g\n'%(list_all_chk[j]))"                      >> "$CASAMS_ScriptName.py"
    echo "    fo.close()"                                                  >> "$CASAMS_ScriptName.py"
    echo ""                                                                >> "$CASAMS_ScriptName.py"
    echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo ""                                                                >> "$CASAMS_ScriptName.py"
    echo "tb.open('${CASAMS_VIS}')"                                        >> "$CASAMS_ScriptName.py"
    echo "fo = open('$CASAMS_ScriptName.datatype.txt','wb')"               >> "$CASAMS_ScriptName.py"
    echo "list_col = tb.colnames()"                                        >> "$CASAMS_ScriptName.py"
    echo "if 'CORRECTED_DATA' in list_col: "                               >> "$CASAMS_ScriptName.py"
    echo "    fo.write('corrected\n')"                                     >> "$CASAMS_ScriptName.py"
    echo "else: "                                                          >> "$CASAMS_ScriptName.py"
    echo "    fo.write('data\n')"                                          >> "$CASAMS_ScriptName.py" #<TODO># need to make sure that column corrected is not there
    echo ""                                                                >> "$CASAMS_ScriptName.py"
    echo "fo.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo "tb.close()"                                                      >> "$CASAMS_ScriptName.py"
    echo ""                                                                >> "$CASAMS_ScriptName.py"
    echo "Running CASA ($CASA_COMMAND) to read measurement set data tables: "
    echo "    \"${CASAMS_VIS}\"/SOURCE"
    echo "    \"${CASAMS_VIS}\"/SPECTRAL_WINDOW"
    echo "Running "
    echo "    $CASA_COMMAND --nogui --nologfile -c \"$CASAMS_ScriptName.py\" > \"$CASAMS_ScriptName.log\" 2>&1"
    
    $CASA_COMMAND --nogui --nologfile -c "$CASAMS_ScriptName.py" > "$CASAMS_ScriptName.log" 2>&1
    
    echo "Finished casa!"
    
    # 
    # Read data tables
    # 
    if [[ ! -f "$CASAMS_ScriptName.name.txt" ]]; then
        echo ""
        echo "Error! Failed to read \"${CASAMS_VIS}\"/SOURCE/table.* files! Please make sure the measurement set is complete!"
        echo ""
        exit
    else
        IFS=$'\n' read -d '' -r -a CASAMS_TableSources < "$CASAMS_ScriptName.name.txt"
    fi
    if [[ ! -f "$CASAMS_ScriptName.field.txt" ]]; then
        echo ""
        echo "Error! Failed to read \"${CASAMS_VIS}\"/SOURCE/table.* files! Please make sure the measurement set is complete!"
        echo ""
        exit
    else
        IFS=$'\n' read -d '' -r -a CASAMS_TableFields < "$CASAMS_ScriptName.field.txt"
    fi
    if [[ ! -f "$CASAMS_ScriptName.chan.width.txt" ]]; then
        echo ""
        echo "Error! Failed to read \"${CASAMS_VIS}\"/SPECTRAL_WINDOW/table.* files! Please make sure the measurement set is complete!"
        echo ""
        exit
    else
        IFS=$'\n' read -d '' -r -a CASAMS_TableWidths < "$CASAMS_ScriptName.chan.width.txt"
    fi
    if [[ ! -f "$CASAMS_ScriptName.chan.freq.ref.txt" ]]; then
        echo ""
        echo "Error! Failed to read \"${CASAMS_VIS}\"/SPECTRAL_WINDOW/table.* files! Please make sure the measurement set is complete!"
        echo ""
        exit
    else
        IFS=$'\n' read -d '' -r -a CASAMS_TableFreqs < "$CASAMS_ScriptName.chan.freq.ref.txt"
    fi
    if [[ ! -f "$CASAMS_ScriptName.spw.txt" ]]; then
        echo ""
        echo "Error! Failed to read \"${CASAMS_VIS}\"/SOURCE/table.* files! Please make sure the measurement set is complete!"
        echo ""
        exit
    else
        IFS=$'\n' read -d '' -r -a CASAMS_TableSpws < "$CASAMS_ScriptName.spw.txt"
    fi
    if [[ ! -f "$CASAMS_ScriptName.datatype.txt" ]]; then
        echo ""
        echo "Error! Failed to read \"${CASAMS_VIS}\"/table.* files! Please make sure the measurement set is complete!"
        echo ""
        exit
    else
        IFS=$'\n' read -d '' -r -a CASAMS_TYP < "$CASAMS_ScriptName.datatype.txt"
    fi
    
    
    #<DEBUG># 
    echo "CASAMS_TableSources = ${CASAMS_TableSources[@]}"
    echo "CASAMS_TableSpws = ${CASAMS_TableSpws[@]}"
    echo "CASA_INP_FIELD = ${CASA_INP_FIELD[@]}"
    echo "CASA_INP_SPW = ${CASA_INP_SPW[@]}"
    
    
    # 
    # Check input source, if input source is empty, set to all sources in SOURCE table
    # 
    if [[ ${#CASA_INP_FIELD[@]} -gt 0 ]]; then
        CASAMS_SOU=(${CASA_INP_FIELD[@]})
        echo "Setting source list according to the user input (${#CASAMS_SOU[@]} sources)"
    else
        CASAMS_SOU=(${CASAMS_TableSources[@]})
        echo "Setting source list according to the SOURCE table (${#CASAMS_SOU[@]} sources)"
    fi
    
    
    #<DEBUG># 
    #<DEBUG># echo ${#CASAMS_SOU[@]}
    
    
    # 
    # Loop each source in the list
    # 
    for (( isou=0; isou<${#CASAMS_SOU[@]}; isou++ )); do 
        
        # 
        # Check current source, see if it is inside the SOURCE table.
        # 
        CASAMS_YES=0
        for (( j=0; j<${#CASAMS_TableSources[@]}; j++ )); do 
            if [[ x$(echo "${CASAMS_SOU[isou]}") == x$(echo "${CASAMS_TableSources[j]}") ]]; then
                CASAMS_YES=1
            fi
        done
        if [[ $CASAMS_YES -eq 0 ]]; then
            echo ""; echo "Warning! The input source \"${CASAMS_SOU[isou]}\" was not found in the SOURCE table!"; echo ""; continue
            #exit 1
        fi
        
        # 
        # Check input spw, if input spw is empty, set to all spw in SPECTRAL_WINDOW table
        # 
        if [[ $isou -lt ${#CASA_INP_SPW[@]} ]]; then
            CASAMS_SPW=(${CASA_INP_SPW[isou]})
            if [[ $isou -eq 0 ]]; then echo "Setting spw according to the user input (${#CASAMS_SPW[@]} spws)"; fi
        else
            CASAMS_SPW=(${CASAMS_TableSpws[@]})
            if [[ $isou -eq 0 ]]; then echo "Setting spw according to the SPECTRAL_WINDOW table (${#CASAMS_SPW[@]} spws)"; fi
        fi
        
        # 
        # Check input spw width, if input spw width is empty, set to the full width of the spw
        # 
        if [[ $isou -lt ${#CASA_INP_WIDTH[@]} ]]; then
            CASAMS_WID=(${CASA_INP_WIDTH[isou]})
            if [[ $isou -eq 0 ]]; then echo "Setting width according to the user input (${CASAMS_WID[@]})"; fi
        else
            CASAMS_WID=(${CASAMS_TableWidths[@]})
            if [[ $isou -eq 0 ]]; then echo "Setting width according to the SPECTRAL_WINDOW table (${CASAMS_WID[@]})"; fi
        fi
        
        # 
        # Check input stokes
        # 
        if [[ $isou -lt ${#CASA_INP_STOKES[@]} ]]; then
            CASAMS_STK=(${CASA_INP_STOKES[isou]})
            if [[ $isou -eq 0 ]]; then echo "Setting stokes according to the user input (${#CASAMS_STK[@]} stokes)"; fi
        else
            CASAMS_STK=("")
            if [[ $isou -eq 0 ]]; then echo "Setting stokes to all"; fi
        fi
        
        # 
        # Loop each spw for each source, determine the width and skyfreq
        # 
        for (( ispw=0; ispw<${#CASAMS_SPW[@]}; ispw++ )); do
            
            SPLIT_SOU="${CASAMS_SOU[isou]}"
            SPLIT_SPW="${CASAMS_SPW[ispw]}"
            SPLIT_WID=""
            SPLIT_FEQ=""
            SPLIT_STK=""
            
            #<alternative># # determine the width
            #<alternative># if [[ $ispw -ge ${#CASAMS_WID[@]} ]]; then 
            #<alternative>#     CASAMS_WID+=("${CASAMS_WID[${#CASAMS_WID[@]}-1]}")
            #<alternative># fi
            #<alternative># SPLIT_WID="${CASAMS_WID[ispw]}"
            
            # determine the width
            if [[ $ispw -lt ${#CASAMS_WID[@]} ]]; then 
                SPLIT_WID="${CASAMS_WID[ispw]}"
            else 
                SPLIT_WID="${CASAMS_WID[${#CASAMS_WID[@]}-1]}"
            fi
            
            # if the width is 0, set it to the full width (i.e. a single-channel continuum)
            if [[ x"$SPLIT_WID" == x"0" ]]; then
                SPLIT_WID=${CASAMS_TableWidths[ispw]}
            fi
            
            # determine the skyfreq
            if echo "$SPLIT_SPW" | grep -q "^[0-9]*$"; then
                if [[ $SPLIT_SPW -lt ${#CASAMS_TableFreqs[@]} ]]; then 
                    SPLIT_FEQ="${CASAMS_TableFreqs[ispw]}"
                else
                    SPLIT_FEQ=""
                fi
            fi
            
            
            # 
            # print progress
            # 
            if [[ $ispw -eq 0 ]]; then echo "  "; 
                                       echo "  * looping source '$SPLIT_SOU'  ($(($isou+1))/${#CASAMS_SOU[@]})"; fi
                                       echo "    *       spw    '$SPLIT_SPW'"
                                       echo "            width  '$SPLIT_WID'"
                                      #echo "            freq   '$SPLIT_FEQ'"
            
            
            # 
            # Loop each stokes if given, print progress and write scripts
            # 
            for (( istokes=0; istokes<${#CASAMS_STK[@]}; istokes++ )); do
                
                SPLIT_STK="${CASAMS_STK[istokes]}" # "RR" or "LL" or ""
                
                # 
                # print progress
                # 
                if [[ x"$SPLIT_STK" != x ]]; then echo "      *     stokes '$SPLIT_STK'"; fi
                
                # 
                # Prepare SourcesName and OutputName for the CASA scripts
                # 
                SPLIT_SourceName=$(echo "$SPLIT_SOU" | sed -e 's/ /-/g' | sed -e 's/\"//g')
                SPLIT_OutputName="split_${SPLIT_SourceName}"
                # 
                # Append spw info to the output name
                # 
                if [[ x"$SPLIT_SPW" != x ]]; then SPLIT_OutputName="${SPLIT_OutputName}_spw${SPLIT_SPW}"; fi
                if [[ x"$SPLIT_WID" != x ]]; then SPLIT_OutputName="${SPLIT_OutputName}_width${SPLIT_WID}"; fi
                if [[ x"$SPLIT_STK" != x ]]; then SPLIT_OutputName="${SPLIT_OutputName}_stokes${SPLIT_STK}"; fi
                
                # 
                # Write scripts
                # 
                if [[ $ispw -eq 0 ]]; then 
                    CASAMS_Script1="run_${SPLIT_SourceName}_step1_split.py"
                    CASAMS_Script2="run_${SPLIT_SourceName}_step2_cvel.py"
                    CASAMS_Script3="run_${SPLIT_SourceName}_step3_exportuvfits.py"
                    CASAMS_Script4="run_${SPLIT_SourceName}_step4_clean.py"
                    CASAMS_Script5="run_${SPLIT_SourceName}_step5_uvmodelfit.py"
                    CASAMS_Script6="run_${SPLIT_SourceName}_step6_gildas_import_uvfits.sh"
                    echo "#!/usr/bin/env python" > "$CASAMS_Script1"
                    echo "#!/usr/bin/env python" > "$CASAMS_Script2"
                    echo "#!/usr/bin/env python" > "$CASAMS_Script3"
                    echo "#!/usr/bin/env python" > "$CASAMS_Script4"
                    echo "#!/usr/bin/env python" > "$CASAMS_Script5"
                    echo "#!/bin/bash"           > "$CASAMS_Script6"
                    
                    
                    echo "import os, sys"                                                  >> "$CASAMS_Script1"
                    echo ""                                                                >> "$CASAMS_Script1"
                    echo "# Prepare backup subroutine"                                     >> "$CASAMS_Script1"
                    echo "def dirbackup(dirpath):"                                         >> "$CASAMS_Script1"
                    echo "    if os.path.isdir(dirpath):"                                  >> "$CASAMS_Script1"
                    echo "        if os.path.dirname(dirpath)!='':"                        >> "$CASAMS_Script1"
                    echo "            dirback = os.path.dirname(dirpath)+os.sep+\\"        >> "$CASAMS_Script1"
                    echo "                      'backup_'+os.dir.basename(dirpath)"        >> "$CASAMS_Script1"
                    echo "        else:"                                                   >> "$CASAMS_Script1"
                    echo "            dirback = 'backup_'+dirpath"                         >> "$CASAMS_Script1"
                    echo "        if os.path.isdir(dirback):"                              >> "$CASAMS_Script1"
                    echo "            os.system('rm -rf \"%s\"'%(dirback))"                >> "$CASAMS_Script1"
                    echo "        os.system('mv \"%s\" \"%s\"'%(dirpath, dirback))"        >> "$CASAMS_Script1"
                    echo "        print('Backed up \"%s\" as \"%s\".'%(dirpath, dirback))" >> "$CASAMS_Script1"
                    echo ""                                                                >> "$CASAMS_Script1"
                    
                    echo "import os, sys" >> "$CASAMS_Script4"
                fi
                # 
                if [[ $ispw -ge 0 ]]; then 
        
                    # 
                    # Write python script: run_casa_ms_step1_split.py
                    # 
                    echo ""                                                              >> "$CASAMS_Script1"
                    echo ""                                                              >> "$CASAMS_Script1"
                    echo "vis         = '${CASAMS_VIS}'"                                 >> "$CASAMS_Script1"
                    echo "outputvis   = '${SPLIT_OutputName}.ms'"                        >> "$CASAMS_Script1"
                    echo "field       = '${SPLIT_SOU}'"                                  >> "$CASAMS_Script1"
                    echo "spw         = '${SPLIT_SPW}'"                                  >> "$CASAMS_Script1"
                    echo "width       =  ${SPLIT_WID}"                                   >> "$CASAMS_Script1"
                    echo "correlation = '${SPLIT_STK}'"                                  >> "$CASAMS_Script1"
                    echo "datacolumn  = '${CASAMS_TYP}'"                                 >> "$CASAMS_Script1"
                    echo "combinespw  = F"                                               >> "$CASAMS_Script1"
                    echo "keepflags   = F"                                               >> "$CASAMS_Script1"
                    if [[ ${#CASA_VERSION[@]} -eq 3 ]]; then
                    if [[ ${CASA_VERSION[0]} -ge 4 && ${CASA_VERSION[1]} -ge 6 ]]; then
                    echo "keepmms     = F"                                               >> "$CASAMS_Script1"
                    fi
                    fi
                    echo "dirbackup(outputvis)"                                          >> "$CASAMS_Script1"
                    echo "inp(split)"                                                    >> "$CASAMS_Script1"
                    echo "split()"                                                       >> "$CASAMS_Script1"
                    echo ""                                                              >> "$CASAMS_Script1"
                    echo "# We also try to split each mosaic pointing"                   >> "$CASAMS_Script1"
                    echo "vis = outputvis"                                               >> "$CASAMS_Script1"
                    echo "tb.open(vis+os.sep+'FIELD')"                                   >> "$CASAMS_Script1"
                    echo "mosaic_list = tb.getcol('NAME')"                               >> "$CASAMS_Script1" #<NOTE><20170305># Can not use 'PHASE_DIR'
                    echo "mosaic_numb = len(mosaic_list)"                                >> "$CASAMS_Script1"
                    echo "tb.close()"                                                    >> "$CASAMS_Script1"
                    echo "if mosaic_numb>1:"                                             >> "$CASAMS_Script1"
                    echo "    for i in range(mosaic_numb):"                              >> "$CASAMS_Script1"
                    echo "        outputvis   = '${SPLIT_OutputName}_mosaic_%d.ms'%(i)"  >> "$CASAMS_Script1"
                    echo "        field       = '%d'%(i)"                                >> "$CASAMS_Script1"
                    echo "        spw         = ''"                                      >> "$CASAMS_Script1"
                    echo "        width       = 1"                                       >> "$CASAMS_Script1"
                    echo "        datacolumn  = 'data'"                                  >> "$CASAMS_Script1"
                    echo "        dirbackup(outputvis)"                                  >> "$CASAMS_Script1"
                    echo "        inp(split)"                                            >> "$CASAMS_Script1"
                    echo "        split()"                                               >> "$CASAMS_Script1"
                    echo ""                                                              >> "$CASAMS_Script1"
                    echo ""                                                              >> "$CASAMS_Script1"
                    # 
                    # Write python script: run_casa_ms_step2_cvel.py
                    # 
                    if [[ x"${SPLIT_FEQ}" != x ]]; then
                    echo ""                                                         >> "$CASAMS_Script2"
                    echo "vis         = '${SPLIT_OutputName}.ms''"                  >> "$CASAMS_Script2"
                    echo "outputvis   = '${SPLIT_OutputName}_cvel.ms'"              >> "$CASAMS_Script2"
                    echo "field       = ''"                                         >> "$CASAMS_Script2"
                    echo "spw         = ''"                                         >> "$CASAMS_Script2"
                    echo "width       =  1"                                         >> "$CASAMS_Script2"
                    echo "outframe    = 'LSRK'"                                     >> "$CASAMS_Script2"
                    echo "restfreq    = '${SPLIT_FEQ}Hz'"                           >> "$CASAMS_Script2"
                    echo "inp(cvel)"                                                >> "$CASAMS_Script2"
                    echo "cvel()"                                                   >> "$CASAMS_Script2"
                    echo ""                                                         >> "$CASAMS_Script2"
                    echo ""                                                         >> "$CASAMS_Script2"
                    fi
                    # 
                    # Write python script: run_casa_ms_step3_exportuvfits.py
                    # 
                    echo ""                                                              >> "$CASAMS_Script3"
                    echo "vis         = '${SPLIT_OutputName}.ms'"                        >> "$CASAMS_Script3"
                    echo "fitsfile    = '${SPLIT_OutputName}.uvfits'"                    >> "$CASAMS_Script3"
                    echo "field       = ''"                                              >> "$CASAMS_Script3"
                    echo "spw         = ''"                                              >> "$CASAMS_Script3"
                    echo "datacolumn  = '${CASAMS_TYP}'"                                 >> "$CASAMS_Script3"
                    echo "multisource = F"                                               >> "$CASAMS_Script3"
                    echo "inp(exportuvfits)"                                             >> "$CASAMS_Script3"
                    echo "exportuvfits()"                                                >> "$CASAMS_Script3"
                    echo ""                                                              >> "$CASAMS_Script3"
                    echo "# We also try to exportuvfits each mosaic pointing"            >> "$CASAMS_Script3"
                    echo "tb.open(vis+os.sep+'FIELD')"                                   >> "$CASAMS_Script3"
                    echo "mosaic_list = tb.getcol('PHASE_DIR')"                          >> "$CASAMS_Script3"
                    echo "mosaic_numb = len(mosaic_list)"                                >> "$CASAMS_Script3"
                    echo "tb.close()"                                                    >> "$CASAMS_Script3"
                    echo "if mosaic_numb>1:"                                             >> "$CASAMS_Script3"
                    echo "    for i in range(mosaic_numb):"                              >> "$CASAMS_Script3"
                    echo "        vis      = '${SPLIT_OutputName}_mosaic_%d.ms'%(i)"     >> "$CASAMS_Script3"
                    echo "        fitsfile = '${SPLIT_OutputName}_mosaic_%d.uvfits'%(i)" >> "$CASAMS_Script3"
                    echo "        inp(exportuvfits)"                                     >> "$CASAMS_Script3"
                    echo "        exportuvfits()"                                        >> "$CASAMS_Script3"
                    if [[ x"${SPLIT_FEQ}" != x ]]; then
                    echo ""                                                                       >> "$CASAMS_Script3"
                    echo "if os.path.isdir('${SPLIT_OutputName}_cvel.ms'):"                       >> "$CASAMS_Script3"
                    echo "    vis         = '${SPLIT_OutputName}_cvel.ms'"                        >> "$CASAMS_Script3"
                    echo "    fitsfile    = '${SPLIT_OutputName}_cvel.uvfits'"                    >> "$CASAMS_Script3"
                    echo "    field       = ''"                                                   >> "$CASAMS_Script3"
                    echo "    spw         = ''"                                                   >> "$CASAMS_Script3"
                    echo "    datacolumn  = '${CASAMS_TYP}'"                                      >> "$CASAMS_Script3"
                    echo "    multisource = F"                                                    >> "$CASAMS_Script3"
                    echo "    inp(exportuvfits)"                                                  >> "$CASAMS_Script3"
                    echo "    exportuvfits()"                                                     >> "$CASAMS_Script3"
                    echo "    "                                                                   >> "$CASAMS_Script3"
                    echo "    # We also try to exportuvfits each mosaic pointing"                 >> "$CASAMS_Script3"
                    echo "    tb.open(vis+os.sep+'FIELD')"                                        >> "$CASAMS_Script3"
                    echo "    mosaic_list = tb.getcol('PHASE_DIR')"                               >> "$CASAMS_Script3"
                    echo "    mosaic_numb = len(mosaic_list)"                                     >> "$CASAMS_Script3"
                    echo "    tb.close()"                                                         >> "$CASAMS_Script3"
                    echo "    if mosaic_numb>1:"                                                  >> "$CASAMS_Script3"
                    echo "        for i in range(mosaic_numb):"                                   >> "$CASAMS_Script3"
                    echo "            vis      = '${SPLIT_OutputName}_cvel_mosaic_%d.ms'%(i)"     >> "$CASAMS_Script3"
                    echo "            fitsfile = '${SPLIT_OutputName}_cvel_mosaic_%d.uvfits'%(i)" >> "$CASAMS_Script3"
                    echo "            inp(exportuvfits)"                                          >> "$CASAMS_Script3"
                    echo "            exportuvfits()"                                             >> "$CASAMS_Script3"
                    fi
                    echo ""                                                                       >> "$CASAMS_Script3"
                    echo ""                                                                       >> "$CASAMS_Script3"
                    # 
                    # Write python script: run_casa_ms_step4_clean.py
                    # 
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo "if os.path.isdir('${SPLIT_OutputName}_dirty'):"           >> "$CASAMS_Script4"
                    echo "    os.system('rm -rf \"${SPLIT_OutputName}_dirty\"')"    >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo "vis         = '${SPLIT_OutputName}.ms'"                   >> "$CASAMS_Script4"
                    echo "imagename   = '${SPLIT_OutputName}_dirty'"                >> "$CASAMS_Script4"
                    echo "field       = ''"                                         >> "$CASAMS_Script4"
                    echo "spw         = ''"                                         >> "$CASAMS_Script4"
                    echo "width       =  ${SPLIT_WID}"                              >> "$CASAMS_Script4"
                    if [[ x"${SPLIT_FEQ}" != x ]]; then
                    echo "outframe    = 'LSRK'"                                     >> "$CASAMS_Script4"
                    echo "restfreq    = '${SPLIT_FEQ}Hz'"                           >> "$CASAMS_Script4"
                    fi
                    echo "niter       = 0"                                          >> "$CASAMS_Script4" #<NOTE># set niter 0 so it do not do clean but just Fourier Transform.
                    echo "imsize      = 512 #<TODO># "                              >> "$CASAMS_Script4" #<TODO># 
                    echo "cell        = '0.2arcsec' #<TODO># "                      >> "$CASAMS_Script4" #<TODO># 
                    echo "datacolumn  = '${CASAMS_TYP}'"                            >> "$CASAMS_Script4"
                    echo "multisource = F"                                          >> "$CASAMS_Script4"
                    echo "inp(clean)"                                               >> "$CASAMS_Script4"
                    echo "clean()"                                                  >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo "imagename   = '${SPLIT_OutputName}_dirty.image'"          >> "$CASAMS_Script4"
                    echo "fitsimage = '${SPLIT_OutputName}_dirty.image.fits'"       >> "$CASAMS_Script4"
                    echo "overwrite = True"                                         >> "$CASAMS_Script4"
                    echo "inp(exportfits)"                                          >> "$CASAMS_Script4"
                    echo "exportfits()"                                             >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo "if os.path.isdir('${SPLIT_OutputName}_clean'):"           >> "$CASAMS_Script4"
                    echo "    os.system('rm -rf \"${SPLIT_OutputName}_clean\"')"    >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo "vis         = '${SPLIT_OutputName}.ms'"                   >> "$CASAMS_Script4"
                    echo "imagename   = '${SPLIT_OutputName}_clean'"                >> "$CASAMS_Script4"
                    echo "field       = ''"                                         >> "$CASAMS_Script4"
                    echo "spw         = ''"                                         >> "$CASAMS_Script4"
                    echo "width       =  ${SPLIT_WID}"                              >> "$CASAMS_Script4"
                    if [[ x"${SPLIT_FEQ}" != x ]]; then
                    echo "outframe    = 'LSRK'"                                     >> "$CASAMS_Script4"
                    echo "restfreq    = '${SPLIT_FEQ}Hz'"                           >> "$CASAMS_Script4"
                    fi
                    echo "niter       = 100"                                        >> "$CASAMS_Script4" #<NOTE># set niter 0 so it do not do clean but just Fourier Transform.
                    echo "imsize      = 512 #<TODO># "                              >> "$CASAMS_Script4" #<TODO># 
                    echo "cell        = '0.2arcsec' #<TODO># "                      >> "$CASAMS_Script4" #<TODO># 
                    echo "datacolumn  = '${CASAMS_TYP}'"                            >> "$CASAMS_Script4"
                    echo "multisource = F"                                          >> "$CASAMS_Script4"
                    echo "inp(clean)"                                               >> "$CASAMS_Script4"
                    echo "clean()"                                                  >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo "imagename   = '${SPLIT_OutputName}_clean.image'"          >> "$CASAMS_Script4"
                    echo "fitsimage = '${SPLIT_OutputName}_clean.image.fits'"       >> "$CASAMS_Script4"
                    echo "overwrite = True"                                         >> "$CASAMS_Script4"
                    echo "inp(exportfits)"                                          >> "$CASAMS_Script4"
                    echo "exportfits()"                                             >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    echo ""                                                         >> "$CASAMS_Script4"
                    # 
                    # Write python script: run_casa_ms_step5_uvmodelfit.py
                    # 
                    echo ""                                                                                        >> "$CASAMS_Script5"
                    echo "vis         = '${SPLIT_OutputName}.ms'"                                                  >> "$CASAMS_Script5" #<TODO># uvmodelfit for docvel and nocvel have different results!
                    echo "field       = ''"                                                                        >> "$CASAMS_Script5"
                    echo "spw         = ''"                                                                        >> "$CASAMS_Script5"
                    echo "niter       = 25"                                                                        >> "$CASAMS_Script5"
                    echo "comptype    = 'G'"                                                                       >> "$CASAMS_Script5"
                    echo "sourcepar   = [1e-3, 0.0, 0.0, 0.2, 1.0, 0.0] # flux, ra, dec, major, b/a ratio, angle"  >> "$CASAMS_Script5"
                    echo "varypar     = [   T,   T,   T,   T,   T,   T] # flux, ra, dec, major, b/a ratio, angle"  >> "$CASAMS_Script5"
                    echo "inp(uvmodelfit)"                                                                         >> "$CASAMS_Script5"
                    echo "uvmodelfit()"                                                                            >> "$CASAMS_Script5"
                    echo ""                                                                                        >> "$CASAMS_Script5"
                    echo ""                                                                                        >> "$CASAMS_Script5"
                    # 
                    # DONE: check the uvfits header CRVAL4 and RESTFREQ
                    # DONE: -- now in pdbi-uvt-go-import-uvfits
                    # 
                    # 
                    # Write run_gildas_uvt_step6_importfits.py
                    # 
                    echo ""                                                                                                 >> "$CASAMS_Script6"
                    echo "uvfits_list=(\$(ls \"${SPLIT_OutputName}\"_mosaic_*.uvfits 2>/dev/null))"                         >> "$CASAMS_Script6"
                    echo "if [[ \${#uvfits_list[@]} -eq 0 ]]; then"                                                         >> "$CASAMS_Script6"
                    echo "    uvfits_list=(\$(ls \"${SPLIT_OutputName}\".uvfits 2>/dev/null))"                              >> "$CASAMS_Script6"
                    echo "fi"                                                                                               >> "$CASAMS_Script6"
                    echo "for (( i=0; i<\${#uvfits_list[@]}; i++ )); do"                                                    >> "$CASAMS_Script6"
                    echo "    pdbi-uvt-go-import-uvfits -name \"\${uvfits_list[i]}\" \\"                                    >> "$CASAMS_Script6"
                    echo "                              -out \"\$(echo \${uvfits_list[i]} | sed -e 's/\.uvfits/\.uvt/g')\"" >> "$CASAMS_Script6"
                    echo "done"                                                                                             >> "$CASAMS_Script6"
                    if [[ x"${SPLIT_FEQ}" != x ]]; then
                    echo ""                                                                                                 >> "$CASAMS_Script6"
                    echo "uvfits_list=(\$(ls \"${SPLIT_OutputName}_cvel\"_mosaic_*.uvfits 2>/dev/null))"                    >> "$CASAMS_Script6"
                    echo "if [[ \${#uvfits_list[@]} -eq 0 ]]; then"                                                         >> "$CASAMS_Script6"
                    echo "    uvfits_list=(\$(ls \"${SPLIT_OutputName}_cvel\".uvfits 2>/dev/null))"                         >> "$CASAMS_Script6"
                    echo "fi"                                                                                               >> "$CASAMS_Script6"
                    echo "for (( i=0; i<\${#uvfits_list[@]}; i++ )); do"                                                    >> "$CASAMS_Script6"
                    echo "    pdbi-uvt-go-import-uvfits -name \"\${uvfits_list[i]}\" \\"                                    >> "$CASAMS_Script6"
                    echo "                              -out \"\$(echo \${uvfits_list[i]} | sed -e 's/\.uvfits/\.uvt/g')\"" >> "$CASAMS_Script6"
                    echo "done"                                                                                             >> "$CASAMS_Script6"
                    fi
                    echo ""                                                                                                 >> "$CASAMS_Script6"
                    echo ""                                                                                                 >> "$CASAMS_Script6"
                    # echo "pdbi-uvt-go-import-uvfits -name \"${SPLIT_OutputName}.uvfits\" -out \"${SPLIT_OutputName}.uvt\""               >> "$CASAMS_Script6"
                    # if [[ x"${SPLIT_FEQ}" != x ]]; then
                    # echo ""                                                                                                              >> "$CASAMS_Script6"
                    # echo "if [[ -f \"${SPLIT_OutputName}_cvel.uvfits\" ]]; then"                                                         >> "$CASAMS_Script6"
                    # echo "    pdbi-uvt-go-import-uvfits -name \"${SPLIT_OutputName}_cvel.uvfits\" -out \"${SPLIT_OutputName}_cvel.uvt\"" >> "$CASAMS_Script6"
                    # echo "fi"                                                                                                            >> "$CASAMS_Script6"
                    # fi
                    # echo ""                                                                                                              >> "$CASAMS_Script6"
                    # echo ""                                                                                                              >> "$CASAMS_Script6"
                    
                fi
            done # end loop each stokes
        done # end loop each spw
        
        echo "    * written to python script: $CASAMS_Script1                   PLEASE RUN: $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script1')\""
        echo "    * written to python script: $CASAMS_Script2                    PLEASE RUN: $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script2')\""
        echo "    * written to python script: $CASAMS_Script3            PLEASE RUN: $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script3')\""
        echo "    * written to python script: $CASAMS_Script4                   PLEASE RUN: $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script4')\""
        echo "    * written to python script: $CASAMS_Script5              PLEASE RUN: $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script5')\""
        echo "    * written to shell script:  $CASAMS_Script6    PLEASE RUN: \"./$CASAMS_Script6\""
        
        echo ""                                                            >> "run_casa_ms_split_all.bash" 
        echo "$CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script1')\"" >> "run_casa_ms_split_all.bash"
        echo "$CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script2')\"" >> "run_casa_ms_split_all.bash"
        echo "$CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script3')\"" >> "run_casa_ms_split_all.bash"
        echo "$CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script4')\"" >> "run_casa_ms_split_all.bash"
        echo "./$CASAMS_Script6"                                           >> "run_casa_ms_split_all.bash"
        echo "    * written to a global script: run_casa_ms_split_all.bash   (all the above commands are in it)"
        
        echo ""                                                            >> "run_casa_ms_split_all_step1.bash"
        echo "$CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script1')\"" >> "run_casa_ms_split_all_step1.bash"
        
        #<DEBUG>#exit
        #<DEBUG># break
        
        for (( istep=0; istep<${#CASA_INP_STEPS[@]}; istep++ )); do
            if [[ "${CASA_INP_STEPS[istep]}" == "1" || "${CASA_INP_STEPS[istep]}" == "split" ]]; then
                echo ""
                echo "Running $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script1')\""
                echo ""
                $CASA_COMMAND --nogui --nologfile -c "execfile('$CASAMS_Script1')"
            fi
            if [[ "${CASA_INP_STEPS[istep]}" == "2" || "${CASA_INP_STEPS[istep]}" == "cvel" ]]; then
                echo ""
                echo "Running $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script2')\""
                echo ""
                $CASA_COMMAND --nogui --nologfile -c "execfile('$CASAMS_Script2')"
            fi
            if [[ "${CASA_INP_STEPS[istep]}" == "3" || "${CASA_INP_STEPS[istep]}" == "exportuvfits" ]]; then
                echo ""
                echo "Running $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script3')\""
                echo ""
                $CASA_COMMAND --nogui --nologfile -c "execfile('$CASAMS_Script3')"
            fi
            if [[ "${CASA_INP_STEPS[istep]}" == "4" || "${CASA_INP_STEPS[istep]}" == "clean" ]]; then
                echo ""
                echo "Running $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script4')\""
                echo ""
                $CASA_COMMAND --nogui --nologfile -c "execfile('$CASAMS_Script4')"
            fi
            if [[ "${CASA_INP_STEPS[istep]}" == "5" || "${CASA_INP_STEPS[istep]}" == "uvmodelfit" ]]; then
                echo ""
                echo "Running $CASA_COMMAND --nogui --nologfile -c \"execfile('$CASAMS_Script5')\""
                echo ""
                $CASA_COMMAND --nogui --nologfile -c "execfile('$CASAMS_Script5')"
            fi
            if [[ "${CASA_INP_STEPS[istep]}" == "6" || "${CASA_INP_STEPS[istep]}" == "gildas" ]]; then
                echo ""
                echo "Running bash -c \"$CASAMS_Script6\""
                echo ""
                chmod +x "$CASAMS_Script6"
                ./"$CASAMS_Script6"
            fi
        done
        
        
    done # end loop each source
    
    
done



chmod +x "run_casa_ms_split_all.bash"
chmod +x "run_casa_ms_split_all_step1.bash"










echo "Done!"
