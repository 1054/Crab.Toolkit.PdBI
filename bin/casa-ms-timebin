#!/bin/bash
# 
# Input field or name
# Output python script file which runs CASA mstransform(timebin='30s') task
# 
# Last update:
#    2019-07-16 created, copied from casa-ms-concat
# 



# Function to print usage
function usage() {
    echo "Usage: casa-ms-timebin -vis a1.ms a2.ms a3.ms -out aaa.ms -timebin 30s"
}



# 
# Read input parameters
# 
. $(dirname ${BASH_SOURCE[0]})/"casa-command-line-arguments" "$@"



# 
# Check input parameter -- image
# 
if [[ ${#CASA_INP_VIS[@]} -eq 0 ]]; then usage; exit; fi



# 
# Write run_casa_ms_timebin.py
# 
CASAMS_UTC=$(date +%Y%m%d.%Hh%Mm%Ss.%Z)
CASAMS_EXE="run_casa_ms_timebin.$CASAMS_UTC.py"
CASAMS_LOG="run_casa_ms_timebin.$CASAMS_UTC.log"
echo "#!/bin/python" > "$CASAMS_EXE"
echo "#" >> "$CASAMS_EXE"
# 
# write into script to check casa environment
echo "" >> "$CASAMS_EXE"
echo "from __future__ import print_function" >> "$CASAMS_EXE"
echo "import os, sys" >> "$CASAMS_EXE"
echo "" >> "$CASAMS_EXE"
echo "if not ('casa' in globals() and 'mstransform' in globals()):" >> "$CASAMS_EXE"
echo "    print('Error! We are not in CASA environment!')" >> "$CASAMS_EXE"
echo "    sys.exit()" >> "$CASAMS_EXE"
echo "" >> "$CASAMS_EXE"
# 
# set input name
TempInput="${CASA_INP_VIS[0]}'"
# 
# set output name
if [[ ${#CASA_INP_OUTPUT[@]} -gt 0 ]]; then
    TempOutput=${CASA_INP_OUTPUT[0]}
else
    TempOutput=$(basename "${CASA_INP_VIS[0]//'.ms'//}_timebin.ms")
fi
# 
# write into script
echo "vis            = '$TempInput'"                      >> "$CASAMS_EXE"
echo "outputvis      = '$TempOutput'"                     >> "$CASAMS_EXE"

if [[ ${#CASA_INP_SPLIT_TIMEBIN} -gt 0 ]]; then
echo "timeaverage    = True"                             >> "$CASAMS_EXE"
echo "timebin        = '${CASA_INP_SPLIT_TIMEBIN[0]}'"   >> "$CASAMS_EXE"
else
echo "timeaverage    = True"                             >> "$CASAMS_EXE"
echo "timebin        = '30s'"                            >> "$CASAMS_EXE"
fi

echo "inp(mstransform)"                                   >> "$CASAMS_EXE"
echo "mstransform()"                                      >> "$CASAMS_EXE"
echo ""                                                   >> "$CASAMS_EXE"
echo "Wrote to python script: ${CASAMS_EXE}"
echo "Please run bash -c 'casa --nologfile --nogui -c \"${CASAMS_EXE}\"'"



# 
# Run casa if the user agrees
# 
#if [[ $CASA_INP_NO -eq 0 ]]; then
#    
#    CASAMS_GOO="y"
#    if [[ $CASA_INP_YES -eq 0 ]]; then
#        read -e -p "Launch casa now? " -i "y" CASAMS_GOO
#    else
#        echo "Launching casa "
#    fi
#    if [[ x"$CASAMS_GOO" == x"y"* || x"$CASAMS_GOO" == x"Y"* ]]; then
#       echo "casa --nogui --nologfile -c ${CASAMS_EXE} | tee ${CASAMS_LOG}"
#             casa --nogui --nologfile -c "${CASAMS_EXE}" | tee "${CASAMS_LOG}"
#    fi
#    
#    # copy EXE and LOG
#    for (( i=0; i<${#CASA_INP_UVFIT_MODELTYPE[@]}; i++ )); do
#        if [[ $i -lt ${#CASA_INP_OUTPUT[@]} ]]; then 
#            cp "$CASAMS_EXE" $(echo "$TempOutput" | sed -e 's/\.ms$//g')".py"
#            cp "$CASAMS_LOG" $(echo "$TempOutput" | sed -e 's/\.ms$//g')".log"
#        fi
#    done
#    
#else
#    echo "OK, we will not run casa now. Please run the following command by yourself"
#    echo "    casa --nogui --nologfile -c ${CASAMS_EXE} | tee ${CASAMS_LOG}"
#    echo ""
#fi



# 
# Run casa now
# 
if [[ $(type casa 2>/dev/null | wc -l) -eq 0 ]]; then
    echo ""
    echo "Error! CASA was not found! Please check your \$PATH!"
    echo ""
    exit
else
    echo "Running casa, please wait"
    casa --nologfile --nogui -c "${CASAMS_EXE}"
    echo "Finished casa, now reading listobs text file"
    cat ${CASAMS_OUT} | awk '/Fields: /,/Spectral Windows: /' | head -n -1
    cat ${CASAMS_OUT} | awk '/Spectral Windows: /,/Sources: /' | head -n -1
fi



echo "Done!"


