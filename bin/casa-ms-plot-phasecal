#!/bin/bash
# 
# Input vis
# Output python script file (plotms phase calibrator)
# 
# Last update:
#    2017-01-11 
# 
CASAMS_VIS="" # dataset name
CASAMS_OUT="" # the output directory containing phase calibrator figures
# 
# Read input parameters
# 
#if [[ "$#" -eq 0 ]]; then
#    echo "Usage: casa-ms-plot-phasecal -vis calibrated.ms [-out calibrated.ms.listobs.txt]"
#    exit
#fi
# 
# Check casa
# 
if [[ $(type casa 2>/dev/null | wc -l) -eq 0 ]]; then
    echo ""
    echo "Error! CASA was not found! Please check your \$PATH!"
    echo ""
    exit
fi
# 
# Read input parameters
# 
CASAMS_GOOD=1
CASAMS_RPAR=""
while [[ "$#" -gt 0 ]]; do
    # echo $1
    case $1 in
           "-vis") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_VIS="$1";;
           "-out") if [[ "$#" -lt 2 ]]; then CASAMS_GOOD=0; break; fi; shift; CASAMS_RPAR=""; CASAMS_OUT="$1";;
    esac
    shift
done
# 
# Check input parameter -- vis
# 
if [[ x"$CASAMS_VIS" == x ]]; then
    CASAMS_GOOD=0
    #echo -n "Please input vis: "
    #read CASAMS_VIS
    # Set default value
    CASAMS_VIS="calibrated.ms"
    # Now we can first print default value, then if user input anything we remove the default value and show the user input. 
    echo -n "Please input vis: $CASAMS_VIS"
    read -N 1 CASAMS_KEY
    if [[ x"$CASAMS_KEY" != x ]]; then
        echo -e -n "\r$(tput el)Please input vis: $CASAMS_KEY"
        read CASAMS_VIS
        CASAMS_VIS="${CASAMS_KEY}${CASAMS_VIS}"
    fi
    # Check again the input is not empty
    if [[ x"$CASAMS_VIS" != x ]]; then
        CASAMS_GOOD=1
    fi
fi
# 
# Check input parameters ------ if not passed then print usage and exit
# 
if [[ $CASAMS_GOOD -eq 0 ]]; then
    echo "Usage: casa-ms-plot-phasecal -vis calibrated.ms -out output_dir_name"
    exit
fi
# 
# Revise input parameters
# 
# -- remove the suffix of the input vis name, and test whether the file exists
if [[ x"$(echo $CASAMS_VIS | grep -E '.*\.ms.*')" == x ]]; then
    CASAMS_VIS_SFIX=".ms"
else
    CASAMS_VIS_SFIX=$(echo $CASAMS_VIS | sed -E 's/.*(\.ms.*)$/\1/g')
    CASAMS_VIS=$(echo $CASAMS_VIS | sed -E 's/(.*)(\.ms.*)$/\1/g')
fi
CASAMS_VIS=$(echo $CASAMS_VIS | sed -E 's/[.]ms$//g')
if [[ ! -d "${CASAMS_VIS}${CASAMS_VIS_SFIX}" ]]; then
    echo Error! "${CASAMS_VIS}${CASAMS_VIS_SFIX}" was not found! Exit!
    exit
fi
# 
# Revise input parameter -- output directory -- if not given, set to input vis+".plot.phasecal"
# 
if [[ x"$CASAMS_OUT" == x ]]; then
	echo "Output file name not given, set as \"$(basename ${CASAMS_VIS}).plot.phasecal\"!"
    CASAMS_OUT="$(basename ${CASAMS_VIS}${CASAMS_VIS_SFIX}).plot.phasecal"
fi
# 
# Backup and make output directory
# 
if [[ -d "$CASAMS_OUT.backup" ]]; then
    echo "Found existing \"$CASAMS_OUT.backup\"! Backuping it as \"$CASAMS_OUT.backup.backup\"!"
    mv "$CASAMS_OUT.backup" "$CASAMS_OUT.backup.backup"
fi
if [[ -d "$CASAMS_OUT" ]]; then
    echo "Found existing \"$CASAMS_OUT\"! Backuping it as \"$CASAMS_OUT.backup\"!"
    mv "$CASAMS_OUT" "$CASAMS_OUT.backup"
fi
if [[ ! -d "$CASAMS_OUT" ]]; then
    mkdir "$CASAMS_OUT"
fi
if [[ ! -d "$CASAMS_OUT" ]]; then
    echo "Error! Failed to create output directory \"$CASAMS_OUT\"!"
    exit 1
fi
## 
## Check listobs
## 
#CASAMS_LISTOBS="$(basename ${CASAMS_VIS}${CASAMS_VIS_SFIX}).listobs.txt"
#if [[ ! -f "${CASAMS_LISTOBS}" ]]; then
#    casa-ms-listobs -vis "${CASAMS_VIS}${CASAMS_VIS_SFIX}" -out "${CASAMS_LISTOBS}"
#fi
# 
# 
# 
# 
# Write run_dzliu_plot_phasecal.py
# -- see -- https://casaguides.nrao.edu/index.php?title=TWHydraBand7_Calibration_4.2#Set_Up_the_Flux_Calibrator_Model
# 
CASAMS_FPY="run_dzliu_plot_phasecal.py"
echo "# CASAPY "                                             >  "$CASAMS_FPY"
echo "# "                                                    >> "$CASAMS_FPY"
echo ""                                                      >> "$CASAMS_FPY"
echo "import os, sys"                                        >> "$CASAMS_FPY"
echo ""                                                      >> "$CASAMS_FPY"
echo "# "                                                    >> "$CASAMS_FPY"
echo "# -- identify phasecal sources by reading STATE table" >> "$CASAMS_FPY"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}/STATE')"      >> "$CASAMS_FPY"
echo "state_mode = tb.getcol('OBS_MODE').tolist()"           >> "$CASAMS_FPY"
echo "state_index = []"                                      >> "$CASAMS_FPY"
echo "state_intent = []"                                     >> "$CASAMS_FPY"
echo "intents = state_mode"                                  >> "$CASAMS_FPY"
echo "tb.close()"                                            >> "$CASAMS_FPY"
echo "for i in range(len(state_mode)):"                      >> "$CASAMS_FPY"
echo "    if state_mode[i].find('CALIBRATE_PHASE') >= 0:"    >> "$CASAMS_FPY"
echo "        state_index.append(i)"                         >> "$CASAMS_FPY"
echo "        state_intent.append(state_mode[i])"            >> "$CASAMS_FPY"
echo ""                                                      >> "$CASAMS_FPY"
#echo "for i in range(len(state_mode)):"                     >> "$CASAMS_FPY"
#echo "    for state_mod in state_mode[i].split(','):"       >> "$CASAMS_FPY"
#echo "        if state_mod.find('CALIBRATE_PHASE') >= 0:"   >> "$CASAMS_FPY"
#echo "            state_index.append(i)"                    >> "$CASAMS_FPY"
#echo "            state_intent.append(state_mod)"           >> "$CASAMS_FPY"
echo "if len(state_index) == 0:"                             >> "$CASAMS_FPY"
echo "    print('No phasecal was found!')"                   >> "$CASAMS_FPY"
echo "    sys.exit()"                                        >> "$CASAMS_FPY"
echo ""                                                            >> "$CASAMS_FPY"
echo "# "                                                          >> "$CASAMS_FPY"
echo "# -- count spectral window number"                           >> "$CASAMS_FPY"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}/SPECTRAL_WINDOW')"  >> "$CASAMS_FPY"
echo "spwcount = len(tb.rownumbers())"                             >> "$CASAMS_FPY"
echo "spwnchan = tb.getcol('NUM_CHAN').tolist()"                   >> "$CASAMS_FPY"
echo "spwnames = tb.getcol('NAME').tolist()"                       >> "$CASAMS_FPY" #<20170113><dzliu># We should examine phase cal before and after cal
echo "spwilist = []"                                               >> "$CASAMS_FPY" #<20170113><dzliu># on the data product which has not been split yet
echo "for spwi in range(spwcount):"                                >> "$CASAMS_FPY" #<20170113><dzliu># i.e. named like "calibrated/working/uid___A002_Xb18ac0_X1b7e.ms"
echo "    if spwnames[spwi].find('X0000000000#') < 0:"             >> "$CASAMS_FPY" #<20170113><dzliu># instead of "calibrated/uid___A002_Xb18ac0_X1b7e.ms.split.cal"
echo "        if spwnames[spwi].find('#ALMA_') >= 0:"              >> "$CASAMS_FPY" #<20170113><dzliu># instead of "calibrated/uid___A002_Xb18ac0_X1b7e.ms.split.cal"
echo "            if spwnames[spwi].find('#BB_') >= 0:"            >> "$CASAMS_FPY" #<20170113><dzliu># In the latter split data product, DATA column has already 
echo "                if spwnames[spwi].find('#FULL_RES') >= 0:"   >> "$CASAMS_FPY" #<20170113><dzliu># been filled with CORRECTED_DATA column. 
echo "                    spwilist.append(spwi)"                   >> "$CASAMS_FPY" #<20170113><dzliu># 
echo "tb.close()"                                                  >> "$CASAMS_FPY"
echo ""                                                                 >> "$CASAMS_FPY"
echo "# "                                                               >> "$CASAMS_FPY"
echo "# -- list sources"                                                >> "$CASAMS_FPY"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}/FIELD')"                 >> "$CASAMS_FPY"
echo "sources = tb.getcol('NAME').tolist()"                             >> "$CASAMS_FPY"
echo "field_index = range(len(sources))"                                >> "$CASAMS_FPY"
echo "tb.close()"                                                       >> "$CASAMS_FPY"
echo ""                                                                               >> "$CASAMS_FPY"
echo "# "                                                                             >> "$CASAMS_FPY"
echo "# -- identify phasecal sources by looping all scans"                            >> "$CASAMS_FPY"
echo "tb.open('${CASAMS_VIS}${CASAMS_VIS_SFIX}')"                                     >> "$CASAMS_FPY"
echo "scan_state_index = tb.getcol('STATE_ID').tolist()"                              >> "$CASAMS_FPY"
echo "scan_field_index = tb.getcol('FIELD_ID').tolist()"                              >> "$CASAMS_FPY"
echo "scan_found_index = []"                                                          >> "$CASAMS_FPY"
echo "tb.close()"                                                                     >> "$CASAMS_FPY"
echo "for i in range(len(state_index)):"                                                     >> "$CASAMS_FPY"
echo "    scan_found_ind = [j for j,x in enumerate(scan_state_index) if x==state_index[i]]"  >> "$CASAMS_FPY" # http://stackoverflow.com/questions/9542738/python-find-in-list
echo "    if len(scan_found_ind)>0:"                                                         >> "$CASAMS_FPY"
echo "        scan_found_index.extend(scan_found_ind)"                                       >> "$CASAMS_FPY"
echo ""                                                                                      >> "$CASAMS_FPY"
echo "if len(scan_found_index) > 0: "                                                        >> "$CASAMS_FPY"
echo "    loop_found_tuple = list(set(zip(\\"                                                >> "$CASAMS_FPY"
echo "                       [scan_field_index[j] for j in scan_found_index],\\"             >> "$CASAMS_FPY"
echo "                       [scan_state_index[j] for j in scan_found_index]\\"              >> "$CASAMS_FPY"
echo "                       )))"                                                            >> "$CASAMS_FPY"
echo ""                                                                                                                                 >> "$CASAMS_FPY"
echo "# "                                                                                                                               >> "$CASAMS_FPY"
echo "# -- plotms"                                                                                                                      >> "$CASAMS_FPY"
echo "print \"Plotting phase vs. uvdist for phasecal\""                                                                                 >> "$CASAMS_FPY"
echo "for i in range(len(loop_found_tuple)): "                                                                                          >> "$CASAMS_FPY"
echo "    for spwi in spwilist: "                                                                                                       >> "$CASAMS_FPY" #<20170113><dzliu># 
echo "        source = sources[loop_found_tuple[i][0]]"                                                                                 >> "$CASAMS_FPY"
echo "        intent = intents[loop_found_tuple[i][1]]"                                                                                 >> "$CASAMS_FPY"
echo "        plotms( "                                                                                                                 >> "$CASAMS_FPY"
echo "            vis         = '${CASAMS_VIS}${CASAMS_VIS_SFIX}', "                                                                    >> "$CASAMS_FPY"
echo "            xaxis       = 'uvdist', "                                                                                             >> "$CASAMS_FPY"
echo "            yaxis       = 'phase', "                                                                                              >> "$CASAMS_FPY"
echo "            field       = '%s'%(source), "                                                                                        >> "$CASAMS_FPY"
echo "            spw         = '%d'%(spwi), "                                                                                          >> "$CASAMS_FPY"
echo "            avgchannel  = '%d'%(spwnchan[spwi]), "                                                                                >> "$CASAMS_FPY"
echo "            avgtime     = '31536000', "                                                                                           >> "$CASAMS_FPY" #<TODO># time averaging
echo "            intent      = '%s'%(intent), "                                                                                        >> "$CASAMS_FPY"
echo "            coloraxis   = 'baseline', "                                                                                           >> "$CASAMS_FPY"
echo "            ydatacolumn = 'data', "                                                                                               >> "$CASAMS_FPY"
echo "            plotrange   = [0,0,-270,270], "                                                                                       >> "$CASAMS_FPY"
echo "            plotfile    = '${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d.png'%(source,spwi), "                                   >> "$CASAMS_FPY"
echo "            overwrite   =  True "                                                                                                 >> "$CASAMS_FPY"
echo "        )"                                                                                                                        >> "$CASAMS_FPY"
echo "        os.system('echo \"source = %s\" >  \"%s\"'%(source,'${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d.txt'%(source,spwi)))"  >> "$CASAMS_FPY"
echo "        os.system('echo \"intent = %s\" >> \"%s\"'%(intent,'${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d.txt'%(source,spwi)))"  >> "$CASAMS_FPY"
echo "        os.system('cat \"%s\"'%('${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d.txt'%(source,spwi)))"                             >> "$CASAMS_FPY"
echo "        os.system('ls  \"%s\"'%('${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d.png'%(source,spwi)))"                             >> "$CASAMS_FPY"
echo ""                                                                                                                                           >> "$CASAMS_FPY"
echo "# "                                                                                                                                         >> "$CASAMS_FPY"
echo "# -- plotms"                                                                                                                                >> "$CASAMS_FPY"
echo "print \"Plotting phase vs. uvdist for phasecal (corrected)\""                                                                               >> "$CASAMS_FPY"
echo "for i in range(len(loop_found_tuple)): "                                                                                                    >> "$CASAMS_FPY"
echo "    for spwi in spwilist: "                                                                                                                 >> "$CASAMS_FPY" #<20170113><dzliu># 
echo "        source = sources[loop_found_tuple[i][0]]"                                                                                           >> "$CASAMS_FPY"
echo "        intent = intents[loop_found_tuple[i][1]]"                                                                                           >> "$CASAMS_FPY"
echo "        plotms( "                                                                                                                           >> "$CASAMS_FPY"
echo "            vis         = '${CASAMS_VIS}${CASAMS_VIS_SFIX}', "                                                                              >> "$CASAMS_FPY"
echo "            xaxis       = 'uvdist', "                                                                                                       >> "$CASAMS_FPY"
echo "            yaxis       = 'phase', "                                                                                                        >> "$CASAMS_FPY"
echo "            field       = '%s'%(source), "                                                                                                  >> "$CASAMS_FPY"
echo "            spw         = '%d'%(spwi), "                                                                                                    >> "$CASAMS_FPY"
echo "            avgchannel  = '%d'%(spwnchan[spwi]), "                                                                                          >> "$CASAMS_FPY"
echo "            avgtime     = '31536000', "                                                                                                     >> "$CASAMS_FPY" #<TODO># time averaging
echo "            intent      = '%s'%(intent), "                                                                                                  >> "$CASAMS_FPY"
echo "            coloraxis   = 'baseline', "                                                                                                     >> "$CASAMS_FPY"
echo "            ydatacolumn = 'corrected', "                                                                                                    >> "$CASAMS_FPY"
echo "            plotrange   = [0,0,-270,270], "                                                                                                 >> "$CASAMS_FPY"
echo "            plotfile    = '${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d_corrected.png'%(source,spwi), "                                   >> "$CASAMS_FPY"
echo "            overwrite   =  True "                                                                                                           >> "$CASAMS_FPY"
echo "        )"                                                                                                                                  >> "$CASAMS_FPY"
echo "        os.system('echo \"source = %s\" >  \"%s\"'%(source,'${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d_corrected.txt'%(source,spwi)))"  >> "$CASAMS_FPY"
echo "        os.system('echo \"intent = %s\" >> \"%s\"'%(intent,'${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d_corrected.txt'%(source,spwi)))"  >> "$CASAMS_FPY"
echo "        os.system('cat \"%s\"'%('${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d_corrected.txt'%(source,spwi)))"                             >> "$CASAMS_FPY"
echo "        os.system('ls  \"%s\"'%('${CASAMS_OUT}/Phase_vs_uvdist_Source_%s_spw_%d_corrected.png'%(source,spwi)))"                             >> "$CASAMS_FPY"
echo ""                                                                                                                                 >> "$CASAMS_FPY"
echo "# "                                                                                                                               >> "$CASAMS_FPY"
echo "# -- plotms"                                                                                                                      >> "$CASAMS_FPY"
echo "print \"Plotting phase vs. time for phasecal\""                                                                                   >> "$CASAMS_FPY"
echo "for i in range(len(loop_found_tuple)): "                                                                                          >> "$CASAMS_FPY"
echo "    for spwi in spwilist: "                                                                                                       >> "$CASAMS_FPY" #<20170113><dzliu># 
echo "        source = sources[loop_found_tuple[i][0]]"                                                                                 >> "$CASAMS_FPY"
echo "        intent = intents[loop_found_tuple[i][1]]"                                                                                 >> "$CASAMS_FPY"
echo "        plotms( "                                                                                                                 >> "$CASAMS_FPY"
echo "            vis         = '${CASAMS_VIS}${CASAMS_VIS_SFIX}', "                                                                    >> "$CASAMS_FPY"
echo "            xaxis       = 'time', "                                                                                               >> "$CASAMS_FPY"
echo "            yaxis       = 'phase', "                                                                                              >> "$CASAMS_FPY"
echo "            field       = '%s'%(source), "                                                                                        >> "$CASAMS_FPY"
echo "            spw         = '%d'%(spwi), "                                                                                          >> "$CASAMS_FPY"
echo "            antenna     = '', "                                                                                                   >> "$CASAMS_FPY" #<TODO># antenna = 'DA44&*'
echo "            avgchannel  = '%d'%(spwnchan[spwi]), "                                                                                >> "$CASAMS_FPY"
echo "            intent      = '%s'%(intent), "                                                                                        >> "$CASAMS_FPY"
echo "            coloraxis   = 'baseline', "                                                                                           >> "$CASAMS_FPY"
echo "            ydatacolumn = 'data', "                                                                                               >> "$CASAMS_FPY"
echo "            plotrange   = [0,0,-270,270], "                                                                                       >> "$CASAMS_FPY"
echo "            plotfile    = '${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d.png'%(source,spwi), "                                     >> "$CASAMS_FPY"
echo "            overwrite   =  True "                                                                                                 >> "$CASAMS_FPY"
echo "        )"                                                                                                                        >> "$CASAMS_FPY"
echo "        os.system('echo \"source = %s\" >  \"%s\"'%(source,'${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d.txt'%(source,spwi)))"    >> "$CASAMS_FPY"
echo "        os.system('echo \"intent = %s\" >> \"%s\"'%(intent,'${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d.txt'%(source,spwi)))"    >> "$CASAMS_FPY"
echo "        os.system('cat \"%s\"'%('${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d.txt'%(source,spwi)))"                               >> "$CASAMS_FPY"
echo "        os.system('ls  \"%s\"'%('${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d.png'%(source,spwi)))"                               >> "$CASAMS_FPY"
echo ""                                                                                                                                           >> "$CASAMS_FPY"
echo "# "                                                                                                                                         >> "$CASAMS_FPY"
echo "# -- plotms"                                                                                                                                >> "$CASAMS_FPY"
echo "print \"Plotting phase vs. time for phasecal (corrected)\""                                                                                 >> "$CASAMS_FPY"
echo "for i in range(len(loop_found_tuple)): "                                                                                                    >> "$CASAMS_FPY"
echo "    for spwi in spwilist: "                                                                                                                 >> "$CASAMS_FPY" #<20170113><dzliu># 
echo "        source = sources[loop_found_tuple[i][0]]"                                                                                           >> "$CASAMS_FPY"
echo "        intent = intents[loop_found_tuple[i][1]]"                                                                                           >> "$CASAMS_FPY"
echo "        plotms( "                                                                                                                           >> "$CASAMS_FPY"
echo "            vis         = '${CASAMS_VIS}${CASAMS_VIS_SFIX}', "                                                                              >> "$CASAMS_FPY"
echo "            xaxis       = 'time', "                                                                                                         >> "$CASAMS_FPY"
echo "            yaxis       = 'phase', "                                                                                                        >> "$CASAMS_FPY"
echo "            field       = '%s'%(source), "                                                                                                  >> "$CASAMS_FPY"
echo "            spw         = '%d'%(spwi), "                                                                                                    >> "$CASAMS_FPY"
echo "            antenna     = '', "                                                                                                             >> "$CASAMS_FPY" #<TODO># antenna = 'DA44&*'
echo "            avgchannel  = '%d'%(spwnchan[spwi]), "                                                                                          >> "$CASAMS_FPY"
echo "            intent      = '%s'%(intent), "                                                                                                  >> "$CASAMS_FPY"
echo "            coloraxis   = 'baseline', "                                                                                                     >> "$CASAMS_FPY"
echo "            ydatacolumn = 'corrected', "                                                                                                    >> "$CASAMS_FPY"
echo "            plotrange   = [0,0,-270,270], "                                                                                                 >> "$CASAMS_FPY"
echo "            plotfile    = '${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d_corrected.png'%(source,spwi), "                                     >> "$CASAMS_FPY"
echo "            overwrite   =  True "                                                                                                           >> "$CASAMS_FPY"
echo "        )"                                                                                                                                  >> "$CASAMS_FPY"
echo "        os.system('echo \"source = %s\" >  \"%s\"'%(source,'${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d_corrected.txt'%(source,spwi)))"    >> "$CASAMS_FPY"
echo "        os.system('echo \"intent = %s\" >> \"%s\"'%(intent,'${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d_corrected.txt'%(source,spwi)))"    >> "$CASAMS_FPY"
echo "        os.system('cat \"%s\"'%('${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d_corrected.txt'%(source,spwi)))"                               >> "$CASAMS_FPY"
echo "        os.system('ls  \"%s\"'%('${CASAMS_OUT}/Phase_vs_time_Source_%s_spw_%d_corrected.png'%(source,spwi)))"                               >> "$CASAMS_FPY"
echo "" >> "$CASAMS_FPY"
echo "" >> "$CASAMS_FPY"
echo "" >> "$CASAMS_FPY"
echo "Wrote to python script: \"${CASAMS_FPY}\""
echo "Please run bash -c 'casa --nologfile -c \"${CASAMS_FPY}\"'"
# 
# 
# 
# 
# Run casa
# 
CASAMS_YES="Yes"
echo ""
echo -n "Ready to run CASA now? $CASAMS_YES"
read -N 1 CASAMS_KEY
if [[ x"$CASAMS_KEY" != x ]]; then
    echo -e -n "\r$(tput el)Ready to run CASA now? $CASAMS_KEY"
    read CASAMS_YES
    CASAMS_YES="${CASAMS_KEY}${CASAMS_YES}"
fi
# Check again the input is not empty
if [[ x"$CASAMS_YES" != x"Y"* && x"$CASAMS_YES" != x"y"* ]]; then
    echo "Exit!"
    exit
fi
# Run
if [[ $(type casa 2>/dev/null | wc -l) -eq 0 ]]; then
    echo ""
    echo "Error! CASA was not found! Please check your \$PATH!"
    echo ""
    exit
else
    echo "Running CASA, please wait"
    casa --nologfile -c "${CASAMS_FPY}"
    echo "Finished CASA!"
fi



echo "Done!"
