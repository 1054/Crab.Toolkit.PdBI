#!/bin/bash
# 
# Input uvt
# Output lmv, eps
# 
# Last update:
#    2017-02-19 rewritten, beautified, used "pdbi-uvt-core-arg"
# 
# 



# 
# Uage
# 
usage() {
    echo "Usage: "
    echo "  pdbi-uvt-go-uvmap -name aaa.uvt -size 15 -map_size 512 -map_cell 0.2 -out aaa.eps -overwrite"
    echo ""
}



#
# readlink
# 
if [[ $(uname) == *"Darwin"* ]]; then
    function readlink() {
        if [[ $# -gt 1 ]]; then if [[ "$1" == "-f" ]]; then shift; fi; fi
        DIR=$(echo "${1%/*}"); (cd "$DIR" && echo "$(pwd -P)/$(basename ${1})")
    }
fi
PdBIUVT_DIR=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))



# 
# Read input parameters by calling "pdbi-uvt-core-arg"
# 
if [[ -f "$PdBIUVT_DIR/pdbi-uvt-core-arg" ]]; then
    source "$PdBIUVT_DIR/pdbi-uvt-core-arg" "$@"
else
    echo ""; echo "Error! Could not find \"$PdBIUVT_DIR/pdbi-uvt-core-arg\"! Please contact software supplier!"; echo ""
    exit
fi



# 
# Check input parameters -- uvt file name
# 
if [[ x"$PdBIUVT_NAME" == x ]]; then
    usage; exit
fi













# 
# Deal with the input uvt file
# Output to mapping script
# "$PdBIUVT_NAME.uvt.go.uvmap.script"
# 
PdBIUVT_EXE="$PdBIUVT_NAME.$PdBIUVT_TYPE.go.uvmap.script"
PdBIUVT_LOG="$PdBIUVT_NAME.$PdBIUVT_TYPE.go.uvmap.log"

echo ""                        >  "$PdBIUVT_EXE"
echo ""                        >> "$PdBIUVT_EXE"
echo "let name $PdBIUVT_NAME"  >> "$PdBIUVT_EXE"

i=0

if [[ $i -lt ${#PdBIUVT_SIZE[@]}     ]]; then echo "let size ${PdBIUVT_SIZE[i]}"          >> "$PdBIUVT_EXE"; fi
if [[ $i -lt ${#PdBIUVT_MAP_SIZE[@]} ]]; then echo "let map_size ${PdBIUVT_MAP_SIZE[i]}"  >> "$PdBIUVT_EXE"; fi
if [[ $i -lt ${#PdBIUVT_MAP_CELL[@]} ]]; then echo "let map_cell ${PdBIUVT_MAP_CELL[i]}"  >> "$PdBIUVT_EXE"; fi

echo "go uvmap"             >> "$PdBIUVT_EXE"
echo "go noise"             >> "$PdBIUVT_EXE"
echo "let spacing noise"    >> "$PdBIUVT_EXE"
echo "go view"              >> "$PdBIUVT_EXE"

# Set default output file as
# "$PdBIUVT_NAME.uvt.go.uvmap.eps"
if [[ x"$PdBIUVT_SAVE" == x || x"$PdBIUVT_SAVE" == x"tmp_pdbi_uvt" ]]; then 
    PdBIUVT_SAVE="$PdBIUVT_NAME.uvt.go.uvmap.eps"
    echo ""; echo "Warning! Output name was not given, setting to \"$PdBIUVT_SAVE\""; echo ""
fi

# Set default output file extension as eps
if [[ x"$PdBIUVT_SAVE" != x*".eps" ]]; then
    PdBIUVT_SAVE="$PdBIUVT_SAVE.eps"
fi

# Overwrite or not
if [[ "$PdBIUVT_OVERWRITE" == "YES" ]]; then
    echo "hardcopy \"$PdBIUVT_SAVE\" /overwrite"    >> "$PdBIUVT_EXE"
    echo "sys \"ps2pdf -dEPSCrop $PdBIUVT_SAVE\""   >> "$PdBIUVT_EXE"
else
    echo "hardcopy \"$PdBIUVT_SAVE\""               >> "$PdBIUVT_EXE"
    echo "sys \"ps2pdf -dEPSCrop $PdBIUVT_SAVE\""   >> "$PdBIUVT_EXE"
fi

# Run mapping script
echo "@$PdBIUVT_EXE" | mapping | tee "$PdBIUVT_LOG"


echo ""
echo "Output to $PdBIUVT_SAVE"
echo ""


echo "Done!"


