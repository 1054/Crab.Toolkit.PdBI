#!/bin/bash
# 
# Input vis, field, spw
# Output and execute python script file for uvmodelfit
# 
# Last update:
#    2015-04-02 created
#    2017-02-22 largely modified, using casa-command-line-arguments. 
# 



# Function to print usage
function usage() {
    echo "Usage: "
    echo "    casa-ms-uvmodelfit -vis calibrated.ms -field 3      -freq 344 -width 3840 -modeltype P -sourcepar 1.0 0.0 0.0 -varypar T T T -iter 30 \\"
    echo "                                          -name CDFS344 -freq 344 -width 3840 -modeltype P -sourcepar 1.0 0.0 0.0 -varypar T T T -iter 30 \\"
    echo "                                          -name Another -freq 344 -width 3840 -modeltype G -sourcepar 1.0 0.0 0.0 0.2 0.2 0.0 -varypar T T T T T T -iter 30"
    echo "    (In this example, we fit three sources in the measurement set.)"
    echo ""
}



# 
# Read input parameters
# 
. $(dirname ${BASH_SOURCE[0]})/"casa-command-line-arguments" "$@"



# 
# Check input parameters
# 
if [[ ${#CASA_INP_VIS[@]}             -eq 0 ]]; then usage; exit; fi
if [[ ${#CASA_INP_UVFIT_MODELTYPE[@]} -eq 0 ]]; then usage; exit; fi
if [[ ${#CASA_INP_UVFIT_SOURCEPAR[@]} -eq 0 ]]; then usage; exit; fi
if [[ ${#CASA_INP_UVFIT_VARIEDPAR[@]} -eq 0 ]]; then usage; exit; fi

CASA_DEFAULT_ITERATION=15



# 
# Write run_casa_ms_uvmodelfit.py
# 
CASAMS_EXE="run_casa_ms_uvmodelfit.py"
CASAMS_LOG="run_casa_ms_uvmodelfit.log"
echo "#!/usr/bin/env python" > "$CASAMS_EXE"
j=0
for (( i=0; i<${#CASA_INP_UVFIT_MODELTYPE[@]}; i++ )); do
    # 
    if [[ "${CASA_INP_UVFIT_MODELTYPE[$i]}" ==  "P"* ]]; then
        if [[ $(($j+2)) -ge ${#CASA_INP_UVFIT_SOURCEPAR[@]} ]]; then echo "Error! Input \"sourcepar\" has inconsistent size (3 for each comptype \"P\" and 6 for each comptype \"G\")!"; usage; exit 1; fi
        if [[ $(($j+2)) -ge ${#CASA_INP_UVFIT_VARIEDPAR[@]} ]]; then echo "Error! Input \"varypar\" has inconsistent size (3 for each comptype \"P\" and 6 for each comptype \"G\")!"; usage; exit 1; fi
		CASAMS_MODELTYPE_PRINT="${CASA_INP_UVFIT_MODELTYPE[$i]}"
		CASAMS_SOURCEPAR_PRINT="${CASA_INP_UVFIT_SOURCEPAR[$j+0]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+1]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+2]}"
		CASAMS_VARIEDPAR_PRINT="${CASA_INP_UVFIT_VARIEDPAR[$j+0]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+1]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+2]}"
		j=$(($j+3))
	else
        if [[ $(($j+5)) -ge ${#CASA_INP_UVFIT_SOURCEPAR[@]} ]]; then echo "Error! Input \"sourcepar\" has inconsistent size (3 for each comptype \"P\" and 6 for each comptype \"G\")!"; usage; exit 1; fi
        if [[ $(($j+5)) -ge ${#CASA_INP_UVFIT_VARIEDPAR[@]} ]]; then echo "Error! Input \"varypar\" has inconsistent size (3 for each comptype \"P\" and 6 for each comptype \"G\")!"; usage; exit 1; fi
		CASAMS_MODELTYPE_PRINT="${CASA_INP_UVFIT_MODELTYPE[$i]}"
		CASAMS_SOURCEPAR_PRINT="${CASA_INP_UVFIT_SOURCEPAR[$j+0]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+1]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+2]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+3]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+4]}, ${CASA_INP_UVFIT_SOURCEPAR[$j+5]}"
		CASAMS_VARIEDPAR_PRINT="${CASA_INP_UVFIT_VARIEDPAR[$j+0]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+1]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+2]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+3]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+4]}, ${CASA_INP_UVFIT_VARIEDPAR[$j+5]}"
		j=$(($j+6))
	fi
    
    if [[ $i -ge 0                               ]]; then echo "vis         = '${CASA_INP_VIS}'"                  >> "$CASAMS_EXE"; fi #<TODO># uvmodelfit for docvel and nocvel have different results!
    if [[ $i -lt ${#CASA_INP_FIELD[@]}           ]]; then echo "field       = '${CASA_INP_FIELD[i]}'"             >> "$CASAMS_EXE"; fi
    if [[ $i -lt ${#CASA_INP_SPW[@]}             ]]; then echo "spw         = '${CASA_INP_SPW[i]}'"               >> "$CASAMS_EXE"; fi
   #if [[ $i -lt ${#CASA_INP_WIDTH[@]}           ]]; then echo "width       = '${CASA_INP_WIDTH[i]}'"             >> "$CASAMS_EXE"; fi
   #if [[ $i -lt ${#CASA_INP_FREQ[@]}            ]]; then echo "freq        = '${CASA_INP_FREQ[i]}'"              >> "$CASAMS_EXE"; fi
    if [[ $i -lt ${#CASA_INP_OUTPUT[@]}          ]]; then echo "outfile     = '${CASA_INP_OUTPUT[i]}'"            >> "$CASAMS_EXE"; fi
    if [[ $i -lt ${#CASA_INP_UVFIT_ITERATION[@]} ]]; then echo "niter       =  ${CASA_INP_UVFIT_ITERATION[i]}"    >> "$CASAMS_EXE"; else
                                                          echo "niter       =  ${CASA_DEFAULT_ITERATION}"         >> "$CASAMS_EXE"; fi
    
    # Check and backup original output file
    if [[ $i -lt ${#CASA_INP_OUTPUT[@]}          ]]; then 
        if [[ -f "${CASA_INP_OUTPUT[i]}" ]]; then
            rm -rf "${CASA_INP_OUTPUT[i]}.backup" 2>/dev/null
            mv "${CASA_INP_OUTPUT[i]}" "${CASA_INP_OUTPUT[i]}.backup" 2>/dev/null
        fi
    fi
    
    echo "comptype    = '$CASAMS_MODELTYPE_PRINT'"                                         >> "$CASAMS_EXE"
    echo "sourcepar   = [$CASAMS_SOURCEPAR_PRINT] # flux, ra, dec, amajor, baratio, angle" >> "$CASAMS_EXE"
    echo "varypar     = [$CASAMS_VARIEDPAR_PRINT] # flux, ra, dec, amajor, baratio, angle" >> "$CASAMS_EXE"
    echo "inp(uvmodelfit)"                                                                 >> "$CASAMS_EXE"
    echo "uvmodelfit()"                                                                    >> "$CASAMS_EXE"
    echo ""                                                                                >> "$CASAMS_EXE"
done
echo "Wrote to python script: ${CASAMS_EXE}"



# 
# run casa now
# 
if [[ $CASA_INP_NO -eq 0 ]]; then
    
    CASAMS_GOO="y"
    if [[ $CASA_INP_YES -eq 0 ]]; then
        read -e -p "Launch casa now? " -i "y" CASAMS_GOO
    else
        echo "Launching casa "
    fi
    if [[ x"$CASAMS_GOO" == x"y"* || x"$CASAMS_GOO" == x"Y"* ]]; then
        echo "casa --nogui --nologfile -c ${CASAMS_EXE} | tee ${CASAMS_LOG}"
              casa --nogui --nologfile -c "${CASAMS_EXE}" | tee "${CASAMS_LOG}"
    fi
    
    # copy EXE and LOG
    for (( i=0; i<${#CASA_INP_UVFIT_MODELTYPE[@]}; i++ )); do
        if [[ $i -lt ${#CASA_INP_OUTPUT[@]} ]]; then 
            cp "$CASAMS_EXE" $(echo "${CASA_INP_OUTPUT[i]}" | sed -e 's/\.cl$//g')".py"
            cp "$CASAMS_LOG" $(echo "${CASA_INP_OUTPUT[i]}" | sed -e 's/\.cl$//g')".log"
        fi
    done
    
    # print data table
    for (( i=0; i<${#CASA_INP_UVFIT_MODELTYPE[@]}; i++ )); do
        if [[ $i -lt ${#CASA_INP_UVFIT_ITERATION[@]} ]]; then 
            ${CASA_INP_UVFIT_ITERATION[i]}
        else
            ${CASA_DEFAULT_ITERATION}
        fi
    done
    
else
    echo "OK, we will not run casa now. Please run the following command by yourself"
    echo "    casa --nogui --nologfile -c ${CASAMS_EXE} | tee ${CASAMS_LOG}"
    echo ""
fi

echo "Done!"


